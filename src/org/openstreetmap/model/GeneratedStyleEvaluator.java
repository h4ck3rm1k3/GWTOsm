package org.openstreetmap.model;
import  org.openstreetmap.model.StyleEvaluator;
public class GeneratedStyleEvaluator extends StyleEvaluator  { 
protected Style mturning_circle = new Style ("Style"){
// DEBUG :adding turning_circle
protected Rule mRules0 = new Rule ("Rule"){
// DEBUG adding Rules
protected PointSymbolizer mSymbol1 = new PointSymbolizer( "symbols/turning_circle.15.png","png","15","15");
//LEAVING PointSymbolizer
public void LoadSymbols(){
Load(mSymbol1);
}
public void LoadCSS(){
}
public void LoadFilters(){
}
};//Rules end (mRules0)
protected Rule mRules1 = new Rule ("Rule"){
// DEBUG adding Rules
protected PointSymbolizer mSymbol2 = new PointSymbolizer( "symbols/turning_circle.19.png","png","19","19");
//LEAVING PointSymbolizer
public void LoadSymbols(){
Load(mSymbol2);
}
public void LoadCSS(){
}
public void LoadFilters(){
}
};//Rules end (mRules1)
public void LoadRules(){
Load(mRules0);
Load(mRules1);
}
};//turning_circle end
protected Style mhighway_area_casing = new Style ("Style"){
// DEBUG :adding highway_area_casing
protected Rule mRules2 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter1 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol3 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS0 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS0)
//CSS: stroke-width
protected stroke_width mCSS1 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol3);
}
public void LoadCSS(){
Load(mCSS0);
Load(mCSS1);
}
public void LoadFilters(){
Load(mFilter1);
}
};//Rules end (mRules2)
protected Rule mRules3 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter2 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol4 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS2 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS2)
//CSS: stroke-width
protected stroke_width mCSS3 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS3)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol4);
}
public void LoadCSS(){
Load(mCSS2);
Load(mCSS3);
}
public void LoadFilters(){
Load(mFilter2);
}
};//Rules end (mRules3)
protected Rule mRules4 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter3 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_track))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol5 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS4 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS4)
//CSS: stroke-width
protected stroke_width mCSS5 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS5)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol5);
}
public void LoadCSS(){
Load(mCSS4);
Load(mCSS5);
}
public void LoadFilters(){
Load(mFilter3);
}
};//Rules end (mRules4)
public void LoadRules(){
Load(mRules2);
Load(mRules3);
Load(mRules4);
}
};//highway_area_casing end
protected Style mhighway_area_fill = new Style ("Style"){
// DEBUG :adding highway_area_fill
protected Rule mRules5 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter4 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol6 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS6 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS6)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol6);
}
public void LoadCSS(){
Load(mCSS6);
}
public void LoadFilters(){
Load(mFilter4);
}
};//Rules end (mRules5)
protected Rule mRules6 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter5 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol7 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS7 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS7)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol7);
}
public void LoadCSS(){
Load(mCSS7);
}
public void LoadFilters(){
Load(mFilter5);
}
};//Rules end (mRules6)
protected Rule mRules7 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter6 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol8 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS8 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS8)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol8);
}
public void LoadCSS(){
Load(mCSS8);
}
public void LoadFilters(){
Load(mFilter6);
}
};//Rules end (mRules7)
protected Rule mRules8 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter7 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_track))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol9 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS9 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#dfcc66");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS9)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol9);
}
public void LoadCSS(){
Load(mCSS9);
}
public void LoadFilters(){
Load(mFilter7);
}
};//Rules end (mRules8)
public void LoadRules(){
Load(mRules5);
Load(mRules6);
Load(mRules7);
Load(mRules8);
}
};//highway_area_fill end
protected Style mleisure = new Style ("Style"){
// DEBUG :adding leisure
protected Rule mRules9 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter8 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_playground))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol10 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS10 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ccfff1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS10)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol11 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS11 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS11)
//CSS: stroke-width
protected stroke_width mCSS12 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS12)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol10);
Load(mSymbol11);
}
public void LoadCSS(){
Load(mCSS10);
Load(mCSS11);
Load(mCSS12);
}
public void LoadFilters(){
Load(mFilter8);
}
};//Rules end (mRules9)
protected Rule mRules10 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter9 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_picnic_site)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_caravan_site)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_camp_site))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol12 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS13 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ccff99");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS13)
//CSS: fill-opacity
protected fill_opacity mCSS14 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS14)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol13 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS15 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS15)
//CSS: stroke-width
protected stroke_width mCSS16 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS16)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol12);
Load(mSymbol13);
}
public void LoadCSS(){
Load(mCSS13);
Load(mCSS14);
Load(mCSS15);
Load(mCSS16);
}
public void LoadFilters(){
Load(mFilter9);
}
};//Rules end (mRules10)
protected Rule mRules11 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter10 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_attraction))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol14 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS17 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#f2caea");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS17)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol14);
}
public void LoadCSS(){
Load(mCSS17);
}
public void LoadFilters(){
Load(mFilter10);
}
};//Rules end (mRules11)
protected Rule mRules12 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter11 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_quarry))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol15 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
protected LineSymbolizer mSymbol16 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS18 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS18)
//CSS: stroke-width
protected stroke_width mCSS19 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS19)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol15);
Load(mSymbol16);
}
public void LoadCSS(){
Load(mCSS18);
Load(mCSS19);
}
public void LoadFilters(){
Load(mFilter11);
}
};//Rules end (mRules12)
protected Rule mRules13 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter12 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_vineyard)))))))),And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_nature_reserve))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol17 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS20 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#abdf96");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS20)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol17);
}
public void LoadCSS(){
Load(mCSS20);
}
public void LoadFilters(){
Load(mFilter12);
}
};//Rules end (mRules13)
protected Rule mRules14 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter13 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_orchard))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol18 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol18);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter13);
}
};//Rules end (mRules14)
protected Rule mRules15 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter14 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_vineyard))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol19 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol19);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter14);
}
};//Rules end (mRules15)
protected Rule mRules16 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter15 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_vineyard))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol20 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol20);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter15);
}
};//Rules end (mRules16)
protected Rule mRules17 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter16 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_nature_reserve))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol21 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol21);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter16);
}
};//Rules end (mRules17)
protected Rule mRules18 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter17 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_nature_reserve))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol22 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol22);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter17);
}
};//Rules end (mRules18)
protected Rule mRules19 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter18 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_cemetery))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol23 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS21 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#aacbaf");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS21)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol23);
}
public void LoadCSS(){
Load(mCSS21);
}
public void LoadFilters(){
Load(mFilter18);
}
};//Rules end (mRules19)
protected Rule mRules20 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter19 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol24 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS22 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS22)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol24);
}
public void LoadCSS(){
Load(mCSS22);
}
public void LoadFilters(){
Load(mFilter19);
}
};//Rules end (mRules20)
protected Rule mRules21 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter20 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_barracks))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol25 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS23 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ff8f8f");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS23)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol25);
}
public void LoadCSS(){
Load(mCSS23);
}
public void LoadFilters(){
Load(mFilter20);
}
};//Rules end (mRules21)
protected Rule mRules22 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter21 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_military))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol26 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS24 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ffa8a8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS24)
//CSS: fill-opacity
protected fill_opacity mCSS25 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS25)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol26);
}
public void LoadCSS(){
Load(mCSS24);
Load(mCSS25);
}
public void LoadFilters(){
Load(mFilter21);
}
};//Rules end (mRules22)
protected Rule mRules23 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter22 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_field)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_field))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol27 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS26 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#666600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS26)
//CSS: fill-opacity
protected fill_opacity mCSS27 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS27)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol27);
}
public void LoadCSS(){
Load(mCSS26);
Load(mCSS27);
}
public void LoadFilters(){
Load(mFilter22);
}
};//Rules end (mRules23)
protected Rule mRules24 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter23 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_field)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_field))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol28 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS28 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#666600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS28)
//CSS: fill-opacity
protected fill_opacity mCSS29 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS29)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol29 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS30 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#660");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS30)
//CSS: stroke-opacity
protected stroke_opacity mCSS31 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS31)
//CSS: stroke-width
protected stroke_width mCSS32 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS32)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol28);
Load(mSymbol29);
}
public void LoadCSS(){
Load(mCSS28);
Load(mCSS29);
Load(mCSS30);
Load(mCSS31);
Load(mCSS32);
}
public void LoadFilters(){
Load(mFilter23);
}
};//Rules end (mRules24)
protected Rule mRules25 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter24 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_danger_area))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol30 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS33 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","pink");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS33)
//CSS: fill-opacity
protected fill_opacity mCSS34 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS34)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol30);
}
public void LoadCSS(){
Load(mCSS33);
Load(mCSS34);
}
public void LoadFilters(){
Load(mFilter24);
}
};//Rules end (mRules25)
protected Rule mRules26 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter25 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_danger_area))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol31 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol31);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter25);
}
};//Rules end (mRules26)
protected Rule mRules27 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter26 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getreligion().equals_(CONST_jewish)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_cemetery))))))))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol32 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol32);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter26);
}
};//Rules end (mRules27)
protected Rule mRules28 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter27 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getreligion().notequals_(CONST_jewish)))))))),And(Concat(Not(Parens(Condition(getObj().getreligion().notequals_("")))))))))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_cemetery))))))))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol33 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol33);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter27);
}
};//Rules end (mRules28)
protected Rule mRules29 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter28 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grass)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_meadow))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol34 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS35 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#cfeca8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS35)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol34);
}
public void LoadCSS(){
Load(mCSS35);
}
public void LoadFilters(){
Load(mFilter28);
}
};//Rules end (mRules29)
protected Rule mRules30 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter29 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_recreation_ground)))))))),And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_park))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol35 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS36 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#b6fdb6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS36)
//CSS: fill-opacity
protected fill_opacity mCSS37 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS37)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol35);
}
public void LoadCSS(){
Load(mCSS36);
Load(mCSS37);
}
public void LoadFilters(){
Load(mFilter29);
}
};//Rules end (mRules30)
protected Rule mRules31 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter30 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_zoo))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol36 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol36);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter30);
}
};//Rules end (mRules31)
protected Rule mRules32 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter31 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_common))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol37 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS38 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#cfeca8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS38)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol37);
}
public void LoadCSS(){
Load(mCSS38);
}
public void LoadFilters(){
Load(mFilter31);
}
};//Rules end (mRules32)
protected Rule mRules33 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter32 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_garden))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol38 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS39 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#cfeca8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS39)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol38);
}
public void LoadCSS(){
Load(mCSS39);
}
public void LoadFilters(){
Load(mFilter32);
}
};//Rules end (mRules33)
protected Rule mRules34 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter33 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_golf_course))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol39 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS40 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#b5e3b5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS40)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol39);
}
public void LoadCSS(){
Load(mCSS40);
}
public void LoadFilters(){
Load(mFilter33);
}
};//Rules end (mRules34)
protected Rule mRules35 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter34 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_allotments))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol40 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS41 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#c8b084");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS41)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol40);
}
public void LoadCSS(){
Load(mCSS41);
}
public void LoadFilters(){
Load(mFilter34);
}
};//Rules end (mRules35)
protected Rule mRules36 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter35 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_forest))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol41 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS42 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#8dc56c");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS42)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol41);
}
public void LoadCSS(){
Load(mCSS42);
}
public void LoadFilters(){
Load(mFilter35);
}
};//Rules end (mRules36)
protected Rule mRules37 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter36 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_forest))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol42 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol42);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter36);
}
};//Rules end (mRules37)
protected Rule mRules38 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter37 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_farmyard))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol43 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS43 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ddbf92");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS43)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol43);
}
public void LoadCSS(){
Load(mCSS43);
}
public void LoadFilters(){
Load(mFilter37);
}
};//Rules end (mRules38)
protected Rule mRules39 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter38 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_farmland)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_farm))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol44 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS44 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ead8bd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS44)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol44);
}
public void LoadCSS(){
Load(mCSS44);
}
public void LoadFilters(){
Load(mFilter38);
}
};//Rules end (mRules39)
protected Rule mRules40 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter39 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_conservation)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_recreation_ground))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol45 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS45 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#cfeca8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS45)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol45);
}
public void LoadCSS(){
Load(mCSS45);
}
public void LoadFilters(){
Load(mFilter39);
}
};//Rules end (mRules40)
protected Rule mRules41 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter40 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_village_green))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol46 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS46 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#cfeca8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS46)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol46);
}
public void LoadCSS(){
Load(mCSS46);
}
public void LoadFilters(){
Load(mFilter40);
}
};//Rules end (mRules41)
protected Rule mRules42 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter41 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_retail))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol47 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS47 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#f1dada");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS47)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol47);
}
public void LoadCSS(){
Load(mCSS47);
}
public void LoadFilters(){
Load(mFilter41);
}
};//Rules end (mRules42)
protected Rule mRules43 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter42 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_retail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol48 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS48 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","red");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS48)
//CSS: stroke-width
protected stroke_width mCSS49 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS49)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol48);
}
public void LoadCSS(){
Load(mCSS48);
Load(mCSS49);
}
public void LoadFilters(){
Load(mFilter42);
}
};//Rules end (mRules43)
protected Rule mRules44 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter43 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_railway)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_industrial))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol49 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS50 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#dfd1d6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS50)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol49);
}
public void LoadCSS(){
Load(mCSS50);
}
public void LoadFilters(){
Load(mFilter43);
}
};//Rules end (mRules44)
protected Rule mRules45 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter44 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getpower().equals_(CONST_station))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol50 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS51 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS51)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol50);
}
public void LoadCSS(){
Load(mCSS51);
}
public void LoadFilters(){
Load(mFilter44);
}
};//Rules end (mRules45)
protected Rule mRules46 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter45 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getpower().equals_(CONST_station))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol51 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS52 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS52)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol52 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS53 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#555");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS53)
//CSS: stroke-width
protected stroke_width mCSS54 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS54)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol51);
Load(mSymbol52);
}
public void LoadCSS(){
Load(mCSS52);
Load(mCSS53);
Load(mCSS54);
}
public void LoadFilters(){
Load(mFilter45);
}
};//Rules end (mRules46)
protected Rule mRules47 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter46 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getpower().equals_(CONST_sub_station))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol53 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS55 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS55)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol54 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS56 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#555");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS56)
//CSS: stroke-width
protected stroke_width mCSS57 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS57)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol53);
Load(mSymbol54);
}
public void LoadCSS(){
Load(mCSS55);
Load(mCSS56);
Load(mCSS57);
}
public void LoadFilters(){
Load(mFilter46);
}
};//Rules end (mRules47)
protected Rule mRules48 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter47 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_commercial))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol55 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS58 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#efc8c8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS58)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol55);
}
public void LoadCSS(){
Load(mCSS58);
}
public void LoadFilters(){
Load(mFilter47);
}
};//Rules end (mRules48)
protected Rule mRules49 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter48 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_greenfield)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_landfill)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_brownfield))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol56 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS59 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#9d9d6c");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS59)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol56);
}
public void LoadCSS(){
Load(mCSS59);
}
public void LoadFilters(){
Load(mFilter48);
}
};//Rules end (mRules49)
protected Rule mRules50 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter49 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_wood)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_wood))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol57 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS60 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#aed1a0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS60)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol57);
}
public void LoadCSS(){
Load(mCSS60);
}
public void LoadFilters(){
Load(mFilter49);
}
};//Rules end (mRules50)
protected Rule mRules51 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter50 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_heath))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol58 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS61 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ffffc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS61)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol58);
}
public void LoadCSS(){
Load(mCSS61);
}
public void LoadFilters(){
Load(mFilter50);
}
};//Rules end (mRules51)
protected Rule mRules52 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter51 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_kindergarten)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_hospital)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_school)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_college)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_university))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol59 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS62 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#f0f0d8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS62)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol59);
}
public void LoadCSS(){
Load(mCSS62);
}
public void LoadFilters(){
Load(mFilter51);
}
};//Rules end (mRules52)
protected Rule mRules53 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter52 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_kindergarten)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_hospital)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_school)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_college)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_university))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol60 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS63 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","brown");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS63)
//CSS: stroke-width
protected stroke_width mCSS64 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS64)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol60);
}
public void LoadCSS(){
Load(mCSS63);
Load(mCSS64);
}
public void LoadFilters(){
Load(mFilter52);
}
};//Rules end (mRules53)
protected Rule mRules54 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter53 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol61 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS65 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#f7efb7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS65)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol61);
}
public void LoadCSS(){
Load(mCSS65);
}
public void LoadFilters(){
Load(mFilter53);
}
};//Rules end (mRules54)
protected Rule mRules55 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter54 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol62 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS66 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#eeeed1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS66)
//CSS: stroke-width
protected stroke_width mCSS67 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS67)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol62);
}
public void LoadCSS(){
Load(mCSS66);
Load(mCSS67);
}
public void LoadFilters(){
Load(mFilter54);
}
};//Rules end (mRules55)
protected Rule mRules56 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter55 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_apron))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol63 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS68 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#e9d1ff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS68)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol63);
}
public void LoadCSS(){
Load(mCSS68);
}
public void LoadFilters(){
Load(mFilter55);
}
};//Rules end (mRules56)
protected Rule mRules57 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter56 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_aerodrome))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol64 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS69 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS69)
//CSS: fill-opacity
protected fill_opacity mCSS70 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS70)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol65 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS71 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#555");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS71)
//CSS: stroke-width
protected stroke_width mCSS72 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS72)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol64);
Load(mSymbol65);
}
public void LoadCSS(){
Load(mCSS69);
Load(mCSS70);
Load(mCSS71);
Load(mCSS72);
}
public void LoadFilters(){
Load(mFilter56);
}
};//Rules end (mRules57)
protected Rule mRules58 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter57 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_beach))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol66 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol66);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter57);
}
};//Rules end (mRules58)
protected Rule mRules59 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter58 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_mud))))))))));
};// end of exec
}; // end of Filter
protected PolygonPatternSymbolizer mSymbol67 = new PolygonPatternSymbolizer( );
//LEAVING PolygonPatternSymbolizer
public void LoadSymbols(){
Load(mSymbol67);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter58);
}
};//Rules end (mRules59)
protected Rule mRules60 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter59 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_pitch))))))))));
};// end of exec
}; // end of Filter
protected PolygonSymbolizer mSymbol68 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS73 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#8ad3af");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS73)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol69 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS74 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#888");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS74)
//CSS: stroke-width
protected stroke_width mCSS75 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS75)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol68);
Load(mSymbol69);
}
public void LoadCSS(){
Load(mCSS73);
Load(mCSS74);
Load(mCSS75);
}
public void LoadFilters(){
Load(mFilter59);
}
};//Rules end (mRules60)
public void LoadRules(){
Load(mRules9);
Load(mRules10);
Load(mRules11);
Load(mRules12);
Load(mRules13);
Load(mRules14);
Load(mRules15);
Load(mRules16);
Load(mRules17);
Load(mRules18);
Load(mRules19);
Load(mRules20);
Load(mRules21);
Load(mRules22);
Load(mRules23);
Load(mRules24);
Load(mRules25);
Load(mRules26);
Load(mRules27);
Load(mRules28);
Load(mRules29);
Load(mRules30);
Load(mRules31);
Load(mRules32);
Load(mRules33);
Load(mRules34);
Load(mRules35);
Load(mRules36);
Load(mRules37);
Load(mRules38);
Load(mRules39);
Load(mRules40);
Load(mRules41);
Load(mRules42);
Load(mRules43);
Load(mRules44);
Load(mRules45);
Load(mRules46);
Load(mRules47);
Load(mRules48);
Load(mRules49);
Load(mRules50);
Load(mRules51);
Load(mRules52);
Load(mRules53);
Load(mRules54);
Load(mRules55);
Load(mRules56);
Load(mRules57);
Load(mRules58);
Load(mRules59);
Load(mRules60);
}
};//leisure end
protected Style msports_grounds = new Style ("Style"){
// DEBUG :adding sports_grounds
protected Rule mRules61 = new Rule ("Rule"){
// DEBUG adding Rules
protected PolygonSymbolizer mSymbol70 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS76 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","#33cc99");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS76)
//LEAVING PolygonSymbolizer
public void LoadSymbols(){
Load(mSymbol70);
}
public void LoadCSS(){
Load(mCSS76);
}
public void LoadFilters(){
}
};//Rules end (mRules61)
public void LoadRules(){
Load(mRules61);
}
};//sports_grounds end
protected Style marea_text = new Style ("Style"){
// DEBUG :adding area_text
protected Rule mRules62 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter60 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#000033,1,20);
protected TextSymbolizer mSymbol71 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol71);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter60);
}
};//Rules end (mRules62)
protected Rule mRules63 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter61 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#000033,1,20);
protected TextSymbolizer mSymbol72 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol72);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter61);
}
};//Rules end (mRules63)
protected Rule mRules64 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter62 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#000033,1,20);
protected TextSymbolizer mSymbol73 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol73);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter62);
}
};//Rules end (mRules64)
protected Rule mRules65 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter63 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#000033,1,20);
protected TextSymbolizer mSymbol74 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol74);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter63);
}
};//Rules end (mRules65)
public void LoadRules(){
Load(mRules62);
Load(mRules63);
Load(mRules64);
Load(mRules65);
}
};//area_text end
protected Style mtext = new Style ("Style"){
// DEBUG :adding text
protected Rule mRules66 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter64 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getplace().equals_(CONST_island))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,oblique-fonts, 9,#000,1,0);
protected TextSymbolizer mSymbol75 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol75);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter64);
}
};//Rules end (mRules66)
protected Rule mRules67 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter65 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_fast_food)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_cafe)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_restaurant)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_pub))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,bold-fonts, 10,#734a08,1,34);
protected TextSymbolizer mSymbol76 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol76);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter65);
}
};//Rules end (mRules67)
protected Rule mRules68 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter66 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_bar))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,bold-fonts, 10,#734a08,1,0);
protected TextSymbolizer mSymbol77 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol77);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter66);
}
};//Rules end (mRules68)
protected Rule mRules69 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter67 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_theatre)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_library)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_cinema))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,bold-fonts, 10,#734a08,1,0);
protected TextSymbolizer mSymbol78 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol78);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter67);
}
};//Rules end (mRules69)
protected Rule mRules70 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter68 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaccess().notequals_("")))))))),And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_public)))))))))))),Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#0066ff,1,34);
protected TextSymbolizer mSymbol79 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol79);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter68);
}
};//Rules end (mRules70)
protected Rule mRules71 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter69 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_public)))))),Not(Parens(Condition(getObj().getaccess().notequals_("")))))))))))),Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#66ccaf,1,34);
protected TextSymbolizer mSymbol80 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol80);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter69);
}
};//Rules end (mRules71)
protected Rule mRules72 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter70 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_police))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#734a08,1,30);
protected TextSymbolizer mSymbol81 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol81);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter70);
}
};//Rules end (mRules72)
protected Rule mRules73 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter71 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_fire_station))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#734a08,1,30);
protected TextSymbolizer mSymbol82 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol82);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter71);
}
};//Rules end (mRules73)
protected Rule mRules74 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter72 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_place_of_worship))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#000033,1,30);
protected TextSymbolizer mSymbol83 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol83);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter72);
}
};//Rules end (mRules74)
protected Rule mRules75 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter73 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_wood))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#000,2,10);
protected TextSymbolizer mSymbol84 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol84);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter73);
}
};//Rules end (mRules75)
protected Rule mRules76 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter74 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_peak))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,brown,1,0);
protected TextSymbolizer mSymbol85 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol85);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter74);
}
};//Rules end (mRules76)
protected Rule mRules77 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter75 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_peak))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ele,oblique-fonts, 9,brown,1,0);
protected TextSymbolizer mSymbol86 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol86);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter75);
}
};//Rules end (mRules77)
protected Rule mRules78 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter76 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_basin)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_reservoir)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_lake)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_water))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#6699cc,1,20);
protected TextSymbolizer mSymbol87 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol87);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter76);
}
};//Rules end (mRules78)
protected Rule mRules79 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter77 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getpoint().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().notequals_("")))))))),And(Concat(Not(Parens(Condition(getObj().getleisure().notequals_(""))))))))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#000,2,10);
protected TextSymbolizer mSymbol88 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol88);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter77);
}
};//Rules end (mRules79)
protected Rule mRules80 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter78 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_bay))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#6699cc,1,20);
protected TextSymbolizer mSymbol89 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol89);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter78);
}
};//Rules end (mRules80)
protected Rule mRules81 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter79 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_spring))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#6699cc,1,20);
protected TextSymbolizer mSymbol90 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol90);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter79);
}
};//Rules end (mRules81)
protected Rule mRules82 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter80 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_shelter)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_alpine_hut))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#6699cc,1,0);
protected TextSymbolizer mSymbol91 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol91);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter80);
}
};//Rules end (mRules82)
protected Rule mRules83 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter81 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_shelter)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_alpine_hut))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ele,oblique-fonts, 8,#6699cc,1,0);
protected TextSymbolizer mSymbol92 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol92);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter81);
}
};//Rules end (mRules83)
protected Rule mRules84 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter82 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_bank))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,black,1,0);
protected TextSymbolizer mSymbol93 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol93);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter82);
}
};//Rules end (mRules84)
protected Rule mRules85 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter83 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_hostel)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_hotel))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#0066ff,1,0);
protected TextSymbolizer mSymbol94 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol94);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter83);
}
};//Rules end (mRules85)
protected Rule mRules86 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter84 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_embassy))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#0066ff,1,0);
protected TextSymbolizer mSymbol95 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol95);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter84);
}
};//Rules end (mRules86)
protected Rule mRules87 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter85 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_guest_house))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#0066ff,1,0);
protected TextSymbolizer mSymbol96 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol96);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter85);
}
};//Rules end (mRules87)
protected Rule mRules88 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter86 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_bus_station)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_fuel))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#0066ff,1,0);
protected TextSymbolizer mSymbol97 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol97);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter86);
}
};//Rules end (mRules88)
protected Rule mRules89 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter87 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_camp_site))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#0066ff,1,70);
protected TextSymbolizer mSymbol98 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol98);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter87);
}
};//Rules end (mRules89)
protected Rule mRules90 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter88 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_caravan_site))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#0066ff,1,70);
protected TextSymbolizer mSymbol99 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol99);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter88);
}
};//Rules end (mRules90)
protected Rule mRules91 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter89 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getwaterway().equals_(CONST_lock))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#0066ff,1,70);
protected TextSymbolizer mSymbol100 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol100);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter89);
}
};//Rules end (mRules91)
protected Rule mRules92 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter90 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_marina))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,blue,1,30);
protected TextSymbolizer mSymbol101 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol101);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter90);
}
};//Rules end (mRules92)
protected Rule mRules93 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter91 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_marina))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,blue,1,30);
protected TextSymbolizer mSymbol102 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol102);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter91);
}
};//Rules end (mRules93)
protected Rule mRules94 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter92 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#734a08,1,30);
protected TextSymbolizer mSymbol103 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol103);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter92);
}
};//Rules end (mRules94)
protected Rule mRules95 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter93 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#734a08,1,30);
protected TextSymbolizer mSymbol104 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol104);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter93);
}
};//Rules end (mRules95)
protected Rule mRules96 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter94 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_museum))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#734a08,1,0);
protected TextSymbolizer mSymbol105 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol105);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter94);
}
};//Rules end (mRules96)
protected Rule mRules97 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter95 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_prison))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#734a08,1,0);
protected TextSymbolizer mSymbol106 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol106);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter95);
}
};//Rules end (mRules97)
protected Rule mRules98 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter96 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_attraction))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,#660033,2,10);
protected TextSymbolizer mSymbol107 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol107);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter96);
}
};//Rules end (mRules98)
protected Rule mRules99 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter97 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_university))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,bold-fonts, 9,#000033,1,16);
protected TextSymbolizer mSymbol108 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol108);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter97);
}
};//Rules end (mRules99)
protected Rule mRules100 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter98 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_college)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_school))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#000033,1,14);
protected TextSymbolizer mSymbol109 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol109);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter98);
}
};//Rules end (mRules100)
protected Rule mRules101 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter99 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_kindergarten))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#000033,1,14);
protected TextSymbolizer mSymbol110 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol110);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter99);
}
};//Rules end (mRules101)
protected Rule mRules102 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter100 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getman_made().equals_(CONST_lighthouse))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#000033,2,12);
protected TextSymbolizer mSymbol111 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol111);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter100);
}
};//Rules end (mRules102)
protected Rule mRules103 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter101 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getman_made().equals_(CONST_windmill))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#734a08,1,20);
protected TextSymbolizer mSymbol112 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol112);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter101);
}
};//Rules end (mRules103)
protected Rule mRules104 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter102 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_hospital))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#da0092,2,24);
protected TextSymbolizer mSymbol113 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol113);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter102);
}
};//Rules end (mRules104)
protected Rule mRules105 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter103 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_pharmacy))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#da0092,1,12);
protected TextSymbolizer mSymbol114 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol114);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter103);
}
};//Rules end (mRules105)
protected Rule mRules106 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter104 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_hairdresser)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_doityourself)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_convenience)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_fashion)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_clothes)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_bakery))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#939,1,12);
protected TextSymbolizer mSymbol115 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol115);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter104);
}
};//Rules end (mRules106)
protected Rule mRules107 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter105 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_department_store)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_supermarket))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#939,1,20);
protected TextSymbolizer mSymbol116 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol116);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter105);
}
};//Rules end (mRules107)
protected Rule mRules108 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter106 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_junction))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ref,book-fonts, 9,#6666ff,1,12);
protected TextSymbolizer mSymbol117 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol117);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter106);
}
};//Rules end (mRules108)
protected Rule mRules109 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter107 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_junction))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ref,book-fonts, 9,#6666ff,1,12);
protected TextSymbolizer mSymbol118 = new TextSymbolizer( );
//LEAVING TextSymbolizer
//TextSymbolizer name,book-fonts, 8,#6666ff,1,12);
protected TextSymbolizer mSymbol119 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol118);
Load(mSymbol119);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter107);
}
};//Rules end (mRules109)
protected Rule mRules110 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter108 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_junction))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ref,book-fonts, 13,#6666ff,1,12);
protected TextSymbolizer mSymbol120 = new TextSymbolizer( );
//LEAVING TextSymbolizer
//TextSymbolizer name,book-fonts, 14,#6666ff,1,12);
protected TextSymbolizer mSymbol121 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol120);
Load(mSymbol121);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter108);
}
};//Rules end (mRules110)
protected Rule mRules111 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter109 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_danger_area))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,bold-fonts, 9,pink,1,10);
protected TextSymbolizer mSymbol122 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol122);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter109);
}
};//Rules end (mRules111)
protected Rule mRules112 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter110 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_gate))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ref,book-fonts, 10,#aa66cc,1,10);
protected TextSymbolizer mSymbol123 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol123);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter110);
}
};//Rules end (mRules112)
public void LoadRules(){
Load(mRules66);
Load(mRules67);
Load(mRules68);
Load(mRules69);
Load(mRules70);
Load(mRules71);
Load(mRules72);
Load(mRules73);
Load(mRules74);
Load(mRules75);
Load(mRules76);
Load(mRules77);
Load(mRules78);
Load(mRules79);
Load(mRules80);
Load(mRules81);
Load(mRules82);
Load(mRules83);
Load(mRules84);
Load(mRules85);
Load(mRules86);
Load(mRules87);
Load(mRules88);
Load(mRules89);
Load(mRules90);
Load(mRules91);
Load(mRules92);
Load(mRules93);
Load(mRules94);
Load(mRules95);
Load(mRules96);
Load(mRules97);
Load(mRules98);
Load(mRules99);
Load(mRules100);
Load(mRules101);
Load(mRules102);
Load(mRules103);
Load(mRules104);
Load(mRules105);
Load(mRules106);
Load(mRules107);
Load(mRules108);
Load(mRules109);
Load(mRules110);
Load(mRules111);
Load(mRules112);
}
};//text end
protected Style mtunnels_casing = new Style ("Style"){
// DEBUG :adding tunnels_casing
protected Rule mRules113 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter111 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol124 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS77 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS77)
//CSS: stroke-width
protected stroke_width mCSS78 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS78)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS79 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS79)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol124);
}
public void LoadCSS(){
Load(mCSS77);
Load(mCSS78);
Load(mCSS79);
}
public void LoadFilters(){
Load(mFilter111);
}
};//Rules end (mRules113)
protected Rule mRules114 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter112 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol125 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS80 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS80)
//CSS: stroke-width
protected stroke_width mCSS81 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS81)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS82 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS82)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol125);
}
public void LoadCSS(){
Load(mCSS80);
Load(mCSS81);
Load(mCSS82);
}
public void LoadFilters(){
Load(mFilter112);
}
};//Rules end (mRules114)
protected Rule mRules115 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter113 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol126 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS83 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS83)
//CSS: stroke-width
protected stroke_width mCSS84 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS84)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS85 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS85)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol126);
}
public void LoadCSS(){
Load(mCSS83);
Load(mCSS84);
Load(mCSS85);
}
public void LoadFilters(){
Load(mFilter113);
}
};//Rules end (mRules115)
protected Rule mRules116 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter114 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol127 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS86 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS86)
//CSS: stroke-width
protected stroke_width mCSS87 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS87)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS88 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS88)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol127);
}
public void LoadCSS(){
Load(mCSS86);
Load(mCSS87);
Load(mCSS88);
}
public void LoadFilters(){
Load(mFilter114);
}
};//Rules end (mRules116)
protected Rule mRules117 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter115 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol128 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS89 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS89)
//CSS: stroke-width
protected stroke_width mCSS90 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS90)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS91 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS91)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol128);
}
public void LoadCSS(){
Load(mCSS89);
Load(mCSS90);
Load(mCSS91);
}
public void LoadFilters(){
Load(mFilter115);
}
};//Rules end (mRules117)
protected Rule mRules118 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter116 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol129 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS92 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS92)
//CSS: stroke-width
protected stroke_width mCSS93 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS93)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS94 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS94)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol129);
}
public void LoadCSS(){
Load(mCSS92);
Load(mCSS93);
Load(mCSS94);
}
public void LoadFilters(){
Load(mFilter116);
}
};//Rules end (mRules118)
protected Rule mRules119 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter117 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol130 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS95 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS95)
//CSS: stroke-width
protected stroke_width mCSS96 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS96)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS97 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS97)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol130);
}
public void LoadCSS(){
Load(mCSS95);
Load(mCSS96);
Load(mCSS97);
}
public void LoadFilters(){
Load(mFilter117);
}
};//Rules end (mRules119)
protected Rule mRules120 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter118 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol131 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS98 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS98)
//CSS: stroke-width
protected stroke_width mCSS99 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS99)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS100 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS100)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol131);
}
public void LoadCSS(){
Load(mCSS98);
Load(mCSS99);
Load(mCSS100);
}
public void LoadFilters(){
Load(mFilter118);
}
};//Rules end (mRules120)
protected Rule mRules121 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter119 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol132 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS101 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS101)
//CSS: stroke-width
protected stroke_width mCSS102 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS102)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS103 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS103)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol132);
}
public void LoadCSS(){
Load(mCSS101);
Load(mCSS102);
Load(mCSS103);
}
public void LoadFilters(){
Load(mFilter119);
}
};//Rules end (mRules121)
protected Rule mRules122 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter120 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol133 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS104 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS104)
//CSS: stroke-width
protected stroke_width mCSS105 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS105)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS106 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS106)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol133);
}
public void LoadCSS(){
Load(mCSS104);
Load(mCSS105);
Load(mCSS106);
}
public void LoadFilters(){
Load(mFilter120);
}
};//Rules end (mRules122)
protected Rule mRules123 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter121 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol134 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS107 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS107)
//CSS: stroke-width
protected stroke_width mCSS108 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS108)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS109 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS109)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol134);
}
public void LoadCSS(){
Load(mCSS107);
Load(mCSS108);
Load(mCSS109);
}
public void LoadFilters(){
Load(mFilter121);
}
};//Rules end (mRules123)
protected Rule mRules124 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter122 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol135 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS110 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS110)
//CSS: stroke-width
protected stroke_width mCSS111 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS111)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS112 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS112)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol135);
}
public void LoadCSS(){
Load(mCSS110);
Load(mCSS111);
Load(mCSS112);
}
public void LoadFilters(){
Load(mFilter122);
}
};//Rules end (mRules124)
protected Rule mRules125 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter123 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol136 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS113 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS113)
//CSS: stroke-width
protected stroke_width mCSS114 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS114)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS115 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS115)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol136);
}
public void LoadCSS(){
Load(mCSS113);
Load(mCSS114);
Load(mCSS115);
}
public void LoadFilters(){
Load(mFilter123);
}
};//Rules end (mRules125)
protected Rule mRules126 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter124 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol137 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS116 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS116)
//CSS: stroke-width
protected stroke_width mCSS117 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS117)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS118 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS118)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol137);
}
public void LoadCSS(){
Load(mCSS116);
Load(mCSS117);
Load(mCSS118);
}
public void LoadFilters(){
Load(mFilter124);
}
};//Rules end (mRules126)
protected Rule mRules127 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter125 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol138 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS119 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS119)
//CSS: stroke-width
protected stroke_width mCSS120 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS120)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS121 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS121)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol138);
}
public void LoadCSS(){
Load(mCSS119);
Load(mCSS120);
Load(mCSS121);
}
public void LoadFilters(){
Load(mFilter125);
}
};//Rules end (mRules127)
protected Rule mRules128 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter126 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol139 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS122 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS122)
//CSS: stroke-width
protected stroke_width mCSS123 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","17");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS123)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS124 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS124)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol139);
}
public void LoadCSS(){
Load(mCSS122);
Load(mCSS123);
Load(mCSS124);
}
public void LoadFilters(){
Load(mFilter126);
}
};//Rules end (mRules128)
protected Rule mRules129 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter127 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol140 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS125 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS125)
//CSS: stroke-width
protected stroke_width mCSS126 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS126)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS127 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS127)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol140);
}
public void LoadCSS(){
Load(mCSS125);
Load(mCSS126);
Load(mCSS127);
}
public void LoadFilters(){
Load(mFilter127);
}
};//Rules end (mRules129)
protected Rule mRules130 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter128 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol141 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS128 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS128)
//CSS: stroke-width
protected stroke_width mCSS129 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS129)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS130 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS130)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol141);
}
public void LoadCSS(){
Load(mCSS128);
Load(mCSS129);
Load(mCSS130);
}
public void LoadFilters(){
Load(mFilter128);
}
};//Rules end (mRules130)
protected Rule mRules131 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter129 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol142 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS131 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS131)
//CSS: stroke-width
protected stroke_width mCSS132 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS132)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS133 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS133)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol142);
}
public void LoadCSS(){
Load(mCSS131);
Load(mCSS132);
Load(mCSS133);
}
public void LoadFilters(){
Load(mFilter129);
}
};//Rules end (mRules131)
protected Rule mRules132 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter130 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol143 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS134 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS134)
//CSS: stroke-width
protected stroke_width mCSS135 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS135)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS136 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS136)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol143);
}
public void LoadCSS(){
Load(mCSS134);
Load(mCSS135);
Load(mCSS136);
}
public void LoadFilters(){
Load(mFilter130);
}
};//Rules end (mRules132)
protected Rule mRules133 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter131 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol144 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS137 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS137)
//CSS: stroke-width
protected stroke_width mCSS138 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS138)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS139 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS139)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol144);
}
public void LoadCSS(){
Load(mCSS137);
Load(mCSS138);
Load(mCSS139);
}
public void LoadFilters(){
Load(mFilter131);
}
};//Rules end (mRules133)
protected Rule mRules134 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter132 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol145 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS140 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS140)
//CSS: stroke-width
protected stroke_width mCSS141 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS141)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS142 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS142)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol145);
}
public void LoadCSS(){
Load(mCSS140);
Load(mCSS141);
Load(mCSS142);
}
public void LoadFilters(){
Load(mFilter132);
}
};//Rules end (mRules134)
protected Rule mRules135 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter133 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol146 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS143 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS143)
//CSS: stroke-width
protected stroke_width mCSS144 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS144)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS145 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS145)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol146);
}
public void LoadCSS(){
Load(mCSS143);
Load(mCSS144);
Load(mCSS145);
}
public void LoadFilters(){
Load(mFilter133);
}
};//Rules end (mRules135)
protected Rule mRules136 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter134 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol147 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS146 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS146)
//CSS: stroke-width
protected stroke_width mCSS147 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS147)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS148 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS148)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol147);
}
public void LoadCSS(){
Load(mCSS146);
Load(mCSS147);
Load(mCSS148);
}
public void LoadFilters(){
Load(mFilter134);
}
};//Rules end (mRules136)
public void LoadRules(){
Load(mRules113);
Load(mRules114);
Load(mRules115);
Load(mRules116);
Load(mRules117);
Load(mRules118);
Load(mRules119);
Load(mRules120);
Load(mRules121);
Load(mRules122);
Load(mRules123);
Load(mRules124);
Load(mRules125);
Load(mRules126);
Load(mRules127);
Load(mRules128);
Load(mRules129);
Load(mRules130);
Load(mRules131);
Load(mRules132);
Load(mRules133);
Load(mRules134);
Load(mRules135);
Load(mRules136);
}
};//tunnels_casing end
protected Style mtunnels_fill = new Style ("Style"){
// DEBUG :adding tunnels_fill
protected Rule mRules137 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter135 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol148 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS149 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#d6dfea");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS149)
//CSS: stroke-width
protected stroke_width mCSS150 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS150)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS151 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS151)
//CSS: stroke-linecap
protected stroke_linecap mCSS152 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS152)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol148);
}
public void LoadCSS(){
Load(mCSS149);
Load(mCSS150);
Load(mCSS151);
Load(mCSS152);
}
public void LoadFilters(){
Load(mFilter135);
}
};//Rules end (mRules137)
protected Rule mRules138 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter136 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol149 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS153 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#d6dfea");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS153)
//CSS: stroke-width
protected stroke_width mCSS154 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS154)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS155 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS155)
//CSS: stroke-linecap
protected stroke_linecap mCSS156 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS156)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol149);
}
public void LoadCSS(){
Load(mCSS153);
Load(mCSS154);
Load(mCSS155);
Load(mCSS156);
}
public void LoadFilters(){
Load(mFilter136);
}
};//Rules end (mRules138)
protected Rule mRules139 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter137 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol150 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS157 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#d6dfea");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS157)
//CSS: stroke-width
protected stroke_width mCSS158 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS158)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS159 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS159)
//CSS: stroke-linecap
protected stroke_linecap mCSS160 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS160)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol150);
}
public void LoadCSS(){
Load(mCSS157);
Load(mCSS158);
Load(mCSS159);
Load(mCSS160);
}
public void LoadFilters(){
Load(mFilter137);
}
};//Rules end (mRules139)
protected Rule mRules140 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter138 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol151 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS161 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#d6dfea");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS161)
//CSS: stroke-width
protected stroke_width mCSS162 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS162)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS163 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS163)
//CSS: stroke-linecap
protected stroke_linecap mCSS164 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS164)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol151);
}
public void LoadCSS(){
Load(mCSS161);
Load(mCSS162);
Load(mCSS163);
Load(mCSS164);
}
public void LoadFilters(){
Load(mFilter138);
}
};//Rules end (mRules140)
protected Rule mRules141 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter139 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol152 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS165 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cdeacd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS165)
//CSS: stroke-width
protected stroke_width mCSS166 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS166)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS167 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS167)
//CSS: stroke-linecap
protected stroke_linecap mCSS168 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS168)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol152);
}
public void LoadCSS(){
Load(mCSS165);
Load(mCSS166);
Load(mCSS167);
Load(mCSS168);
}
public void LoadFilters(){
Load(mFilter139);
}
};//Rules end (mRules141)
protected Rule mRules142 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter140 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol153 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS169 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cdeacd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS169)
//CSS: stroke-width
protected stroke_width mCSS170 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS170)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS171 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS171)
//CSS: stroke-linecap
protected stroke_linecap mCSS172 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS172)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol153);
}
public void LoadCSS(){
Load(mCSS169);
Load(mCSS170);
Load(mCSS171);
Load(mCSS172);
}
public void LoadFilters(){
Load(mFilter140);
}
};//Rules end (mRules142)
protected Rule mRules143 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter141 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol154 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS173 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cdeacd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS173)
//CSS: stroke-width
protected stroke_width mCSS174 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS174)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS175 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS175)
//CSS: stroke-linecap
protected stroke_linecap mCSS176 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS176)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol154);
}
public void LoadCSS(){
Load(mCSS173);
Load(mCSS174);
Load(mCSS175);
Load(mCSS176);
}
public void LoadFilters(){
Load(mFilter141);
}
};//Rules end (mRules143)
protected Rule mRules144 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter142 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol155 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS177 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cdeacd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS177)
//CSS: stroke-width
protected stroke_width mCSS178 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS178)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS179 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS179)
//CSS: stroke-linecap
protected stroke_linecap mCSS180 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS180)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol155);
}
public void LoadCSS(){
Load(mCSS177);
Load(mCSS178);
Load(mCSS179);
Load(mCSS180);
}
public void LoadFilters(){
Load(mFilter142);
}
};//Rules end (mRules144)
protected Rule mRules145 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter143 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol156 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS181 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#f4c3c4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS181)
//CSS: stroke-width
protected stroke_width mCSS182 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS182)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS183 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS183)
//CSS: stroke-linecap
protected stroke_linecap mCSS184 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS184)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol156);
}
public void LoadCSS(){
Load(mCSS181);
Load(mCSS182);
Load(mCSS183);
Load(mCSS184);
}
public void LoadFilters(){
Load(mFilter143);
}
};//Rules end (mRules145)
protected Rule mRules146 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter144 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol157 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS185 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#f4c3c4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS185)
//CSS: stroke-width
protected stroke_width mCSS186 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS186)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS187 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS187)
//CSS: stroke-linecap
protected stroke_linecap mCSS188 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS188)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol157);
}
public void LoadCSS(){
Load(mCSS185);
Load(mCSS186);
Load(mCSS187);
Load(mCSS188);
}
public void LoadFilters(){
Load(mFilter144);
}
};//Rules end (mRules146)
protected Rule mRules147 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter145 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol158 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS189 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#f4c3c4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS189)
//CSS: stroke-width
protected stroke_width mCSS190 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS190)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS191 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS191)
//CSS: stroke-linecap
protected stroke_linecap mCSS192 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS192)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol158);
}
public void LoadCSS(){
Load(mCSS189);
Load(mCSS190);
Load(mCSS191);
Load(mCSS192);
}
public void LoadFilters(){
Load(mFilter145);
}
};//Rules end (mRules147)
protected Rule mRules148 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter146 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol159 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS193 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#f4c3c4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS193)
//CSS: stroke-width
protected stroke_width mCSS194 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS194)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS195 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS195)
//CSS: stroke-linecap
protected stroke_linecap mCSS196 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS196)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol159);
}
public void LoadCSS(){
Load(mCSS193);
Load(mCSS194);
Load(mCSS195);
Load(mCSS196);
}
public void LoadFilters(){
Load(mFilter146);
}
};//Rules end (mRules148)
protected Rule mRules149 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter147 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol160 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS197 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fee0b8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS197)
//CSS: stroke-width
protected stroke_width mCSS198 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS198)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS199 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS199)
//CSS: stroke-linecap
protected stroke_linecap mCSS200 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS200)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol160);
}
public void LoadCSS(){
Load(mCSS197);
Load(mCSS198);
Load(mCSS199);
Load(mCSS200);
}
public void LoadFilters(){
Load(mFilter147);
}
};//Rules end (mRules149)
protected Rule mRules150 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter148 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol161 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS201 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fee0b8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS201)
//CSS: stroke-width
protected stroke_width mCSS202 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS202)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS203 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS203)
//CSS: stroke-linecap
protected stroke_linecap mCSS204 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS204)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol161);
}
public void LoadCSS(){
Load(mCSS201);
Load(mCSS202);
Load(mCSS203);
Load(mCSS204);
}
public void LoadFilters(){
Load(mFilter148);
}
};//Rules end (mRules150)
protected Rule mRules151 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter149 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol162 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS205 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fee0b8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS205)
//CSS: stroke-width
protected stroke_width mCSS206 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS206)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS207 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS207)
//CSS: stroke-linecap
protected stroke_linecap mCSS208 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS208)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol162);
}
public void LoadCSS(){
Load(mCSS205);
Load(mCSS206);
Load(mCSS207);
Load(mCSS208);
}
public void LoadFilters(){
Load(mFilter149);
}
};//Rules end (mRules151)
protected Rule mRules152 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter150 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol163 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS209 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fee0b8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS209)
//CSS: stroke-width
protected stroke_width mCSS210 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS210)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS211 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS211)
//CSS: stroke-linecap
protected stroke_linecap mCSS212 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS212)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol163);
}
public void LoadCSS(){
Load(mCSS209);
Load(mCSS210);
Load(mCSS211);
Load(mCSS212);
}
public void LoadFilters(){
Load(mFilter150);
}
};//Rules end (mRules152)
protected Rule mRules153 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter151 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol164 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS213 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS213)
//CSS: stroke-width
protected stroke_width mCSS214 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS214)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS215 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS215)
//CSS: stroke-linecap
protected stroke_linecap mCSS216 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS216)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol164);
}
public void LoadCSS(){
Load(mCSS213);
Load(mCSS214);
Load(mCSS215);
Load(mCSS216);
}
public void LoadFilters(){
Load(mFilter151);
}
};//Rules end (mRules153)
protected Rule mRules154 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter152 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol165 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS217 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS217)
//CSS: stroke-width
protected stroke_width mCSS218 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS218)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS219 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS219)
//CSS: stroke-linecap
protected stroke_linecap mCSS220 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS220)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol165);
}
public void LoadCSS(){
Load(mCSS217);
Load(mCSS218);
Load(mCSS219);
Load(mCSS220);
}
public void LoadFilters(){
Load(mFilter152);
}
};//Rules end (mRules154)
protected Rule mRules155 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter153 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol166 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS221 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS221)
//CSS: stroke-width
protected stroke_width mCSS222 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS222)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS223 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS223)
//CSS: stroke-linecap
protected stroke_linecap mCSS224 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS224)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol166);
}
public void LoadCSS(){
Load(mCSS221);
Load(mCSS222);
Load(mCSS223);
Load(mCSS224);
}
public void LoadFilters(){
Load(mFilter153);
}
};//Rules end (mRules155)
protected Rule mRules156 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter154 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol167 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS225 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS225)
//CSS: stroke-width
protected stroke_width mCSS226 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS226)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS227 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS227)
//CSS: stroke-linecap
protected stroke_linecap mCSS228 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS228)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol167);
}
public void LoadCSS(){
Load(mCSS225);
Load(mCSS226);
Load(mCSS227);
Load(mCSS228);
}
public void LoadFilters(){
Load(mFilter154);
}
};//Rules end (mRules156)
protected Rule mRules157 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter155 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol168 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS229 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS229)
//CSS: stroke-width
protected stroke_width mCSS230 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS230)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS231 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS231)
//CSS: stroke-linecap
protected stroke_linecap mCSS232 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS232)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol168);
}
public void LoadCSS(){
Load(mCSS229);
Load(mCSS230);
Load(mCSS231);
Load(mCSS232);
}
public void LoadFilters(){
Load(mFilter155);
}
};//Rules end (mRules157)
protected Rule mRules158 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter156 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol169 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS233 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS233)
//CSS: stroke-width
protected stroke_width mCSS234 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS234)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS235 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS235)
//CSS: stroke-linecap
protected stroke_linecap mCSS236 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS236)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol169);
}
public void LoadCSS(){
Load(mCSS233);
Load(mCSS234);
Load(mCSS235);
Load(mCSS236);
}
public void LoadFilters(){
Load(mFilter156);
}
};//Rules end (mRules158)
protected Rule mRules159 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter157 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol170 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS237 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS237)
//CSS: stroke-width
protected stroke_width mCSS238 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS238)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS239 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS239)
//CSS: stroke-linecap
protected stroke_linecap mCSS240 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS240)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol170);
}
public void LoadCSS(){
Load(mCSS237);
Load(mCSS238);
Load(mCSS239);
Load(mCSS240);
}
public void LoadFilters(){
Load(mFilter157);
}
};//Rules end (mRules159)
protected Rule mRules160 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter158 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol171 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS241 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS241)
//CSS: stroke-width
protected stroke_width mCSS242 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS242)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS243 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS243)
//CSS: stroke-linecap
protected stroke_linecap mCSS244 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS244)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol171);
}
public void LoadCSS(){
Load(mCSS241);
Load(mCSS242);
Load(mCSS243);
Load(mCSS244);
}
public void LoadFilters(){
Load(mFilter158);
}
};//Rules end (mRules160)
protected Rule mRules161 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter159 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol172 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS245 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS245)
//CSS: stroke-width
protected stroke_width mCSS246 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS246)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS247 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS247)
//CSS: stroke-linecap
protected stroke_linecap mCSS248 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS248)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol172);
}
public void LoadCSS(){
Load(mCSS245);
Load(mCSS246);
Load(mCSS247);
Load(mCSS248);
}
public void LoadFilters(){
Load(mFilter159);
}
};//Rules end (mRules161)
public void LoadRules(){
Load(mRules137);
Load(mRules138);
Load(mRules139);
Load(mRules140);
Load(mRules141);
Load(mRules142);
Load(mRules143);
Load(mRules144);
Load(mRules145);
Load(mRules146);
Load(mRules147);
Load(mRules148);
Load(mRules149);
Load(mRules150);
Load(mRules151);
Load(mRules152);
Load(mRules153);
Load(mRules154);
Load(mRules155);
Load(mRules156);
Load(mRules157);
Load(mRules158);
Load(mRules159);
Load(mRules160);
Load(mRules161);
}
};//tunnels_fill end
protected Style mminor_roads_casing_links = new Style ("Style"){
// DEBUG :adding minor_roads_casing_links
protected Rule mRules162 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter160 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_raceway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol173 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS249 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","pink");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS249)
//CSS: stroke-width
protected stroke_width mCSS250 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS250)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS251 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS251)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol173);
}
public void LoadCSS(){
Load(mCSS249);
Load(mCSS250);
Load(mCSS251);
}
public void LoadFilters(){
Load(mFilter160);
}
};//Rules end (mRules162)
protected Rule mRules163 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter161 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_raceway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol174 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS252 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","pink");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS252)
//CSS: stroke-width
protected stroke_width mCSS253 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS253)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS254 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS254)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol174);
}
public void LoadCSS(){
Load(mCSS252);
Load(mCSS253);
Load(mCSS254);
}
public void LoadFilters(){
Load(mFilter161);
}
};//Rules end (mRules163)
protected Rule mRules164 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter162 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_raceway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol175 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS255 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","pink");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS255)
//CSS: stroke-width
protected stroke_width mCSS256 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS256)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS257 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS257)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol175);
}
public void LoadCSS(){
Load(mCSS255);
Load(mCSS256);
Load(mCSS257);
}
public void LoadFilters(){
Load(mFilter162);
}
};//Rules end (mRules164)
protected Rule mRules165 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter163 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol176 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS258 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS258)
//CSS: stroke-width
protected stroke_width mCSS259 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS259)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS260 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS260)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol176);
}
public void LoadCSS(){
Load(mCSS258);
Load(mCSS259);
Load(mCSS260);
}
public void LoadFilters(){
Load(mFilter163);
}
};//Rules end (mRules165)
protected Rule mRules166 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter164 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol177 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS261 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS261)
//CSS: stroke-width
protected stroke_width mCSS262 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS262)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS263 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS263)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol177);
}
public void LoadCSS(){
Load(mCSS261);
Load(mCSS262);
Load(mCSS263);
}
public void LoadFilters(){
Load(mFilter164);
}
};//Rules end (mRules166)
protected Rule mRules167 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter165 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol178 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS264 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS264)
//CSS: stroke-width
protected stroke_width mCSS265 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS265)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS266 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS266)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol178);
}
public void LoadCSS(){
Load(mCSS264);
Load(mCSS265);
Load(mCSS266);
}
public void LoadFilters(){
Load(mFilter165);
}
};//Rules end (mRules167)
protected Rule mRules168 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter166 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol179 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS267 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS267)
//CSS: stroke-width
protected stroke_width mCSS268 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS268)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS269 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS269)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol179);
}
public void LoadCSS(){
Load(mCSS267);
Load(mCSS268);
Load(mCSS269);
}
public void LoadFilters(){
Load(mFilter166);
}
};//Rules end (mRules168)
protected Rule mRules169 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter167 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol180 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS270 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS270)
//CSS: stroke-width
protected stroke_width mCSS271 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS271)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS272 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS272)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol180);
}
public void LoadCSS(){
Load(mCSS270);
Load(mCSS271);
Load(mCSS272);
}
public void LoadFilters(){
Load(mFilter167);
}
};//Rules end (mRules169)
protected Rule mRules170 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter168 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol181 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS273 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS273)
//CSS: stroke-width
protected stroke_width mCSS274 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS274)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS275 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS275)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol181);
}
public void LoadCSS(){
Load(mCSS273);
Load(mCSS274);
Load(mCSS275);
}
public void LoadFilters(){
Load(mFilter168);
}
};//Rules end (mRules170)
protected Rule mRules171 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter169 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol182 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS276 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS276)
//CSS: stroke-width
protected stroke_width mCSS277 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS277)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS278 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS278)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol182);
}
public void LoadCSS(){
Load(mCSS276);
Load(mCSS277);
Load(mCSS278);
}
public void LoadFilters(){
Load(mFilter169);
}
};//Rules end (mRules171)
protected Rule mRules172 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter170 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol183 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS279 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS279)
//CSS: stroke-width
protected stroke_width mCSS280 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS280)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS281 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS281)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol183);
}
public void LoadCSS(){
Load(mCSS279);
Load(mCSS280);
Load(mCSS281);
}
public void LoadFilters(){
Load(mFilter170);
}
};//Rules end (mRules172)
protected Rule mRules173 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter171 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol184 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS282 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS282)
//CSS: stroke-width
protected stroke_width mCSS283 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS283)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS284 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS284)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol184);
}
public void LoadCSS(){
Load(mCSS282);
Load(mCSS283);
Load(mCSS284);
}
public void LoadFilters(){
Load(mFilter171);
}
};//Rules end (mRules173)
protected Rule mRules174 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter172 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol185 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS285 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS285)
//CSS: stroke-width
protected stroke_width mCSS286 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS286)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS287 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS287)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol185);
}
public void LoadCSS(){
Load(mCSS285);
Load(mCSS286);
Load(mCSS287);
}
public void LoadFilters(){
Load(mFilter172);
}
};//Rules end (mRules174)
protected Rule mRules175 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter173 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol186 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS288 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS288)
//CSS: stroke-width
protected stroke_width mCSS289 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS289)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS290 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS290)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol186);
}
public void LoadCSS(){
Load(mCSS288);
Load(mCSS289);
Load(mCSS290);
}
public void LoadFilters(){
Load(mFilter173);
}
};//Rules end (mRules175)
protected Rule mRules176 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter174 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol187 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS291 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS291)
//CSS: stroke-width
protected stroke_width mCSS292 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS292)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS293 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS293)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol187);
}
public void LoadCSS(){
Load(mCSS291);
Load(mCSS292);
Load(mCSS293);
}
public void LoadFilters(){
Load(mFilter174);
}
};//Rules end (mRules176)
protected Rule mRules177 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter175 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol188 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS294 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS294)
//CSS: stroke-width
protected stroke_width mCSS295 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS295)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS296 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS296)
//CSS: stroke-linecap
protected stroke_linecap mCSS297 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS297)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol188);
}
public void LoadCSS(){
Load(mCSS294);
Load(mCSS295);
Load(mCSS296);
Load(mCSS297);
}
public void LoadFilters(){
Load(mFilter175);
}
};//Rules end (mRules177)
protected Rule mRules178 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter176 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol189 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS298 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS298)
//CSS: stroke-width
protected stroke_width mCSS299 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS299)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS300 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS300)
//CSS: stroke-linecap
protected stroke_linecap mCSS301 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS301)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol189);
}
public void LoadCSS(){
Load(mCSS298);
Load(mCSS299);
Load(mCSS300);
Load(mCSS301);
}
public void LoadFilters(){
Load(mFilter176);
}
};//Rules end (mRules178)
protected Rule mRules179 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter177 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol190 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS302 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS302)
//CSS: stroke-width
protected stroke_width mCSS303 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS303)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS304 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS304)
//CSS: stroke-linecap
protected stroke_linecap mCSS305 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS305)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol190);
}
public void LoadCSS(){
Load(mCSS302);
Load(mCSS303);
Load(mCSS304);
Load(mCSS305);
}
public void LoadFilters(){
Load(mFilter177);
}
};//Rules end (mRules179)
protected Rule mRules180 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter178 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol191 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS306 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS306)
//CSS: stroke-width
protected stroke_width mCSS307 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS307)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS308 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS308)
//CSS: stroke-linecap
protected stroke_linecap mCSS309 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS309)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol191);
}
public void LoadCSS(){
Load(mCSS306);
Load(mCSS307);
Load(mCSS308);
Load(mCSS309);
}
public void LoadFilters(){
Load(mFilter178);
}
};//Rules end (mRules180)
protected Rule mRules181 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter179 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol192 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS310 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS310)
//CSS: stroke-width
protected stroke_width mCSS311 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS311)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS312 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS312)
//CSS: stroke-linecap
protected stroke_linecap mCSS313 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS313)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol192);
}
public void LoadCSS(){
Load(mCSS310);
Load(mCSS311);
Load(mCSS312);
Load(mCSS313);
}
public void LoadFilters(){
Load(mFilter179);
}
};//Rules end (mRules181)
protected Rule mRules182 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter180 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol193 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS314 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS314)
//CSS: stroke-width
protected stroke_width mCSS315 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS315)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS316 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS316)
//CSS: stroke-linecap
protected stroke_linecap mCSS317 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS317)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol193);
}
public void LoadCSS(){
Load(mCSS314);
Load(mCSS315);
Load(mCSS316);
Load(mCSS317);
}
public void LoadFilters(){
Load(mFilter180);
}
};//Rules end (mRules182)
protected Rule mRules183 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter181 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol194 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS318 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS318)
//CSS: stroke-width
protected stroke_width mCSS319 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS319)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS320 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS320)
//CSS: stroke-linecap
protected stroke_linecap mCSS321 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS321)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol194);
}
public void LoadCSS(){
Load(mCSS318);
Load(mCSS319);
Load(mCSS320);
Load(mCSS321);
}
public void LoadFilters(){
Load(mFilter181);
}
};//Rules end (mRules183)
protected Rule mRules184 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter182 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol195 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS322 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS322)
//CSS: stroke-width
protected stroke_width mCSS323 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS323)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS324 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS324)
//CSS: stroke-linecap
protected stroke_linecap mCSS325 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS325)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol195);
}
public void LoadCSS(){
Load(mCSS322);
Load(mCSS323);
Load(mCSS324);
Load(mCSS325);
}
public void LoadFilters(){
Load(mFilter182);
}
};//Rules end (mRules184)
public void LoadRules(){
Load(mRules162);
Load(mRules163);
Load(mRules164);
Load(mRules165);
Load(mRules166);
Load(mRules167);
Load(mRules168);
Load(mRules169);
Load(mRules170);
Load(mRules171);
Load(mRules172);
Load(mRules173);
Load(mRules174);
Load(mRules175);
Load(mRules176);
Load(mRules177);
Load(mRules178);
Load(mRules179);
Load(mRules180);
Load(mRules181);
Load(mRules182);
Load(mRules183);
Load(mRules184);
}
};//minor_roads_casing_links end
protected Style mminor_roads_casing = new Style ("Style"){
// DEBUG :adding minor_roads_casing
protected Rule mRules185 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter183 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol196 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS326 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS326)
//CSS: stroke-width
protected stroke_width mCSS327 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS327)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS328 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS328)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol196);
}
public void LoadCSS(){
Load(mCSS326);
Load(mCSS327);
Load(mCSS328);
}
public void LoadFilters(){
Load(mFilter183);
}
};//Rules end (mRules185)
protected Rule mRules186 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter184 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol197 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS329 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS329)
//CSS: stroke-width
protected stroke_width mCSS330 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS330)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS331 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS331)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol197);
}
public void LoadCSS(){
Load(mCSS329);
Load(mCSS330);
Load(mCSS331);
}
public void LoadFilters(){
Load(mFilter184);
}
};//Rules end (mRules186)
protected Rule mRules187 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter185 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol198 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS332 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS332)
//CSS: stroke-width
protected stroke_width mCSS333 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS333)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS334 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS334)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol198);
}
public void LoadCSS(){
Load(mCSS332);
Load(mCSS333);
Load(mCSS334);
}
public void LoadFilters(){
Load(mFilter185);
}
};//Rules end (mRules187)
protected Rule mRules188 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter186 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol199 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS335 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS335)
//CSS: stroke-width
protected stroke_width mCSS336 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS336)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS337 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS337)
//CSS: stroke-linecap
protected stroke_linecap mCSS338 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS338)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol199);
}
public void LoadCSS(){
Load(mCSS335);
Load(mCSS336);
Load(mCSS337);
Load(mCSS338);
}
public void LoadFilters(){
Load(mFilter186);
}
};//Rules end (mRules188)
protected Rule mRules189 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter187 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol200 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS339 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS339)
//CSS: stroke-width
protected stroke_width mCSS340 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS340)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS341 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS341)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol200);
}
public void LoadCSS(){
Load(mCSS339);
Load(mCSS340);
Load(mCSS341);
}
public void LoadFilters(){
Load(mFilter187);
}
};//Rules end (mRules189)
protected Rule mRules190 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter188 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol201 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS342 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS342)
//CSS: stroke-width
protected stroke_width mCSS343 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS343)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS344 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS344)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol201);
}
public void LoadCSS(){
Load(mCSS342);
Load(mCSS343);
Load(mCSS344);
}
public void LoadFilters(){
Load(mFilter188);
}
};//Rules end (mRules190)
protected Rule mRules191 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter189 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol202 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS345 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS345)
//CSS: stroke-width
protected stroke_width mCSS346 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS346)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS347 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS347)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol202);
}
public void LoadCSS(){
Load(mCSS345);
Load(mCSS346);
Load(mCSS347);
}
public void LoadFilters(){
Load(mFilter189);
}
};//Rules end (mRules191)
protected Rule mRules192 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter190 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol203 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS348 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS348)
//CSS: stroke-width
protected stroke_width mCSS349 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS349)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS350 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS350)
//CSS: stroke-linecap
protected stroke_linecap mCSS351 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS351)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol203);
}
public void LoadCSS(){
Load(mCSS348);
Load(mCSS349);
Load(mCSS350);
Load(mCSS351);
}
public void LoadFilters(){
Load(mFilter190);
}
};//Rules end (mRules192)
protected Rule mRules193 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter191 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol204 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS352 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS352)
//CSS: stroke-width
protected stroke_width mCSS353 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS353)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS354 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS354)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol204);
}
public void LoadCSS(){
Load(mCSS352);
Load(mCSS353);
Load(mCSS354);
}
public void LoadFilters(){
Load(mFilter191);
}
};//Rules end (mRules193)
protected Rule mRules194 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter192 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol205 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS355 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS355)
//CSS: stroke-width
protected stroke_width mCSS356 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS356)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS357 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS357)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol205);
}
public void LoadCSS(){
Load(mCSS355);
Load(mCSS356);
Load(mCSS357);
}
public void LoadFilters(){
Load(mFilter192);
}
};//Rules end (mRules194)
protected Rule mRules195 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter193 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol206 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS358 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS358)
//CSS: stroke-width
protected stroke_width mCSS359 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS359)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS360 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS360)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol206);
}
public void LoadCSS(){
Load(mCSS358);
Load(mCSS359);
Load(mCSS360);
}
public void LoadFilters(){
Load(mFilter193);
}
};//Rules end (mRules195)
protected Rule mRules196 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter194 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol207 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS361 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS361)
//CSS: stroke-width
protected stroke_width mCSS362 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS362)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS363 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS363)
//CSS: stroke-linecap
protected stroke_linecap mCSS364 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS364)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol207);
}
public void LoadCSS(){
Load(mCSS361);
Load(mCSS362);
Load(mCSS363);
Load(mCSS364);
}
public void LoadFilters(){
Load(mFilter194);
}
};//Rules end (mRules196)
protected Rule mRules197 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter195 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol208 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS365 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS365)
//CSS: stroke-width
protected stroke_width mCSS366 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS366)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS367 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS367)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol208);
}
public void LoadCSS(){
Load(mCSS365);
Load(mCSS366);
Load(mCSS367);
}
public void LoadFilters(){
Load(mFilter195);
}
};//Rules end (mRules197)
protected Rule mRules198 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter196 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol209 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS368 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS368)
//CSS: stroke-width
protected stroke_width mCSS369 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS369)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS370 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS370)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol209);
}
public void LoadCSS(){
Load(mCSS368);
Load(mCSS369);
Load(mCSS370);
}
public void LoadFilters(){
Load(mFilter196);
}
};//Rules end (mRules198)
protected Rule mRules199 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter197 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol210 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS371 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS371)
//CSS: stroke-width
protected stroke_width mCSS372 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS372)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS373 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS373)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol210);
}
public void LoadCSS(){
Load(mCSS371);
Load(mCSS372);
Load(mCSS373);
}
public void LoadFilters(){
Load(mFilter197);
}
};//Rules end (mRules199)
protected Rule mRules200 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter198 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol211 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS374 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a37b48");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS374)
//CSS: stroke-width
protected stroke_width mCSS375 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS375)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS376 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS376)
//CSS: stroke-linecap
protected stroke_linecap mCSS377 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS377)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol211);
}
public void LoadCSS(){
Load(mCSS374);
Load(mCSS375);
Load(mCSS376);
Load(mCSS377);
}
public void LoadFilters(){
Load(mFilter198);
}
};//Rules end (mRules200)
protected Rule mRules201 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter199 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol212 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS378 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS378)
//CSS: stroke-width
protected stroke_width mCSS379 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS379)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS380 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS380)
//CSS: stroke-linecap
protected stroke_linecap mCSS381 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS381)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol212);
}
public void LoadCSS(){
Load(mCSS378);
Load(mCSS379);
Load(mCSS380);
Load(mCSS381);
}
public void LoadFilters(){
Load(mFilter199);
}
};//Rules end (mRules201)
protected Rule mRules202 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter200 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol213 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS382 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS382)
//CSS: stroke-width
protected stroke_width mCSS383 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS383)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS384 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS384)
//CSS: stroke-linecap
protected stroke_linecap mCSS385 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS385)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol213);
}
public void LoadCSS(){
Load(mCSS382);
Load(mCSS383);
Load(mCSS384);
Load(mCSS385);
}
public void LoadFilters(){
Load(mFilter200);
}
};//Rules end (mRules202)
protected Rule mRules203 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter201 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol214 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS386 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS386)
//CSS: stroke-width
protected stroke_width mCSS387 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS387)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS388 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS388)
//CSS: stroke-linecap
protected stroke_linecap mCSS389 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS389)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol214);
}
public void LoadCSS(){
Load(mCSS386);
Load(mCSS387);
Load(mCSS388);
Load(mCSS389);
}
public void LoadFilters(){
Load(mFilter201);
}
};//Rules end (mRules203)
protected Rule mRules204 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter202 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol215 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS390 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS390)
//CSS: stroke-width
protected stroke_width mCSS391 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS391)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS392 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS392)
//CSS: stroke-linecap
protected stroke_linecap mCSS393 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS393)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol215);
}
public void LoadCSS(){
Load(mCSS390);
Load(mCSS391);
Load(mCSS392);
Load(mCSS393);
}
public void LoadFilters(){
Load(mFilter202);
}
};//Rules end (mRules204)
protected Rule mRules205 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter203 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol216 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS394 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS394)
//CSS: stroke-width
protected stroke_width mCSS395 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS395)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS396 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS396)
//CSS: stroke-linecap
protected stroke_linecap mCSS397 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS397)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol216);
}
public void LoadCSS(){
Load(mCSS394);
Load(mCSS395);
Load(mCSS396);
Load(mCSS397);
}
public void LoadFilters(){
Load(mFilter203);
}
};//Rules end (mRules205)
protected Rule mRules206 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter204 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol217 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS398 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS398)
//CSS: stroke-width
protected stroke_width mCSS399 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS399)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS400 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS400)
//CSS: stroke-linecap
protected stroke_linecap mCSS401 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS401)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol217);
}
public void LoadCSS(){
Load(mCSS398);
Load(mCSS399);
Load(mCSS400);
Load(mCSS401);
}
public void LoadFilters(){
Load(mFilter204);
}
};//Rules end (mRules206)
protected Rule mRules207 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter205 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol218 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS402 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS402)
//CSS: stroke-width
protected stroke_width mCSS403 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS403)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS404 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS404)
//CSS: stroke-linecap
protected stroke_linecap mCSS405 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS405)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol218);
}
public void LoadCSS(){
Load(mCSS402);
Load(mCSS403);
Load(mCSS404);
Load(mCSS405);
}
public void LoadFilters(){
Load(mFilter205);
}
};//Rules end (mRules207)
protected Rule mRules208 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter206 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol219 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS406 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS406)
//CSS: stroke-width
protected stroke_width mCSS407 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS407)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS408 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS408)
//CSS: stroke-linecap
protected stroke_linecap mCSS409 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS409)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol219);
}
public void LoadCSS(){
Load(mCSS406);
Load(mCSS407);
Load(mCSS408);
Load(mCSS409);
}
public void LoadFilters(){
Load(mFilter206);
}
};//Rules end (mRules208)
protected Rule mRules209 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter207 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))))),And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol220 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS410 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS410)
//CSS: stroke-width
protected stroke_width mCSS411 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS411)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS412 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS412)
//CSS: stroke-linecap
protected stroke_linecap mCSS413 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS413)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol220);
}
public void LoadCSS(){
Load(mCSS410);
Load(mCSS411);
Load(mCSS412);
Load(mCSS413);
}
public void LoadFilters(){
Load(mFilter207);
}
};//Rules end (mRules209)
protected Rule mRules210 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter208 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol221 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS414 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS414)
//CSS: stroke-width
protected stroke_width mCSS415 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS415)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS416 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS416)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol221);
}
public void LoadCSS(){
Load(mCSS414);
Load(mCSS415);
Load(mCSS416);
}
public void LoadFilters(){
Load(mFilter208);
}
};//Rules end (mRules210)
protected Rule mRules211 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter209 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))))),And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol222 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS417 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS417)
//CSS: stroke-width
protected stroke_width mCSS418 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS418)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS419 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS419)
//CSS: stroke-linecap
protected stroke_linecap mCSS420 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS420)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol222);
}
public void LoadCSS(){
Load(mCSS417);
Load(mCSS418);
Load(mCSS419);
Load(mCSS420);
}
public void LoadFilters(){
Load(mFilter209);
}
};//Rules end (mRules211)
protected Rule mRules212 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter210 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol223 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS421 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS421)
//CSS: stroke-width
protected stroke_width mCSS422 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS422)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS423 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS423)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol223);
}
public void LoadCSS(){
Load(mCSS421);
Load(mCSS422);
Load(mCSS423);
}
public void LoadFilters(){
Load(mFilter210);
}
};//Rules end (mRules212)
protected Rule mRules213 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter211 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol224 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS424 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS424)
//CSS: stroke-width
protected stroke_width mCSS425 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS425)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS426 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS426)
//CSS: stroke-linecap
protected stroke_linecap mCSS427 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS427)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol224);
}
public void LoadCSS(){
Load(mCSS424);
Load(mCSS425);
Load(mCSS426);
Load(mCSS427);
}
public void LoadFilters(){
Load(mFilter211);
}
};//Rules end (mRules213)
protected Rule mRules214 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter212 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol225 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS428 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS428)
//CSS: stroke-width
protected stroke_width mCSS429 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS429)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS430 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS430)
//CSS: stroke-linecap
protected stroke_linecap mCSS431 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS431)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol225);
}
public void LoadCSS(){
Load(mCSS428);
Load(mCSS429);
Load(mCSS430);
Load(mCSS431);
}
public void LoadFilters(){
Load(mFilter212);
}
};//Rules end (mRules214)
protected Rule mRules215 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter213 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol226 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS432 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS432)
//CSS: stroke-width
protected stroke_width mCSS433 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS433)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS434 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS434)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol226);
}
public void LoadCSS(){
Load(mCSS432);
Load(mCSS433);
Load(mCSS434);
}
public void LoadFilters(){
Load(mFilter213);
}
};//Rules end (mRules215)
protected Rule mRules216 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter214 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol227 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS435 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS435)
//CSS: stroke-width
protected stroke_width mCSS436 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS436)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS437 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS437)
//CSS: stroke-linecap
protected stroke_linecap mCSS438 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS438)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol227);
}
public void LoadCSS(){
Load(mCSS435);
Load(mCSS436);
Load(mCSS437);
Load(mCSS438);
}
public void LoadFilters(){
Load(mFilter214);
}
};//Rules end (mRules216)
protected Rule mRules217 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter215 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol228 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS439 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS439)
//CSS: stroke-width
protected stroke_width mCSS440 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS440)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS441 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS441)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol228);
}
public void LoadCSS(){
Load(mCSS439);
Load(mCSS440);
Load(mCSS441);
}
public void LoadFilters(){
Load(mFilter215);
}
};//Rules end (mRules217)
protected Rule mRules218 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter216 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol229 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS442 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS442)
//CSS: stroke-width
protected stroke_width mCSS443 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS443)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS444 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS444)
//CSS: stroke-linecap
protected stroke_linecap mCSS445 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS445)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol229);
}
public void LoadCSS(){
Load(mCSS442);
Load(mCSS443);
Load(mCSS444);
Load(mCSS445);
}
public void LoadFilters(){
Load(mFilter216);
}
};//Rules end (mRules218)
protected Rule mRules219 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter217 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol230 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS446 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS446)
//CSS: stroke-width
protected stroke_width mCSS447 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS447)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS448 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS448)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol230);
}
public void LoadCSS(){
Load(mCSS446);
Load(mCSS447);
Load(mCSS448);
}
public void LoadFilters(){
Load(mFilter217);
}
};//Rules end (mRules219)
protected Rule mRules220 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter218 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol231 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS449 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS449)
//CSS: stroke-width
protected stroke_width mCSS450 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS450)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS451 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS451)
//CSS: stroke-linecap
protected stroke_linecap mCSS452 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS452)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol231);
}
public void LoadCSS(){
Load(mCSS449);
Load(mCSS450);
Load(mCSS451);
Load(mCSS452);
}
public void LoadFilters(){
Load(mFilter218);
}
};//Rules end (mRules220)
protected Rule mRules221 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter219 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol232 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS453 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS453)
//CSS: stroke-width
protected stroke_width mCSS454 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS454)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS455 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS455)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol232);
}
public void LoadCSS(){
Load(mCSS453);
Load(mCSS454);
Load(mCSS455);
}
public void LoadFilters(){
Load(mFilter219);
}
};//Rules end (mRules221)
protected Rule mRules222 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter220 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol233 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS456 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS456)
//CSS: stroke-width
protected stroke_width mCSS457 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS457)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS458 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS458)
//CSS: stroke-linecap
protected stroke_linecap mCSS459 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS459)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol233);
}
public void LoadCSS(){
Load(mCSS456);
Load(mCSS457);
Load(mCSS458);
Load(mCSS459);
}
public void LoadFilters(){
Load(mFilter220);
}
};//Rules end (mRules222)
protected Rule mRules223 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter221 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol234 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS460 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS460)
//CSS: stroke-width
protected stroke_width mCSS461 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS461)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS462 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS462)
//CSS: stroke-linecap
protected stroke_linecap mCSS463 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS463)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol234);
}
public void LoadCSS(){
Load(mCSS460);
Load(mCSS461);
Load(mCSS462);
Load(mCSS463);
}
public void LoadFilters(){
Load(mFilter221);
}
};//Rules end (mRules223)
protected Rule mRules224 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter222 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol235 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS464 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS464)
//CSS: stroke-width
protected stroke_width mCSS465 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS465)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS466 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS466)
//CSS: stroke-linecap
protected stroke_linecap mCSS467 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS467)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol235);
}
public void LoadCSS(){
Load(mCSS464);
Load(mCSS465);
Load(mCSS466);
Load(mCSS467);
}
public void LoadFilters(){
Load(mFilter222);
}
};//Rules end (mRules224)
protected Rule mRules225 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter223 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol236 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS468 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS468)
//CSS: stroke-width
protected stroke_width mCSS469 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS469)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS470 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS470)
//CSS: stroke-linecap
protected stroke_linecap mCSS471 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS471)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol236);
}
public void LoadCSS(){
Load(mCSS468);
Load(mCSS469);
Load(mCSS470);
Load(mCSS471);
}
public void LoadFilters(){
Load(mFilter223);
}
};//Rules end (mRules225)
protected Rule mRules226 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter224 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol237 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS472 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS472)
//CSS: stroke-width
protected stroke_width mCSS473 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS473)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS474 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS474)
//CSS: stroke-linecap
protected stroke_linecap mCSS475 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS475)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol237);
}
public void LoadCSS(){
Load(mCSS472);
Load(mCSS473);
Load(mCSS474);
Load(mCSS475);
}
public void LoadFilters(){
Load(mFilter224);
}
};//Rules end (mRules226)
public void LoadRules(){
Load(mRules185);
Load(mRules186);
Load(mRules187);
Load(mRules188);
Load(mRules189);
Load(mRules190);
Load(mRules191);
Load(mRules192);
Load(mRules193);
Load(mRules194);
Load(mRules195);
Load(mRules196);
Load(mRules197);
Load(mRules198);
Load(mRules199);
Load(mRules200);
Load(mRules201);
Load(mRules202);
Load(mRules203);
Load(mRules204);
Load(mRules205);
Load(mRules206);
Load(mRules207);
Load(mRules208);
Load(mRules209);
Load(mRules210);
Load(mRules211);
Load(mRules212);
Load(mRules213);
Load(mRules214);
Load(mRules215);
Load(mRules216);
Load(mRules217);
Load(mRules218);
Load(mRules219);
Load(mRules220);
Load(mRules221);
Load(mRules222);
Load(mRules223);
Load(mRules224);
Load(mRules225);
Load(mRules226);
}
};//minor_roads_casing end
protected Style mminor_roads_fill_links = new Style ("Style"){
// DEBUG :adding minor_roads_fill_links
protected Rule mRules227 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter225 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol238 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS476 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS476)
//CSS: stroke-width
protected stroke_width mCSS477 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS477)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol238);
}
public void LoadCSS(){
Load(mCSS476);
Load(mCSS477);
}
public void LoadFilters(){
Load(mFilter225);
}
};//Rules end (mRules227)
protected Rule mRules228 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter226 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol239 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS478 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS478)
//CSS: stroke-width
protected stroke_width mCSS479 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS479)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS480 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS480)
//CSS: stroke-linecap
protected stroke_linecap mCSS481 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS481)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol239);
}
public void LoadCSS(){
Load(mCSS478);
Load(mCSS479);
Load(mCSS480);
Load(mCSS481);
}
public void LoadFilters(){
Load(mFilter226);
}
};//Rules end (mRules228)
protected Rule mRules229 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter227 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol240 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS482 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS482)
//CSS: stroke-width
protected stroke_width mCSS483 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS483)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS484 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS484)
//CSS: stroke-linecap
protected stroke_linecap mCSS485 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS485)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol240);
}
public void LoadCSS(){
Load(mCSS482);
Load(mCSS483);
Load(mCSS484);
Load(mCSS485);
}
public void LoadFilters(){
Load(mFilter227);
}
};//Rules end (mRules229)
protected Rule mRules230 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter228 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol241 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS486 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS486)
//CSS: stroke-width
protected stroke_width mCSS487 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS487)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS488 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS488)
//CSS: stroke-linecap
protected stroke_linecap mCSS489 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS489)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol241);
}
public void LoadCSS(){
Load(mCSS486);
Load(mCSS487);
Load(mCSS488);
Load(mCSS489);
}
public void LoadFilters(){
Load(mFilter228);
}
};//Rules end (mRules230)
protected Rule mRules231 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter229 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol242 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS490 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS490)
//CSS: stroke-width
protected stroke_width mCSS491 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS491)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS492 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS492)
//CSS: stroke-linecap
protected stroke_linecap mCSS493 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS493)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol242);
}
public void LoadCSS(){
Load(mCSS490);
Load(mCSS491);
Load(mCSS492);
Load(mCSS493);
}
public void LoadFilters(){
Load(mFilter229);
}
};//Rules end (mRules231)
protected Rule mRules232 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter230 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol243 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS494 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS494)
//CSS: stroke-width
protected stroke_width mCSS495 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS495)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS496 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS496)
//CSS: stroke-linecap
protected stroke_linecap mCSS497 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS497)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol243);
}
public void LoadCSS(){
Load(mCSS494);
Load(mCSS495);
Load(mCSS496);
Load(mCSS497);
}
public void LoadFilters(){
Load(mFilter230);
}
};//Rules end (mRules232)
protected Rule mRules233 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter231 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol244 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS498 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS498)
//CSS: stroke-width
protected stroke_width mCSS499 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS499)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS500 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS500)
//CSS: stroke-linecap
protected stroke_linecap mCSS501 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS501)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol244);
}
public void LoadCSS(){
Load(mCSS498);
Load(mCSS499);
Load(mCSS500);
Load(mCSS501);
}
public void LoadFilters(){
Load(mFilter231);
}
};//Rules end (mRules233)
protected Rule mRules234 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter232 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol245 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS502 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS502)
//CSS: stroke-width
protected stroke_width mCSS503 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","15.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS503)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS504 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS504)
//CSS: stroke-linecap
protected stroke_linecap mCSS505 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS505)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol245);
}
public void LoadCSS(){
Load(mCSS502);
Load(mCSS503);
Load(mCSS504);
Load(mCSS505);
}
public void LoadFilters(){
Load(mFilter232);
}
};//Rules end (mRules234)
protected Rule mRules235 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter233 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol246 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS506 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS506)
//CSS: stroke-width
protected stroke_width mCSS507 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS507)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS508 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS508)
//CSS: stroke-linecap
protected stroke_linecap mCSS509 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS509)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol246);
}
public void LoadCSS(){
Load(mCSS506);
Load(mCSS507);
Load(mCSS508);
Load(mCSS509);
}
public void LoadFilters(){
Load(mFilter233);
}
};//Rules end (mRules235)
protected Rule mRules236 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter234 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol247 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS510 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS510)
//CSS: stroke-width
protected stroke_width mCSS511 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS511)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS512 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS512)
//CSS: stroke-linecap
protected stroke_linecap mCSS513 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS513)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol247);
}
public void LoadCSS(){
Load(mCSS510);
Load(mCSS511);
Load(mCSS512);
Load(mCSS513);
}
public void LoadFilters(){
Load(mFilter234);
}
};//Rules end (mRules236)
protected Rule mRules237 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter235 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol248 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS514 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS514)
//CSS: stroke-width
protected stroke_width mCSS515 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS515)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS516 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS516)
//CSS: stroke-linecap
protected stroke_linecap mCSS517 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS517)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol248);
}
public void LoadCSS(){
Load(mCSS514);
Load(mCSS515);
Load(mCSS516);
Load(mCSS517);
}
public void LoadFilters(){
Load(mFilter235);
}
};//Rules end (mRules237)
protected Rule mRules238 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter236 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol249 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS518 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS518)
//CSS: stroke-width
protected stroke_width mCSS519 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","15.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS519)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS520 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS520)
//CSS: stroke-linecap
protected stroke_linecap mCSS521 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS521)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol249);
}
public void LoadCSS(){
Load(mCSS518);
Load(mCSS519);
Load(mCSS520);
Load(mCSS521);
}
public void LoadFilters(){
Load(mFilter236);
}
};//Rules end (mRules238)
protected Rule mRules239 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter237 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol250 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS522 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS522)
//CSS: stroke-width
protected stroke_width mCSS523 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS523)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS524 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS524)
//CSS: stroke-linecap
protected stroke_linecap mCSS525 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS525)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol250);
}
public void LoadCSS(){
Load(mCSS522);
Load(mCSS523);
Load(mCSS524);
Load(mCSS525);
}
public void LoadFilters(){
Load(mFilter237);
}
};//Rules end (mRules239)
protected Rule mRules240 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter238 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol251 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS526 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS526)
//CSS: stroke-width
protected stroke_width mCSS527 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS527)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS528 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS528)
//CSS: stroke-linecap
protected stroke_linecap mCSS529 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS529)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol251);
}
public void LoadCSS(){
Load(mCSS526);
Load(mCSS527);
Load(mCSS528);
Load(mCSS529);
}
public void LoadFilters(){
Load(mFilter238);
}
};//Rules end (mRules240)
protected Rule mRules241 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter239 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol252 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS530 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS530)
//CSS: stroke-width
protected stroke_width mCSS531 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS531)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS532 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS532)
//CSS: stroke-linecap
protected stroke_linecap mCSS533 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS533)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol252);
}
public void LoadCSS(){
Load(mCSS530);
Load(mCSS531);
Load(mCSS532);
Load(mCSS533);
}
public void LoadFilters(){
Load(mFilter239);
}
};//Rules end (mRules241)
protected Rule mRules242 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter240 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol253 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS534 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS534)
//CSS: stroke-width
protected stroke_width mCSS535 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","15.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS535)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS536 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS536)
//CSS: stroke-linecap
protected stroke_linecap mCSS537 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS537)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol253);
}
public void LoadCSS(){
Load(mCSS534);
Load(mCSS535);
Load(mCSS536);
Load(mCSS537);
}
public void LoadFilters(){
Load(mFilter240);
}
};//Rules end (mRules242)
protected Rule mRules243 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter241 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol254 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS538 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS538)
//CSS: stroke-width
protected stroke_width mCSS539 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS539)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS540 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS540)
//CSS: stroke-linecap
protected stroke_linecap mCSS541 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS541)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol254);
}
public void LoadCSS(){
Load(mCSS538);
Load(mCSS539);
Load(mCSS540);
Load(mCSS541);
}
public void LoadFilters(){
Load(mFilter241);
}
};//Rules end (mRules243)
protected Rule mRules244 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter242 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol255 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS542 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS542)
//CSS: stroke-width
protected stroke_width mCSS543 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS543)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS544 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS544)
//CSS: stroke-linecap
protected stroke_linecap mCSS545 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS545)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol255);
}
public void LoadCSS(){
Load(mCSS542);
Load(mCSS543);
Load(mCSS544);
Load(mCSS545);
}
public void LoadFilters(){
Load(mFilter242);
}
};//Rules end (mRules244)
protected Rule mRules245 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter243 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol256 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS546 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS546)
//CSS: stroke-width
protected stroke_width mCSS547 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS547)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS548 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS548)
//CSS: stroke-linecap
protected stroke_linecap mCSS549 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS549)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol256);
}
public void LoadCSS(){
Load(mCSS546);
Load(mCSS547);
Load(mCSS548);
Load(mCSS549);
}
public void LoadFilters(){
Load(mFilter243);
}
};//Rules end (mRules245)
protected Rule mRules246 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter244 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol257 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS550 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS550)
//CSS: stroke-width
protected stroke_width mCSS551 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS551)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS552 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS552)
//CSS: stroke-linecap
protected stroke_linecap mCSS553 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS553)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol257);
}
public void LoadCSS(){
Load(mCSS550);
Load(mCSS551);
Load(mCSS552);
Load(mCSS553);
}
public void LoadFilters(){
Load(mFilter244);
}
};//Rules end (mRules246)
public void LoadRules(){
Load(mRules227);
Load(mRules228);
Load(mRules229);
Load(mRules230);
Load(mRules231);
Load(mRules232);
Load(mRules233);
Load(mRules234);
Load(mRules235);
Load(mRules236);
Load(mRules237);
Load(mRules238);
Load(mRules239);
Load(mRules240);
Load(mRules241);
Load(mRules242);
Load(mRules243);
Load(mRules244);
Load(mRules245);
Load(mRules246);
}
};//minor_roads_fill_links end
protected Style mminor_roads_fill = new Style ("Style"){
// DEBUG :adding minor_roads_fill
protected Rule mRules247 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter245 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol258 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS554 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#9cc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS554)
//CSS: stroke-width
protected stroke_width mCSS555 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS555)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol259 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS556 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS556)
//CSS: stroke-width
protected stroke_width mCSS557 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS557)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS558 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS558)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol258);
Load(mSymbol259);
}
public void LoadCSS(){
Load(mCSS554);
Load(mCSS555);
Load(mCSS556);
Load(mCSS557);
Load(mCSS558);
}
public void LoadFilters(){
Load(mFilter245);
}
};//Rules end (mRules247)
protected Rule mRules248 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter246 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol260 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS559 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS559)
//CSS: stroke-width
protected stroke_width mCSS560 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS560)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol261 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS561 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS561)
//CSS: stroke-width
protected stroke_width mCSS562 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS562)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS563 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS563)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol260);
Load(mSymbol261);
}
public void LoadCSS(){
Load(mCSS559);
Load(mCSS560);
Load(mCSS561);
Load(mCSS562);
Load(mCSS563);
}
public void LoadFilters(){
Load(mFilter246);
}
};//Rules end (mRules248)
protected Rule mRules249 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter247 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol262 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS564 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS564)
//CSS: stroke-width
protected stroke_width mCSS565 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS565)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol263 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS566 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS566)
//CSS: stroke-width
protected stroke_width mCSS567 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS567)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS568 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS568)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol262);
Load(mSymbol263);
}
public void LoadCSS(){
Load(mCSS564);
Load(mCSS565);
Load(mCSS566);
Load(mCSS567);
Load(mCSS568);
}
public void LoadFilters(){
Load(mFilter247);
}
};//Rules end (mRules249)
protected Rule mRules250 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter248 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol264 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS569 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS569)
//CSS: stroke-width
protected stroke_width mCSS570 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS570)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol265 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS571 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS571)
//CSS: stroke-width
protected stroke_width mCSS572 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS572)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS573 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS573)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol264);
Load(mSymbol265);
}
public void LoadCSS(){
Load(mCSS569);
Load(mCSS570);
Load(mCSS571);
Load(mCSS572);
Load(mCSS573);
}
public void LoadFilters(){
Load(mFilter248);
}
};//Rules end (mRules250)
protected Rule mRules251 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter249 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol266 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS574 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS574)
//CSS: stroke-width
protected stroke_width mCSS575 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS575)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol267 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS576 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS576)
//CSS: stroke-width
protected stroke_width mCSS577 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS577)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS578 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS578)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol266);
Load(mSymbol267);
}
public void LoadCSS(){
Load(mCSS574);
Load(mCSS575);
Load(mCSS576);
Load(mCSS577);
Load(mCSS578);
}
public void LoadFilters(){
Load(mFilter249);
}
};//Rules end (mRules251)
protected Rule mRules252 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter250 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol268 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS579 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#9cc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS579)
//CSS: stroke-width
protected stroke_width mCSS580 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS580)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol269 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS581 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS581)
//CSS: stroke-width
protected stroke_width mCSS582 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS582)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS583 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS583)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol268);
Load(mSymbol269);
}
public void LoadCSS(){
Load(mCSS579);
Load(mCSS580);
Load(mCSS581);
Load(mCSS582);
Load(mCSS583);
}
public void LoadFilters(){
Load(mFilter250);
}
};//Rules end (mRules252)
protected Rule mRules253 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter251 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol270 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS584 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS584)
//CSS: stroke-width
protected stroke_width mCSS585 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS585)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol271 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS586 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS586)
//CSS: stroke-width
protected stroke_width mCSS587 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS587)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS588 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS588)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol270);
Load(mSymbol271);
}
public void LoadCSS(){
Load(mCSS584);
Load(mCSS585);
Load(mCSS586);
Load(mCSS587);
Load(mCSS588);
}
public void LoadFilters(){
Load(mFilter251);
}
};//Rules end (mRules253)
protected Rule mRules254 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter252 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol272 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS589 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS589)
//CSS: stroke-width
protected stroke_width mCSS590 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS590)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol273 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS591 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS591)
//CSS: stroke-width
protected stroke_width mCSS592 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS592)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS593 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS593)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol272);
Load(mSymbol273);
}
public void LoadCSS(){
Load(mCSS589);
Load(mCSS590);
Load(mCSS591);
Load(mCSS592);
Load(mCSS593);
}
public void LoadFilters(){
Load(mFilter252);
}
};//Rules end (mRules254)
protected Rule mRules255 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter253 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol274 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS594 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS594)
//CSS: stroke-width
protected stroke_width mCSS595 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS595)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol275 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS596 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS596)
//CSS: stroke-width
protected stroke_width mCSS597 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS597)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS598 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS598)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol274);
Load(mSymbol275);
}
public void LoadCSS(){
Load(mCSS594);
Load(mCSS595);
Load(mCSS596);
Load(mCSS597);
Load(mCSS598);
}
public void LoadFilters(){
Load(mFilter253);
}
};//Rules end (mRules255)
protected Rule mRules256 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter254 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol276 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS599 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS599)
//CSS: stroke-width
protected stroke_width mCSS600 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS600)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol277 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS601 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS601)
//CSS: stroke-width
protected stroke_width mCSS602 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS602)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS603 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS603)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol276);
Load(mSymbol277);
}
public void LoadCSS(){
Load(mCSS599);
Load(mCSS600);
Load(mCSS601);
Load(mCSS602);
Load(mCSS603);
}
public void LoadFilters(){
Load(mFilter254);
}
};//Rules end (mRules256)
protected Rule mRules257 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter255 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol278 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS604 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS604)
//CSS: stroke-width
protected stroke_width mCSS605 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS605)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol279 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS606 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS606)
//CSS: stroke-width
protected stroke_width mCSS607 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS607)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS608 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS608)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol278);
Load(mSymbol279);
}
public void LoadCSS(){
Load(mCSS604);
Load(mCSS605);
Load(mCSS606);
Load(mCSS607);
Load(mCSS608);
}
public void LoadFilters(){
Load(mFilter255);
}
};//Rules end (mRules257)
protected Rule mRules258 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter256 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_living_street)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_residential)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol280 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS609 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS609)
//CSS: stroke-width
protected stroke_width mCSS610 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS610)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol281 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS611 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS611)
//CSS: stroke-width
protected stroke_width mCSS612 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS612)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS613 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS613)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol280);
Load(mSymbol281);
}
public void LoadCSS(){
Load(mCSS609);
Load(mCSS610);
Load(mCSS611);
Load(mCSS612);
Load(mCSS613);
}
public void LoadFilters(){
Load(mFilter256);
}
};//Rules end (mRules258)
protected Rule mRules259 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter257 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol282 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS614 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#9cc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS614)
//CSS: stroke-width
protected stroke_width mCSS615 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS615)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol283 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS616 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS616)
//CSS: stroke-width
protected stroke_width mCSS617 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS617)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS618 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS618)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol282);
Load(mSymbol283);
}
public void LoadCSS(){
Load(mCSS614);
Load(mCSS615);
Load(mCSS616);
Load(mCSS617);
Load(mCSS618);
}
public void LoadFilters(){
Load(mFilter257);
}
};//Rules end (mRules259)
protected Rule mRules260 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter258 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol284 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS619 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS619)
//CSS: stroke-width
protected stroke_width mCSS620 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS620)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol285 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS621 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS621)
//CSS: stroke-width
protected stroke_width mCSS622 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS622)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS623 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS623)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol284);
Load(mSymbol285);
}
public void LoadCSS(){
Load(mCSS619);
Load(mCSS620);
Load(mCSS621);
Load(mCSS622);
Load(mCSS623);
}
public void LoadFilters(){
Load(mFilter258);
}
};//Rules end (mRules260)
protected Rule mRules261 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter259 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol286 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS624 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS624)
//CSS: stroke-width
protected stroke_width mCSS625 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS625)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol287 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS626 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS626)
//CSS: stroke-width
protected stroke_width mCSS627 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS627)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS628 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS628)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol286);
Load(mSymbol287);
}
public void LoadCSS(){
Load(mCSS624);
Load(mCSS625);
Load(mCSS626);
Load(mCSS627);
Load(mCSS628);
}
public void LoadFilters(){
Load(mFilter259);
}
};//Rules end (mRules261)
protected Rule mRules262 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter260 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol288 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS629 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS629)
//CSS: stroke-width
protected stroke_width mCSS630 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS630)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol289 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS631 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS631)
//CSS: stroke-width
protected stroke_width mCSS632 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS632)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS633 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS633)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol288);
Load(mSymbol289);
}
public void LoadCSS(){
Load(mCSS629);
Load(mCSS630);
Load(mCSS631);
Load(mCSS632);
Load(mCSS633);
}
public void LoadFilters(){
Load(mFilter260);
}
};//Rules end (mRules262)
protected Rule mRules263 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter261 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol290 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS634 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS634)
//CSS: stroke-width
protected stroke_width mCSS635 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS635)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol291 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS636 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS636)
//CSS: stroke-width
protected stroke_width mCSS637 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS637)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS638 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS638)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol290);
Load(mSymbol291);
}
public void LoadCSS(){
Load(mCSS634);
Load(mCSS635);
Load(mCSS636);
Load(mCSS637);
Load(mCSS638);
}
public void LoadFilters(){
Load(mFilter261);
}
};//Rules end (mRules263)
protected Rule mRules264 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter262 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol292 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS639 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS639)
//CSS: stroke-width
protected stroke_width mCSS640 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS640)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol293 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS641 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS641)
//CSS: stroke-width
protected stroke_width mCSS642 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS642)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS643 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS643)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol292);
Load(mSymbol293);
}
public void LoadCSS(){
Load(mCSS639);
Load(mCSS640);
Load(mCSS641);
Load(mCSS642);
Load(mCSS643);
}
public void LoadFilters(){
Load(mFilter262);
}
};//Rules end (mRules264)
protected Rule mRules265 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter263 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_living_street)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_residential)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol294 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS644 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS644)
//CSS: stroke-width
protected stroke_width mCSS645 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS645)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol295 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS646 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS646)
//CSS: stroke-width
protected stroke_width mCSS647 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS647)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS648 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS648)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol294);
Load(mSymbol295);
}
public void LoadCSS(){
Load(mCSS644);
Load(mCSS645);
Load(mCSS646);
Load(mCSS647);
Load(mCSS648);
}
public void LoadFilters(){
Load(mFilter263);
}
};//Rules end (mRules265)
protected Rule mRules266 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter264 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol296 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS649 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS649)
//CSS: stroke-width
protected stroke_width mCSS650 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS650)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol296);
}
public void LoadCSS(){
Load(mCSS649);
Load(mCSS650);
}
public void LoadFilters(){
Load(mFilter264);
}
};//Rules end (mRules266)
protected Rule mRules267 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter265 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol297 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS651 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS651)
//CSS: stroke-width
protected stroke_width mCSS652 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS652)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS653 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS653)
//CSS: stroke-linecap
protected stroke_linecap mCSS654 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS654)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol297);
}
public void LoadCSS(){
Load(mCSS651);
Load(mCSS652);
Load(mCSS653);
Load(mCSS654);
}
public void LoadFilters(){
Load(mFilter265);
}
};//Rules end (mRules267)
protected Rule mRules268 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter266 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol298 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS655 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS655)
//CSS: stroke-width
protected stroke_width mCSS656 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS656)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS657 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS657)
//CSS: stroke-linecap
protected stroke_linecap mCSS658 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS658)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol298);
}
public void LoadCSS(){
Load(mCSS655);
Load(mCSS656);
Load(mCSS657);
Load(mCSS658);
}
public void LoadFilters(){
Load(mFilter266);
}
};//Rules end (mRules268)
protected Rule mRules269 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter267 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol299 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS659 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS659)
//CSS: stroke-width
protected stroke_width mCSS660 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS660)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS661 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS661)
//CSS: stroke-linecap
protected stroke_linecap mCSS662 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS662)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol299);
}
public void LoadCSS(){
Load(mCSS659);
Load(mCSS660);
Load(mCSS661);
Load(mCSS662);
}
public void LoadFilters(){
Load(mFilter267);
}
};//Rules end (mRules269)
protected Rule mRules270 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter268 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol300 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS663 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS663)
//CSS: stroke-width
protected stroke_width mCSS664 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS664)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS665 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS665)
//CSS: stroke-linecap
protected stroke_linecap mCSS666 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS666)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol300);
}
public void LoadCSS(){
Load(mCSS663);
Load(mCSS664);
Load(mCSS665);
Load(mCSS666);
}
public void LoadFilters(){
Load(mFilter268);
}
};//Rules end (mRules270)
protected Rule mRules271 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter269 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol301 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS667 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS667)
//CSS: stroke-width
protected stroke_width mCSS668 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS668)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS669 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS669)
//CSS: stroke-linecap
protected stroke_linecap mCSS670 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS670)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol301);
}
public void LoadCSS(){
Load(mCSS667);
Load(mCSS668);
Load(mCSS669);
Load(mCSS670);
}
public void LoadFilters(){
Load(mFilter269);
}
};//Rules end (mRules271)
protected Rule mRules272 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter270 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol302 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS671 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS671)
//CSS: stroke-width
protected stroke_width mCSS672 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS672)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS673 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS673)
//CSS: stroke-linecap
protected stroke_linecap mCSS674 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS674)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol302);
}
public void LoadCSS(){
Load(mCSS671);
Load(mCSS672);
Load(mCSS673);
Load(mCSS674);
}
public void LoadFilters(){
Load(mFilter270);
}
};//Rules end (mRules272)
protected Rule mRules273 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter271 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol303 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS675 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS675)
//CSS: stroke-width
protected stroke_width mCSS676 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","15.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS676)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS677 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS677)
//CSS: stroke-linecap
protected stroke_linecap mCSS678 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS678)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol303);
}
public void LoadCSS(){
Load(mCSS675);
Load(mCSS676);
Load(mCSS677);
Load(mCSS678);
}
public void LoadFilters(){
Load(mFilter271);
}
};//Rules end (mRules273)
protected Rule mRules274 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter272 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol304 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS679 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS679)
//CSS: stroke-width
protected stroke_width mCSS680 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS680)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS681 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS681)
//CSS: stroke-linecap
protected stroke_linecap mCSS682 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS682)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol304);
}
public void LoadCSS(){
Load(mCSS679);
Load(mCSS680);
Load(mCSS681);
Load(mCSS682);
}
public void LoadFilters(){
Load(mFilter272);
}
};//Rules end (mRules274)
protected Rule mRules275 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter273 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol305 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS683 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS683)
//CSS: stroke-width
protected stroke_width mCSS684 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS684)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS685 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS685)
//CSS: stroke-linecap
protected stroke_linecap mCSS686 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS686)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol305);
}
public void LoadCSS(){
Load(mCSS683);
Load(mCSS684);
Load(mCSS685);
Load(mCSS686);
}
public void LoadFilters(){
Load(mFilter273);
}
};//Rules end (mRules275)
protected Rule mRules276 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter274 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol306 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS687 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS687)
//CSS: stroke-width
protected stroke_width mCSS688 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS688)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS689 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS689)
//CSS: stroke-linecap
protected stroke_linecap mCSS690 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS690)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol306);
}
public void LoadCSS(){
Load(mCSS687);
Load(mCSS688);
Load(mCSS689);
Load(mCSS690);
}
public void LoadFilters(){
Load(mFilter274);
}
};//Rules end (mRules276)
protected Rule mRules277 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter275 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol307 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS691 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS691)
//CSS: stroke-width
protected stroke_width mCSS692 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","15.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS692)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS693 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS693)
//CSS: stroke-linecap
protected stroke_linecap mCSS694 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS694)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol307);
}
public void LoadCSS(){
Load(mCSS691);
Load(mCSS692);
Load(mCSS693);
Load(mCSS694);
}
public void LoadFilters(){
Load(mFilter275);
}
};//Rules end (mRules277)
protected Rule mRules278 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter276 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol308 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS695 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS695)
//CSS: stroke-width
protected stroke_width mCSS696 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS696)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS697 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS697)
//CSS: stroke-linecap
protected stroke_linecap mCSS698 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS698)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol308);
}
public void LoadCSS(){
Load(mCSS695);
Load(mCSS696);
Load(mCSS697);
Load(mCSS698);
}
public void LoadFilters(){
Load(mFilter276);
}
};//Rules end (mRules278)
protected Rule mRules279 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter277 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol309 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS699 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS699)
//CSS: stroke-width
protected stroke_width mCSS700 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS700)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS701 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS701)
//CSS: stroke-linecap
protected stroke_linecap mCSS702 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS702)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol309);
}
public void LoadCSS(){
Load(mCSS699);
Load(mCSS700);
Load(mCSS701);
Load(mCSS702);
}
public void LoadFilters(){
Load(mFilter277);
}
};//Rules end (mRules279)
protected Rule mRules280 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter278 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol310 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS703 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS703)
//CSS: stroke-width
protected stroke_width mCSS704 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS704)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS705 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS705)
//CSS: stroke-linecap
protected stroke_linecap mCSS706 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS706)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol310);
}
public void LoadCSS(){
Load(mCSS703);
Load(mCSS704);
Load(mCSS705);
Load(mCSS706);
}
public void LoadFilters(){
Load(mFilter278);
}
};//Rules end (mRules280)
protected Rule mRules281 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter279 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol311 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS707 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS707)
//CSS: stroke-width
protected stroke_width mCSS708 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","15.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS708)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS709 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS709)
//CSS: stroke-linecap
protected stroke_linecap mCSS710 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS710)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol311);
}
public void LoadCSS(){
Load(mCSS707);
Load(mCSS708);
Load(mCSS709);
Load(mCSS710);
}
public void LoadFilters(){
Load(mFilter279);
}
};//Rules end (mRules281)
protected Rule mRules282 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter280 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol312 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS711 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS711)
//CSS: stroke-width
protected stroke_width mCSS712 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS712)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS713 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS713)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS714 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS714)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol313 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS715 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fdfdfd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS715)
//CSS: stroke-width
protected stroke_width mCSS716 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS716)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS717 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS717)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS718 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,1,1,8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS718)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol314 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS719 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ececec");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS719)
//CSS: stroke-width
protected stroke_width mCSS720 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS720)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS721 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS721)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS722 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,2,1,7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS722)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol315 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS723 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cacaca");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS723)
//CSS: stroke-width
protected stroke_width mCSS724 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS724)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS725 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS725)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS726 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,3,1,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS726)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol316 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS727 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#afafaf");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS727)
//CSS: stroke-width
protected stroke_width mCSS728 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS728)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS729 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS729)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS730 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,4,1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS730)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol317 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS731 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a1a1a1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS731)
//CSS: stroke-width
protected stroke_width mCSS732 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS732)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS733 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS733)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS734 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,5,1,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS734)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol318 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS735 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#9b9b9b");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS735)
//CSS: stroke-width
protected stroke_width mCSS736 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS736)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS737 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS737)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS738 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,6,1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS738)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol312);
Load(mSymbol313);
Load(mSymbol314);
Load(mSymbol315);
Load(mSymbol316);
Load(mSymbol317);
Load(mSymbol318);
}
public void LoadCSS(){
Load(mCSS711);
Load(mCSS712);
Load(mCSS713);
Load(mCSS714);
Load(mCSS715);
Load(mCSS716);
Load(mCSS717);
Load(mCSS718);
Load(mCSS719);
Load(mCSS720);
Load(mCSS721);
Load(mCSS722);
Load(mCSS723);
Load(mCSS724);
Load(mCSS725);
Load(mCSS726);
Load(mCSS727);
Load(mCSS728);
Load(mCSS729);
Load(mCSS730);
Load(mCSS731);
Load(mCSS732);
Load(mCSS733);
Load(mCSS734);
Load(mCSS735);
Load(mCSS736);
Load(mCSS737);
Load(mCSS738);
}
public void LoadFilters(){
Load(mFilter280);
}
};//Rules end (mRules282)
protected Rule mRules283 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter281 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_abandoned)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_disused))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol319 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS739 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS739)
//CSS: stroke-width
protected stroke_width mCSS740 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS740)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS741 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS741)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS742 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","2,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS742)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol319);
}
public void LoadCSS(){
Load(mCSS739);
Load(mCSS740);
Load(mCSS741);
Load(mCSS742);
}
public void LoadFilters(){
Load(mFilter281);
}
};//Rules end (mRules283)
protected Rule mRules284 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter282 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_abandoned)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_disused))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol320 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS743 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS743)
//CSS: stroke-width
protected stroke_width mCSS744 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS744)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol321 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS745 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS745)
//CSS: stroke-width
protected stroke_width mCSS746 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS746)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS747 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS747)
//CSS: stroke-linecap
protected stroke_linecap mCSS748 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS748)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol322 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS749 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS749)
//CSS: stroke-width
protected stroke_width mCSS750 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS750)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS751 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS751)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS752 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","2,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS752)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol320);
Load(mSymbol321);
Load(mSymbol322);
}
public void LoadCSS(){
Load(mCSS743);
Load(mCSS744);
Load(mCSS745);
Load(mCSS746);
Load(mCSS747);
Load(mCSS748);
Load(mCSS749);
Load(mCSS750);
Load(mCSS751);
Load(mCSS752);
}
public void LoadFilters(){
Load(mFilter282);
}
};//Rules end (mRules284)
protected Rule mRules285 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter283 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol323 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS753 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS753)
//CSS: stroke-width
protected stroke_width mCSS754 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS754)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS755 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS755)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol324 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS756 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS756)
//CSS: stroke-width
protected stroke_width mCSS757 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS757)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS758 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS758)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS759 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS759)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol323);
Load(mSymbol324);
}
public void LoadCSS(){
Load(mCSS753);
Load(mCSS754);
Load(mCSS755);
Load(mCSS756);
Load(mCSS757);
Load(mCSS758);
Load(mCSS759);
}
public void LoadFilters(){
Load(mFilter283);
}
};//Rules end (mRules285)
protected Rule mRules286 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter284 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol325 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS760 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS760)
//CSS: stroke-width
protected stroke_width mCSS761 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS761)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS762 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS762)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol326 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS763 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS763)
//CSS: stroke-width
protected stroke_width mCSS764 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS764)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS765 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS765)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol325);
Load(mSymbol326);
}
public void LoadCSS(){
Load(mCSS760);
Load(mCSS761);
Load(mCSS762);
Load(mCSS763);
Load(mCSS764);
Load(mCSS765);
}
public void LoadFilters(){
Load(mFilter284);
}
};//Rules end (mRules286)
protected Rule mRules287 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter285 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol327 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS766 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS766)
//CSS: stroke-width
protected stroke_width mCSS767 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS767)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS768 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS768)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol328 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS769 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS769)
//CSS: stroke-width
protected stroke_width mCSS770 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS770)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS771 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS771)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS772 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,11,8,1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS772)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol327);
Load(mSymbol328);
}
public void LoadCSS(){
Load(mCSS766);
Load(mCSS767);
Load(mCSS768);
Load(mCSS769);
Load(mCSS770);
Load(mCSS771);
Load(mCSS772);
}
public void LoadFilters(){
Load(mFilter285);
}
};//Rules end (mRules287)
protected Rule mRules288 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter286 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getrailway()))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol329 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS773 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS773)
//CSS: stroke-width
protected stroke_width mCSS774 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS774)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS775 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS775)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol330 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS776 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS776)
//CSS: stroke-width
protected stroke_width mCSS777 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS777)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS778 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS778)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol329);
Load(mSymbol330);
}
public void LoadCSS(){
Load(mCSS773);
Load(mCSS774);
Load(mCSS775);
Load(mCSS776);
Load(mCSS777);
Load(mCSS778);
}
public void LoadFilters(){
Load(mFilter286);
}
};//Rules end (mRules288)
protected Rule mRules289 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter287 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getrailway()))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol331 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS779 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS779)
//CSS: stroke-width
protected stroke_width mCSS780 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS780)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS781 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS781)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol332 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS782 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS782)
//CSS: stroke-width
protected stroke_width mCSS783 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS783)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS784 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS784)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS785 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,8,11,1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS785)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol331);
Load(mSymbol332);
}
public void LoadCSS(){
Load(mCSS779);
Load(mCSS780);
Load(mCSS781);
Load(mCSS782);
Load(mCSS783);
Load(mCSS784);
Load(mCSS785);
}
public void LoadFilters(){
Load(mFilter287);
}
};//Rules end (mRules289)
protected Rule mRules290 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter288 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol333 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS786 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS786)
//CSS: stroke-width
protected stroke_width mCSS787 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS787)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS788 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS788)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS789 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS789)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol334 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS790 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fdfdfd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS790)
//CSS: stroke-width
protected stroke_width mCSS791 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS791)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS792 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS792)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS793 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,1,1,8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS793)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol335 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS794 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ececec");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS794)
//CSS: stroke-width
protected stroke_width mCSS795 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS795)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS796 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS796)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS797 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,2,1,7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS797)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol336 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS798 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cacaca");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS798)
//CSS: stroke-width
protected stroke_width mCSS799 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS799)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS800 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS800)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS801 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,3,1,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS801)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol337 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS802 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#afafaf");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS802)
//CSS: stroke-width
protected stroke_width mCSS803 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS803)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS804 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS804)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS805 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,4,1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS805)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol338 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS806 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a1a1a1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS806)
//CSS: stroke-width
protected stroke_width mCSS807 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS807)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS808 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS808)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS809 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,5,1,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS809)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol339 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS810 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#9b9b9b");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS810)
//CSS: stroke-width
protected stroke_width mCSS811 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS811)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS812 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS812)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS813 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,6,1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS813)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol333);
Load(mSymbol334);
Load(mSymbol335);
Load(mSymbol336);
Load(mSymbol337);
Load(mSymbol338);
Load(mSymbol339);
}
public void LoadCSS(){
Load(mCSS786);
Load(mCSS787);
Load(mCSS788);
Load(mCSS789);
Load(mCSS790);
Load(mCSS791);
Load(mCSS792);
Load(mCSS793);
Load(mCSS794);
Load(mCSS795);
Load(mCSS796);
Load(mCSS797);
Load(mCSS798);
Load(mCSS799);
Load(mCSS800);
Load(mCSS801);
Load(mCSS802);
Load(mCSS803);
Load(mCSS804);
Load(mCSS805);
Load(mCSS806);
Load(mCSS807);
Load(mCSS808);
Load(mCSS809);
Load(mCSS810);
Load(mCSS811);
Load(mCSS812);
Load(mCSS813);
}
public void LoadFilters(){
Load(mFilter288);
}
};//Rules end (mRules290)
protected Rule mRules291 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter289 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol340 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS814 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS814)
//CSS: stroke-width
protected stroke_width mCSS815 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS815)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol340);
}
public void LoadCSS(){
Load(mCSS814);
Load(mCSS815);
}
public void LoadFilters(){
Load(mFilter289);
}
};//Rules end (mRules291)
protected Rule mRules292 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter290 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol341 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS816 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS816)
//CSS: stroke-width
protected stroke_width mCSS817 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS817)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS818 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS818)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol342 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS819 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS819)
//CSS: stroke-width
protected stroke_width mCSS820 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS820)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol343 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS821 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS821)
//CSS: stroke-width
protected stroke_width mCSS822 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS822)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol341);
Load(mSymbol342);
Load(mSymbol343);
}
public void LoadCSS(){
Load(mCSS816);
Load(mCSS817);
Load(mCSS818);
Load(mCSS819);
Load(mCSS820);
Load(mCSS821);
Load(mCSS822);
}
public void LoadFilters(){
Load(mFilter290);
}
};//Rules end (mRules292)
protected Rule mRules293 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter291 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol344 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS823 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#444");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS823)
//CSS: stroke-width
protected stroke_width mCSS824 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS824)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS825 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS825)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol344);
}
public void LoadCSS(){
Load(mCSS823);
Load(mCSS824);
Load(mCSS825);
}
public void LoadFilters(){
Load(mFilter291);
}
};//Rules end (mRules293)
protected Rule mRules294 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter292 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol345 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS826 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#444");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS826)
//CSS: stroke-width
protected stroke_width mCSS827 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS827)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS828 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS828)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol345);
}
public void LoadCSS(){
Load(mCSS826);
Load(mCSS827);
Load(mCSS828);
}
public void LoadFilters(){
Load(mFilter292);
}
};//Rules end (mRules294)
protected Rule mRules295 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter293 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol346 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS829 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS829)
//CSS: stroke-width
protected stroke_width mCSS830 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS830)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS831 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS831)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol346);
}
public void LoadCSS(){
Load(mCSS829);
Load(mCSS830);
Load(mCSS831);
}
public void LoadFilters(){
Load(mFilter293);
}
};//Rules end (mRules295)
protected Rule mRules296 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter294 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol347 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS832 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS832)
//CSS: stroke-width
protected stroke_width mCSS833 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS833)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol347);
}
public void LoadCSS(){
Load(mCSS832);
Load(mCSS833);
}
public void LoadFilters(){
Load(mFilter294);
}
};//Rules end (mRules296)
protected Rule mRules297 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter295 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_subway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol348 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS834 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS834)
//CSS: stroke-width
protected stroke_width mCSS835 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS835)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS836 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS836)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol348);
}
public void LoadCSS(){
Load(mCSS834);
Load(mCSS835);
Load(mCSS836);
}
public void LoadFilters(){
Load(mFilter295);
}
};//Rules end (mRules297)
protected Rule mRules298 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter296 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_subway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol349 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS837 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS837)
//CSS: stroke-width
protected stroke_width mCSS838 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS838)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol349);
}
public void LoadCSS(){
Load(mCSS837);
Load(mCSS838);
}
public void LoadFilters(){
Load(mFilter296);
}
};//Rules end (mRules298)
protected Rule mRules299 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter297 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol350 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS839 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS839)
//CSS: stroke-width
protected stroke_width mCSS840 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS840)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol350);
}
public void LoadCSS(){
Load(mCSS839);
Load(mCSS840);
}
public void LoadFilters(){
Load(mFilter297);
}
};//Rules end (mRules299)
protected Rule mRules300 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter298 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol351 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS841 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS841)
//CSS: stroke-width
protected stroke_width mCSS842 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS842)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS843 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS843)
//CSS: stroke-linecap
protected stroke_linecap mCSS844 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS844)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol351);
}
public void LoadCSS(){
Load(mCSS841);
Load(mCSS842);
Load(mCSS843);
Load(mCSS844);
}
public void LoadFilters(){
Load(mFilter298);
}
};//Rules end (mRules300)
protected Rule mRules301 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter299 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol352 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS845 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS845)
//CSS: stroke-width
protected stroke_width mCSS846 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS846)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS847 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS847)
//CSS: stroke-linecap
protected stroke_linecap mCSS848 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS848)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol352);
}
public void LoadCSS(){
Load(mCSS845);
Load(mCSS846);
Load(mCSS847);
Load(mCSS848);
}
public void LoadFilters(){
Load(mFilter299);
}
};//Rules end (mRules301)
protected Rule mRules302 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter300 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol353 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS849 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS849)
//CSS: stroke-width
protected stroke_width mCSS850 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS850)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS851 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS851)
//CSS: stroke-linecap
protected stroke_linecap mCSS852 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS852)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol353);
}
public void LoadCSS(){
Load(mCSS849);
Load(mCSS850);
Load(mCSS851);
Load(mCSS852);
}
public void LoadFilters(){
Load(mFilter300);
}
};//Rules end (mRules302)
protected Rule mRules303 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter301 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol354 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS853 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS853)
//CSS: stroke-width
protected stroke_width mCSS854 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS854)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS855 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS855)
//CSS: stroke-linecap
protected stroke_linecap mCSS856 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS856)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol354);
}
public void LoadCSS(){
Load(mCSS853);
Load(mCSS854);
Load(mCSS855);
Load(mCSS856);
}
public void LoadFilters(){
Load(mFilter301);
}
};//Rules end (mRules303)
protected Rule mRules304 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter302 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol355 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS857 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS857)
//CSS: stroke-width
protected stroke_width mCSS858 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS858)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS859 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS859)
//CSS: stroke-linecap
protected stroke_linecap mCSS860 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS860)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol355);
}
public void LoadCSS(){
Load(mCSS857);
Load(mCSS858);
Load(mCSS859);
Load(mCSS860);
}
public void LoadFilters(){
Load(mFilter302);
}
};//Rules end (mRules304)
protected Rule mRules305 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter303 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol356 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS861 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS861)
//CSS: stroke-width
protected stroke_width mCSS862 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS862)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS863 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS863)
//CSS: stroke-linecap
protected stroke_linecap mCSS864 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS864)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol356);
}
public void LoadCSS(){
Load(mCSS861);
Load(mCSS862);
Load(mCSS863);
Load(mCSS864);
}
public void LoadFilters(){
Load(mFilter303);
}
};//Rules end (mRules305)
protected Rule mRules306 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter304 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol357 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS865 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS865)
//CSS: stroke-width
protected stroke_width mCSS866 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS866)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS867 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS867)
//CSS: stroke-linecap
protected stroke_linecap mCSS868 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS868)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol357);
}
public void LoadCSS(){
Load(mCSS865);
Load(mCSS866);
Load(mCSS867);
Load(mCSS868);
}
public void LoadFilters(){
Load(mFilter304);
}
};//Rules end (mRules306)
protected Rule mRules307 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter305 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol358 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS869 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS869)
//CSS: stroke-width
protected stroke_width mCSS870 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS870)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS871 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS871)
//CSS: stroke-linecap
protected stroke_linecap mCSS872 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS872)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol358);
}
public void LoadCSS(){
Load(mCSS869);
Load(mCSS870);
Load(mCSS871);
Load(mCSS872);
}
public void LoadFilters(){
Load(mFilter305);
}
};//Rules end (mRules307)
protected Rule mRules308 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter306 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol359 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS873 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS873)
//CSS: stroke-width
protected stroke_width mCSS874 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS874)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS875 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS875)
//CSS: stroke-linecap
protected stroke_linecap mCSS876 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS876)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol359);
}
public void LoadCSS(){
Load(mCSS873);
Load(mCSS874);
Load(mCSS875);
Load(mCSS876);
}
public void LoadFilters(){
Load(mFilter306);
}
};//Rules end (mRules308)
protected Rule mRules309 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter307 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol360 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS877 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS877)
//CSS: stroke-width
protected stroke_width mCSS878 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS878)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS879 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS879)
//CSS: stroke-linecap
protected stroke_linecap mCSS880 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS880)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol360);
}
public void LoadCSS(){
Load(mCSS877);
Load(mCSS878);
Load(mCSS879);
Load(mCSS880);
}
public void LoadFilters(){
Load(mFilter307);
}
};//Rules end (mRules309)
protected Rule mRules310 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter308 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol361 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS881 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS881)
//CSS: stroke-width
protected stroke_width mCSS882 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS882)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS883 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS883)
//CSS: stroke-linecap
protected stroke_linecap mCSS884 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS884)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol361);
}
public void LoadCSS(){
Load(mCSS881);
Load(mCSS882);
Load(mCSS883);
Load(mCSS884);
}
public void LoadFilters(){
Load(mFilter308);
}
};//Rules end (mRules310)
protected Rule mRules311 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter309 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol362 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS885 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS885)
//CSS: stroke-width
protected stroke_width mCSS886 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS886)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS887 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS887)
//CSS: stroke-linecap
protected stroke_linecap mCSS888 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS888)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol362);
}
public void LoadCSS(){
Load(mCSS885);
Load(mCSS886);
Load(mCSS887);
Load(mCSS888);
}
public void LoadFilters(){
Load(mFilter309);
}
};//Rules end (mRules311)
protected Rule mRules312 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter310 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol363 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS889 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS889)
//CSS: stroke-width
protected stroke_width mCSS890 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS890)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS891 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS891)
//CSS: stroke-linecap
protected stroke_linecap mCSS892 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS892)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol363);
}
public void LoadCSS(){
Load(mCSS889);
Load(mCSS890);
Load(mCSS891);
Load(mCSS892);
}
public void LoadFilters(){
Load(mFilter310);
}
};//Rules end (mRules312)
protected Rule mRules313 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter311 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol364 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS893 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS893)
//CSS: stroke-width
protected stroke_width mCSS894 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS894)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS895 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS895)
//CSS: stroke-linecap
protected stroke_linecap mCSS896 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS896)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol364);
}
public void LoadCSS(){
Load(mCSS893);
Load(mCSS894);
Load(mCSS895);
Load(mCSS896);
}
public void LoadFilters(){
Load(mFilter311);
}
};//Rules end (mRules313)
protected Rule mRules314 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter312 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol365 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS897 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS897)
//CSS: stroke-width
protected stroke_width mCSS898 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS898)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS899 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS899)
//CSS: stroke-linecap
protected stroke_linecap mCSS900 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS900)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol365);
}
public void LoadCSS(){
Load(mCSS897);
Load(mCSS898);
Load(mCSS899);
Load(mCSS900);
}
public void LoadFilters(){
Load(mFilter312);
}
};//Rules end (mRules314)
protected Rule mRules315 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter313 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol366 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS901 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS901)
//CSS: stroke-width
protected stroke_width mCSS902 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS902)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS903 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS903)
//CSS: stroke-linecap
protected stroke_linecap mCSS904 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS904)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol366);
}
public void LoadCSS(){
Load(mCSS901);
Load(mCSS902);
Load(mCSS903);
Load(mCSS904);
}
public void LoadFilters(){
Load(mFilter313);
}
};//Rules end (mRules315)
protected Rule mRules316 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter314 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol367 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS905 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS905)
//CSS: stroke-width
protected stroke_width mCSS906 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS906)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS907 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS907)
//CSS: stroke-linecap
protected stroke_linecap mCSS908 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS908)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol367);
}
public void LoadCSS(){
Load(mCSS905);
Load(mCSS906);
Load(mCSS907);
Load(mCSS908);
}
public void LoadFilters(){
Load(mFilter314);
}
};//Rules end (mRules316)
protected Rule mRules317 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter315 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol368 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS909 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS909)
//CSS: stroke-width
protected stroke_width mCSS910 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS910)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS911 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS911)
//CSS: stroke-linecap
protected stroke_linecap mCSS912 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS912)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol368);
}
public void LoadCSS(){
Load(mCSS909);
Load(mCSS910);
Load(mCSS911);
Load(mCSS912);
}
public void LoadFilters(){
Load(mFilter315);
}
};//Rules end (mRules317)
protected Rule mRules318 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter316 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol369 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS913 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS913)
//CSS: stroke-width
protected stroke_width mCSS914 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","13");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS914)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS915 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS915)
//CSS: stroke-linecap
protected stroke_linecap mCSS916 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS916)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol369);
}
public void LoadCSS(){
Load(mCSS913);
Load(mCSS914);
Load(mCSS915);
Load(mCSS916);
}
public void LoadFilters(){
Load(mFilter316);
}
};//Rules end (mRules318)
protected Rule mRules319 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter317 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol370 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS917 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbbbbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS917)
//CSS: stroke-width
protected stroke_width mCSS918 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS918)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol370);
}
public void LoadCSS(){
Load(mCSS917);
Load(mCSS918);
}
public void LoadFilters(){
Load(mFilter317);
}
};//Rules end (mRules319)
protected Rule mRules320 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter318 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol371 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS919 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS919)
//CSS: stroke-width
protected stroke_width mCSS920 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS920)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol371);
}
public void LoadCSS(){
Load(mCSS919);
Load(mCSS920);
}
public void LoadFilters(){
Load(mFilter318);
}
};//Rules end (mRules320)
protected Rule mRules321 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter319 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol372 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS921 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS921)
//CSS: stroke-width
protected stroke_width mCSS922 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS922)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS923 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS923)
//CSS: stroke-linecap
protected stroke_linecap mCSS924 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS924)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol372);
}
public void LoadCSS(){
Load(mCSS921);
Load(mCSS922);
Load(mCSS923);
Load(mCSS924);
}
public void LoadFilters(){
Load(mFilter319);
}
};//Rules end (mRules321)
protected Rule mRules322 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter320 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol373 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS925 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS925)
//CSS: stroke-width
protected stroke_width mCSS926 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS926)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS927 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS927)
//CSS: stroke-linecap
protected stroke_linecap mCSS928 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS928)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol373);
}
public void LoadCSS(){
Load(mCSS925);
Load(mCSS926);
Load(mCSS927);
Load(mCSS928);
}
public void LoadFilters(){
Load(mFilter320);
}
};//Rules end (mRules322)
protected Rule mRules323 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter321 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol374 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS929 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS929)
//CSS: stroke-width
protected stroke_width mCSS930 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS930)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS931 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS931)
//CSS: stroke-linecap
protected stroke_linecap mCSS932 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS932)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol374);
}
public void LoadCSS(){
Load(mCSS929);
Load(mCSS930);
Load(mCSS931);
Load(mCSS932);
}
public void LoadFilters(){
Load(mFilter321);
}
};//Rules end (mRules323)
protected Rule mRules324 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter322 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol375 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS933 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS933)
//CSS: stroke-width
protected stroke_width mCSS934 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS934)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS935 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS935)
//CSS: stroke-linecap
protected stroke_linecap mCSS936 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS936)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol375);
}
public void LoadCSS(){
Load(mCSS933);
Load(mCSS934);
Load(mCSS935);
Load(mCSS936);
}
public void LoadFilters(){
Load(mFilter322);
}
};//Rules end (mRules324)
protected Rule mRules325 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter323 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol376 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS937 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS937)
//CSS: stroke-width
protected stroke_width mCSS938 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS938)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS939 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS939)
//CSS: stroke-linecap
protected stroke_linecap mCSS940 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS940)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol376);
}
public void LoadCSS(){
Load(mCSS937);
Load(mCSS938);
Load(mCSS939);
Load(mCSS940);
}
public void LoadFilters(){
Load(mFilter323);
}
};//Rules end (mRules325)
protected Rule mRules326 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter324 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol377 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS941 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS941)
//CSS: stroke-width
protected stroke_width mCSS942 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS942)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS943 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS943)
//CSS: stroke-linecap
protected stroke_linecap mCSS944 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS944)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol377);
}
public void LoadCSS(){
Load(mCSS941);
Load(mCSS942);
Load(mCSS943);
Load(mCSS944);
}
public void LoadFilters(){
Load(mFilter324);
}
};//Rules end (mRules326)
protected Rule mRules327 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter325 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_platform)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_platform))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol378 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS945 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS945)
//CSS: stroke-width
protected stroke_width mCSS946 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS946)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS947 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS947)
//CSS: stroke-linecap
protected stroke_linecap mCSS948 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS948)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol378);
}
public void LoadCSS(){
Load(mCSS945);
Load(mCSS946);
Load(mCSS947);
Load(mCSS948);
}
public void LoadFilters(){
Load(mFilter325);
}
};//Rules end (mRules327)
protected Rule mRules328 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter326 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_steps))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol379 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS949 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","salmon");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS949)
//CSS: stroke-width
protected stroke_width mCSS950 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS950)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS951 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","2,1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS951)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol379);
}
public void LoadCSS(){
Load(mCSS949);
Load(mCSS950);
Load(mCSS951);
}
public void LoadFilters(){
Load(mFilter326);
}
};//Rules end (mRules328)
protected Rule mRules329 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter327 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_bridleway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol380 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS952 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS952)
//CSS: stroke-width
protected stroke_width mCSS953 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS953)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS954 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS954)
//CSS: stroke-linecap
protected stroke_linecap mCSS955 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS955)
//CSS: stroke-opacity
protected stroke_opacity mCSS956 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS956)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol381 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS957 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS957)
//CSS: stroke-width
protected stroke_width mCSS958 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS958)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS959 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS959)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol380);
Load(mSymbol381);
}
public void LoadCSS(){
Load(mCSS952);
Load(mCSS953);
Load(mCSS954);
Load(mCSS955);
Load(mCSS956);
Load(mCSS957);
Load(mCSS958);
Load(mCSS959);
}
public void LoadFilters(){
Load(mFilter327);
}
};//Rules end (mRules329)
protected Rule mRules330 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter328 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol382 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS960 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS960)
//CSS: stroke-width
protected stroke_width mCSS961 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS961)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS962 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS962)
//CSS: stroke-linecap
protected stroke_linecap mCSS963 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS963)
//CSS: stroke-opacity
protected stroke_opacity mCSS964 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS964)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol383 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS965 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","salmon");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS965)
//CSS: stroke-width
protected stroke_width mCSS966 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS966)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS967 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS967)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS968 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS968)
//CSS: stroke-linecap
protected stroke_linecap mCSS969 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS969)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol382);
Load(mSymbol383);
}
public void LoadCSS(){
Load(mCSS960);
Load(mCSS961);
Load(mCSS962);
Load(mCSS963);
Load(mCSS964);
Load(mCSS965);
Load(mCSS966);
Load(mCSS967);
Load(mCSS968);
Load(mCSS969);
}
public void LoadFilters(){
Load(mFilter328);
}
};//Rules end (mRules330)
protected Rule mRules331 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter329 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol384 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS970 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS970)
//CSS: stroke-width
protected stroke_width mCSS971 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS971)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS972 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS972)
//CSS: stroke-linecap
protected stroke_linecap mCSS973 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS973)
//CSS: stroke-opacity
protected stroke_opacity mCSS974 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS974)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol385 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS975 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS975)
//CSS: stroke-width
protected stroke_width mCSS976 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS976)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS977 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS977)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS978 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS978)
//CSS: stroke-linecap
protected stroke_linecap mCSS979 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS979)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol384);
Load(mSymbol385);
}
public void LoadCSS(){
Load(mCSS970);
Load(mCSS971);
Load(mCSS972);
Load(mCSS973);
Load(mCSS974);
Load(mCSS975);
Load(mCSS976);
Load(mCSS977);
Load(mCSS978);
Load(mCSS979);
}
public void LoadFilters(){
Load(mFilter329);
}
};//Rules end (mRules331)
protected Rule mRules332 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter330 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_platform)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_platform))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol386 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS980 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbbbbb");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS980)
//CSS: stroke-width
protected stroke_width mCSS981 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS981)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS982 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS982)
//CSS: stroke-linecap
protected stroke_linecap mCSS983 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS983)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol386);
}
public void LoadCSS(){
Load(mCSS980);
Load(mCSS981);
Load(mCSS982);
Load(mCSS983);
}
public void LoadFilters(){
Load(mFilter330);
}
};//Rules end (mRules332)
protected Rule mRules333 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter331 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_steps))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol387 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS984 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS984)
//CSS: stroke-width
protected stroke_width mCSS985 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS985)
//CSS: stroke-opacity
protected stroke_opacity mCSS986 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS986)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol388 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS987 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","salmon");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS987)
//CSS: stroke-width
protected stroke_width mCSS988 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS988)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS989 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS989)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS990 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS990)
//CSS: stroke-linecap
protected stroke_linecap mCSS991 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS991)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol387);
Load(mSymbol388);
}
public void LoadCSS(){
Load(mCSS984);
Load(mCSS985);
Load(mCSS986);
Load(mCSS987);
Load(mCSS988);
Load(mCSS989);
Load(mCSS990);
Load(mCSS991);
}
public void LoadFilters(){
Load(mFilter331);
}
};//Rules end (mRules333)
protected Rule mRules334 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter332 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_cycleway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol389 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS992 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS992)
//CSS: stroke-width
protected stroke_width mCSS993 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS993)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS994 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS994)
//CSS: stroke-linecap
protected stroke_linecap mCSS995 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS995)
//CSS: stroke-opacity
protected stroke_opacity mCSS996 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS996)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol390 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS997 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","blue");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS997)
//CSS: stroke-width
protected stroke_width mCSS998 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS998)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS999 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS999)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1000 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1000)
//CSS: stroke-linecap
protected stroke_linecap mCSS1001 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1001)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol389);
Load(mSymbol390);
}
public void LoadCSS(){
Load(mCSS992);
Load(mCSS993);
Load(mCSS994);
Load(mCSS995);
Load(mCSS996);
Load(mCSS997);
Load(mCSS998);
Load(mCSS999);
Load(mCSS1000);
Load(mCSS1001);
}
public void LoadFilters(){
Load(mFilter332);
}
};//Rules end (mRules334)
protected Rule mRules335 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter333 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_byway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol391 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1002 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1002)
//CSS: stroke-width
protected stroke_width mCSS1003 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1003)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1004 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1004)
//CSS: stroke-linecap
protected stroke_linecap mCSS1005 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1005)
//CSS: stroke-opacity
protected stroke_opacity mCSS1006 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1006)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol392 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1007 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffcc00");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1007)
//CSS: stroke-width
protected stroke_width mCSS1008 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1008)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1009 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1009)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1010 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1010)
//CSS: stroke-linecap
protected stroke_linecap mCSS1011 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1011)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol391);
Load(mSymbol392);
}
public void LoadCSS(){
Load(mCSS1002);
Load(mCSS1003);
Load(mCSS1004);
Load(mCSS1005);
Load(mCSS1006);
Load(mCSS1007);
Load(mCSS1008);
Load(mCSS1009);
Load(mCSS1010);
Load(mCSS1011);
}
public void LoadFilters(){
Load(mFilter333);
}
};//Rules end (mRules335)
protected Rule mRules336 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter334 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_track))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol393 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1012 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1012)
//CSS: stroke-width
protected stroke_width mCSS1013 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1013)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1014 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1014)
//CSS: stroke-linecap
protected stroke_linecap mCSS1015 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1015)
//CSS: stroke-opacity
protected stroke_opacity mCSS1016 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1016)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol394 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1017 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1017)
//CSS: stroke-width
protected stroke_width mCSS1018 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1018)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1019 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1019)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1020 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1020)
//CSS: stroke-linecap
protected stroke_linecap mCSS1021 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1021)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol393);
Load(mSymbol394);
}
public void LoadCSS(){
Load(mCSS1012);
Load(mCSS1013);
Load(mCSS1014);
Load(mCSS1015);
Load(mCSS1016);
Load(mCSS1017);
Load(mCSS1018);
Load(mCSS1019);
Load(mCSS1020);
Load(mCSS1021);
}
public void LoadFilters(){
Load(mFilter334);
}
};//Rules end (mRules336)
protected Rule mRules337 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter335 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol395 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1022 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1022)
//CSS: stroke-width
protected stroke_width mCSS1023 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1023)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1024 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1024)
//CSS: stroke-linecap
protected stroke_linecap mCSS1025 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1025)
//CSS: stroke-opacity
protected stroke_opacity mCSS1026 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1026)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol396 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1027 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#debd9c");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1027)
//CSS: stroke-width
protected stroke_width mCSS1028 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1028)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1029 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","2,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1029)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1030 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1030)
//CSS: stroke-linecap
protected stroke_linecap mCSS1031 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1031)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol395);
Load(mSymbol396);
}
public void LoadCSS(){
Load(mCSS1022);
Load(mCSS1023);
Load(mCSS1024);
Load(mCSS1025);
Load(mCSS1026);
Load(mCSS1027);
Load(mCSS1028);
Load(mCSS1029);
Load(mCSS1030);
Load(mCSS1031);
}
public void LoadFilters(){
Load(mFilter335);
}
};//Rules end (mRules337)
protected Rule mRules338 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter336 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol397 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1032 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1032)
//CSS: stroke-width
protected stroke_width mCSS1033 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1033)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1034 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1034)
//CSS: stroke-linecap
protected stroke_linecap mCSS1035 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1035)
//CSS: stroke-opacity
protected stroke_opacity mCSS1036 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1036)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol398 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1037 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#debd9c");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1037)
//CSS: stroke-width
protected stroke_width mCSS1038 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1038)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1039 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1039)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1040 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1040)
//CSS: stroke-linecap
protected stroke_linecap mCSS1041 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1041)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol397);
Load(mSymbol398);
}
public void LoadCSS(){
Load(mCSS1032);
Load(mCSS1033);
Load(mCSS1034);
Load(mCSS1035);
Load(mCSS1036);
Load(mCSS1037);
Load(mCSS1038);
Load(mCSS1039);
Load(mCSS1040);
Load(mCSS1041);
}
public void LoadFilters(){
Load(mFilter336);
}
};//Rules end (mRules338)
protected Rule mRules339 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter337 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol399 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1042 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1042)
//CSS: stroke-width
protected stroke_width mCSS1043 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1043)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol399);
}
public void LoadCSS(){
Load(mCSS1042);
Load(mCSS1043);
}
public void LoadFilters(){
Load(mFilter337);
}
};//Rules end (mRules339)
protected Rule mRules340 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter338 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol400 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1044 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1044)
//CSS: stroke-width
protected stroke_width mCSS1045 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1045)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol400);
}
public void LoadCSS(){
Load(mCSS1044);
Load(mCSS1045);
}
public void LoadFilters(){
Load(mFilter338);
}
};//Rules end (mRules340)
protected Rule mRules341 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter339 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol401 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1046 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1046)
//CSS: stroke-width
protected stroke_width mCSS1047 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","18");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1047)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol401);
}
public void LoadCSS(){
Load(mCSS1046);
Load(mCSS1047);
}
public void LoadFilters(){
Load(mFilter339);
}
};//Rules end (mRules341)
protected Rule mRules342 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter340 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol402 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1048 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1048)
//CSS: stroke-width
protected stroke_width mCSS1049 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1049)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol402);
}
public void LoadCSS(){
Load(mCSS1048);
Load(mCSS1049);
}
public void LoadFilters(){
Load(mFilter340);
}
};//Rules end (mRules342)
protected Rule mRules343 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter341 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol403 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1050 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1050)
//CSS: stroke-width
protected stroke_width mCSS1051 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1051)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol403);
}
public void LoadCSS(){
Load(mCSS1050);
Load(mCSS1051);
}
public void LoadFilters(){
Load(mFilter341);
}
};//Rules end (mRules343)
protected Rule mRules344 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter342 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol404 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1052 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1052)
//CSS: stroke-width
protected stroke_width mCSS1053 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1053)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol404);
}
public void LoadCSS(){
Load(mCSS1052);
Load(mCSS1053);
}
public void LoadFilters(){
Load(mFilter342);
}
};//Rules end (mRules344)
public void LoadRules(){
Load(mRules247);
Load(mRules248);
Load(mRules249);
Load(mRules250);
Load(mRules251);
Load(mRules252);
Load(mRules253);
Load(mRules254);
Load(mRules255);
Load(mRules256);
Load(mRules257);
Load(mRules258);
Load(mRules259);
Load(mRules260);
Load(mRules261);
Load(mRules262);
Load(mRules263);
Load(mRules264);
Load(mRules265);
Load(mRules266);
Load(mRules267);
Load(mRules268);
Load(mRules269);
Load(mRules270);
Load(mRules271);
Load(mRules272);
Load(mRules273);
Load(mRules274);
Load(mRules275);
Load(mRules276);
Load(mRules277);
Load(mRules278);
Load(mRules279);
Load(mRules280);
Load(mRules281);
Load(mRules282);
Load(mRules283);
Load(mRules284);
Load(mRules285);
Load(mRules286);
Load(mRules287);
Load(mRules288);
Load(mRules289);
Load(mRules290);
Load(mRules291);
Load(mRules292);
Load(mRules293);
Load(mRules294);
Load(mRules295);
Load(mRules296);
Load(mRules297);
Load(mRules298);
Load(mRules299);
Load(mRules300);
Load(mRules301);
Load(mRules302);
Load(mRules303);
Load(mRules304);
Load(mRules305);
Load(mRules306);
Load(mRules307);
Load(mRules308);
Load(mRules309);
Load(mRules310);
Load(mRules311);
Load(mRules312);
Load(mRules313);
Load(mRules314);
Load(mRules315);
Load(mRules316);
Load(mRules317);
Load(mRules318);
Load(mRules319);
Load(mRules320);
Load(mRules321);
Load(mRules322);
Load(mRules323);
Load(mRules324);
Load(mRules325);
Load(mRules326);
Load(mRules327);
Load(mRules328);
Load(mRules329);
Load(mRules330);
Load(mRules331);
Load(mRules332);
Load(mRules333);
Load(mRules334);
Load(mRules335);
Load(mRules336);
Load(mRules337);
Load(mRules338);
Load(mRules339);
Load(mRules340);
Load(mRules341);
Load(mRules342);
Load(mRules343);
Load(mRules344);
}
};//minor_roads_fill end
protected Style maccess = new Style ("Style"){
// DEBUG :adding access
protected Rule mRules345 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter343 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))))))),Not(Parens(Condition(getObj().getaccess().equals_(CONST_permissive))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol405 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1054 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cf9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1054)
//CSS: stroke-width
protected stroke_width mCSS1055 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1055)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1056 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1056)
//CSS: stroke-opacity
protected stroke_opacity mCSS1057 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1057)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1058 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1058)
//CSS: stroke-linecap
protected stroke_linecap mCSS1059 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1059)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol405);
}
public void LoadCSS(){
Load(mCSS1054);
Load(mCSS1055);
Load(mCSS1056);
Load(mCSS1057);
Load(mCSS1058);
Load(mCSS1059);
}
public void LoadFilters(){
Load(mFilter343);
}
};//Rules end (mRules345)
protected Rule mRules346 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter344 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway)))))),Not(Parens(Condition(getObj().getaccess().equals_(CONST_permissive))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol406 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1060 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#cf9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1060)
//CSS: stroke-width
protected stroke_width mCSS1061 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1061)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1062 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1062)
//CSS: stroke-opacity
protected stroke_opacity mCSS1063 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1063)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1064 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1064)
//CSS: stroke-linecap
protected stroke_linecap mCSS1065 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1065)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol406);
}
public void LoadCSS(){
Load(mCSS1060);
Load(mCSS1061);
Load(mCSS1062);
Load(mCSS1063);
Load(mCSS1064);
Load(mCSS1065);
}
public void LoadFilters(){
Load(mFilter344);
}
};//Rules end (mRules346)
protected Rule mRules347 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter345 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))))))),Not(Parens(Condition(getObj().getaccess().equals_(CONST_destination))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol407 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1066 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#c2e0ff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1066)
//CSS: stroke-width
protected stroke_width mCSS1067 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1067)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1068 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1068)
//CSS: stroke-opacity
protected stroke_opacity mCSS1069 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1069)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1070 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1070)
//CSS: stroke-linecap
protected stroke_linecap mCSS1071 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1071)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol407);
}
public void LoadCSS(){
Load(mCSS1066);
Load(mCSS1067);
Load(mCSS1068);
Load(mCSS1069);
Load(mCSS1070);
Load(mCSS1071);
}
public void LoadFilters(){
Load(mFilter345);
}
};//Rules end (mRules347)
protected Rule mRules348 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter346 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_no)))))))),And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_private))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol408 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1072 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#efa9a9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1072)
//CSS: stroke-width
protected stroke_width mCSS1073 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1073)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1074 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1074)
//CSS: stroke-opacity
protected stroke_opacity mCSS1075 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1075)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1076 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1076)
//CSS: stroke-linecap
protected stroke_linecap mCSS1077 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1077)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol408);
}
public void LoadCSS(){
Load(mCSS1072);
Load(mCSS1073);
Load(mCSS1074);
Load(mCSS1075);
Load(mCSS1076);
Load(mCSS1077);
}
public void LoadFilters(){
Load(mFilter346);
}
};//Rules end (mRules348)
public void LoadRules(){
Load(mRules345);
Load(mRules346);
Load(mRules347);
Load(mRules348);
}
};//access end
protected Style mfootbikecycle_tunnels = new Style ("Style"){
// DEBUG :adding footbikecycle_tunnels
protected Rule mRules349 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter347 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_bridleway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol409 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1078 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1078)
//CSS: stroke-width
protected stroke_width mCSS1079 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1079)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1080 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1080)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol410 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1081 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1081)
//CSS: stroke-width
protected stroke_width mCSS1082 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1082)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1083 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1083)
//CSS: stroke-linecap
protected stroke_linecap mCSS1084 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1084)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol411 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1085 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1085)
//CSS: stroke-width
protected stroke_width mCSS1086 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1086)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1087 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1087)
//CSS: stroke-opacity
protected stroke_opacity mCSS1088 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1088)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1089 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1089)
//CSS: stroke-linecap
protected stroke_linecap mCSS1090 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1090)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol409);
Load(mSymbol410);
Load(mSymbol411);
}
public void LoadCSS(){
Load(mCSS1078);
Load(mCSS1079);
Load(mCSS1080);
Load(mCSS1081);
Load(mCSS1082);
Load(mCSS1083);
Load(mCSS1084);
Load(mCSS1085);
Load(mCSS1086);
Load(mCSS1087);
Load(mCSS1088);
Load(mCSS1089);
Load(mCSS1090);
}
public void LoadFilters(){
Load(mFilter347);
}
};//Rules end (mRules349)
protected Rule mRules350 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter348 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol412 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1091 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1091)
//CSS: stroke-width
protected stroke_width mCSS1092 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1092)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1093 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1093)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol413 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1094 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1094)
//CSS: stroke-width
protected stroke_width mCSS1095 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1095)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1096 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1096)
//CSS: stroke-linecap
protected stroke_linecap mCSS1097 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1097)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol414 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1098 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","salmon");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1098)
//CSS: stroke-width
protected stroke_width mCSS1099 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1099)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1100 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1100)
//CSS: stroke-opacity
protected stroke_opacity mCSS1101 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1101)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1102 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1102)
//CSS: stroke-linecap
protected stroke_linecap mCSS1103 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1103)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol412);
Load(mSymbol413);
Load(mSymbol414);
}
public void LoadCSS(){
Load(mCSS1091);
Load(mCSS1092);
Load(mCSS1093);
Load(mCSS1094);
Load(mCSS1095);
Load(mCSS1096);
Load(mCSS1097);
Load(mCSS1098);
Load(mCSS1099);
Load(mCSS1100);
Load(mCSS1101);
Load(mCSS1102);
Load(mCSS1103);
}
public void LoadFilters(){
Load(mFilter348);
}
};//Rules end (mRules350)
protected Rule mRules351 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter349 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol415 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1104 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1104)
//CSS: stroke-width
protected stroke_width mCSS1105 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1105)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1106 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1106)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol416 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1107 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1107)
//CSS: stroke-width
protected stroke_width mCSS1108 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1108)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1109 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1109)
//CSS: stroke-linecap
protected stroke_linecap mCSS1110 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1110)
//CSS: stroke-opacity
protected stroke_opacity mCSS1111 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1111)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol417 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1112 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1112)
//CSS: stroke-width
protected stroke_width mCSS1113 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1113)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1114 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1114)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1115 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1115)
//CSS: stroke-linecap
protected stroke_linecap mCSS1116 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1116)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol415);
Load(mSymbol416);
Load(mSymbol417);
}
public void LoadCSS(){
Load(mCSS1104);
Load(mCSS1105);
Load(mCSS1106);
Load(mCSS1107);
Load(mCSS1108);
Load(mCSS1109);
Load(mCSS1110);
Load(mCSS1111);
Load(mCSS1112);
Load(mCSS1113);
Load(mCSS1114);
Load(mCSS1115);
Load(mCSS1116);
}
public void LoadFilters(){
Load(mFilter349);
}
};//Rules end (mRules351)
protected Rule mRules352 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter350 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_cycleway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol418 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1117 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1117)
//CSS: stroke-width
protected stroke_width mCSS1118 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1118)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1119 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1119)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol419 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1120 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1120)
//CSS: stroke-width
protected stroke_width mCSS1121 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1121)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1122 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1122)
//CSS: stroke-linecap
protected stroke_linecap mCSS1123 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1123)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol420 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1124 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","blue");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1124)
//CSS: stroke-width
protected stroke_width mCSS1125 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1125)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1126 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1126)
//CSS: stroke-opacity
protected stroke_opacity mCSS1127 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1127)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1128 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1128)
//CSS: stroke-linecap
protected stroke_linecap mCSS1129 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1129)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol418);
Load(mSymbol419);
Load(mSymbol420);
}
public void LoadCSS(){
Load(mCSS1117);
Load(mCSS1118);
Load(mCSS1119);
Load(mCSS1120);
Load(mCSS1121);
Load(mCSS1122);
Load(mCSS1123);
Load(mCSS1124);
Load(mCSS1125);
Load(mCSS1126);
Load(mCSS1127);
Load(mCSS1128);
Load(mCSS1129);
}
public void LoadFilters(){
Load(mFilter350);
}
};//Rules end (mRules352)
public void LoadRules(){
Load(mRules349);
Load(mRules350);
Load(mRules351);
Load(mRules352);
}
};//footbikecycle_tunnels end
protected Style mtracks_notunnel_nobridge = new Style ("Style"){
// DEBUG :adding tracks_notunnel_nobridge
protected Rule mRules353 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter351 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade1))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol421 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1130 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1130)
//CSS: stroke-width
protected stroke_width mCSS1131 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1131)
//CSS: stroke-opacity
protected stroke_opacity mCSS1132 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1132)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol422 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1133 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#b37700");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1133)
//CSS: stroke-width
protected stroke_width mCSS1134 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1134)
//CSS: stroke-opacity
protected stroke_opacity mCSS1135 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1135)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol421);
Load(mSymbol422);
}
public void LoadCSS(){
Load(mCSS1130);
Load(mCSS1131);
Load(mCSS1132);
Load(mCSS1133);
Load(mCSS1134);
Load(mCSS1135);
}
public void LoadFilters(){
Load(mFilter351);
}
};//Rules end (mRules353)
protected Rule mRules354 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter352 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade2))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol423 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1136 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1136)
//CSS: stroke-width
protected stroke_width mCSS1137 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1137)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1138 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1138)
//CSS: stroke-linecap
protected stroke_linecap mCSS1139 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1139)
//CSS: stroke-opacity
protected stroke_opacity mCSS1140 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1140)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol424 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1141 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a87000");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1141)
//CSS: stroke-width
protected stroke_width mCSS1142 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1142)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1143 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","9,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1143)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1144 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1144)
//CSS: stroke-linecap
protected stroke_linecap mCSS1145 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1145)
//CSS: stroke-opacity
protected stroke_opacity mCSS1146 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1146)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol423);
Load(mSymbol424);
}
public void LoadCSS(){
Load(mCSS1136);
Load(mCSS1137);
Load(mCSS1138);
Load(mCSS1139);
Load(mCSS1140);
Load(mCSS1141);
Load(mCSS1142);
Load(mCSS1143);
Load(mCSS1144);
Load(mCSS1145);
Load(mCSS1146);
}
public void LoadFilters(){
Load(mFilter352);
}
};//Rules end (mRules354)
protected Rule mRules355 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter353 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade3))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol425 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1147 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1147)
//CSS: stroke-width
protected stroke_width mCSS1148 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1148)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1149 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1149)
//CSS: stroke-linecap
protected stroke_linecap mCSS1150 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1150)
//CSS: stroke-opacity
protected stroke_opacity mCSS1151 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1151)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol426 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1152 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1152)
//CSS: stroke-width
protected stroke_width mCSS1153 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1153)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1154 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1154)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1155 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1155)
//CSS: stroke-linecap
protected stroke_linecap mCSS1156 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1156)
//CSS: stroke-opacity
protected stroke_opacity mCSS1157 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1157)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol425);
Load(mSymbol426);
}
public void LoadCSS(){
Load(mCSS1147);
Load(mCSS1148);
Load(mCSS1149);
Load(mCSS1150);
Load(mCSS1151);
Load(mCSS1152);
Load(mCSS1153);
Load(mCSS1154);
Load(mCSS1155);
Load(mCSS1156);
Load(mCSS1157);
}
public void LoadFilters(){
Load(mFilter353);
}
};//Rules end (mRules355)
protected Rule mRules356 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter354 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade4))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol427 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1158 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1158)
//CSS: stroke-width
protected stroke_width mCSS1159 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1159)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1160 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1160)
//CSS: stroke-linecap
protected stroke_linecap mCSS1161 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1161)
//CSS: stroke-opacity
protected stroke_opacity mCSS1162 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1162)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol428 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1163 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1163)
//CSS: stroke-width
protected stroke_width mCSS1164 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1164)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1165 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,7,1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1165)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1166 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1166)
//CSS: stroke-linecap
protected stroke_linecap mCSS1167 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1167)
//CSS: stroke-opacity
protected stroke_opacity mCSS1168 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1168)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol427);
Load(mSymbol428);
}
public void LoadCSS(){
Load(mCSS1158);
Load(mCSS1159);
Load(mCSS1160);
Load(mCSS1161);
Load(mCSS1162);
Load(mCSS1163);
Load(mCSS1164);
Load(mCSS1165);
Load(mCSS1166);
Load(mCSS1167);
Load(mCSS1168);
}
public void LoadFilters(){
Load(mFilter354);
}
};//Rules end (mRules356)
protected Rule mRules357 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter355 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade5))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol429 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1169 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1169)
//CSS: stroke-width
protected stroke_width mCSS1170 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1170)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1171 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1171)
//CSS: stroke-linecap
protected stroke_linecap mCSS1172 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1172)
//CSS: stroke-opacity
protected stroke_opacity mCSS1173 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1173)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol430 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1174 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1174)
//CSS: stroke-width
protected stroke_width mCSS1175 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1175)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1176 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1176)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1177 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1177)
//CSS: stroke-linecap
protected stroke_linecap mCSS1178 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1178)
//CSS: stroke-opacity
protected stroke_opacity mCSS1179 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1179)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol429);
Load(mSymbol430);
}
public void LoadCSS(){
Load(mCSS1169);
Load(mCSS1170);
Load(mCSS1171);
Load(mCSS1172);
Load(mCSS1173);
Load(mCSS1174);
Load(mCSS1175);
Load(mCSS1176);
Load(mCSS1177);
Load(mCSS1178);
Load(mCSS1179);
}
public void LoadFilters(){
Load(mFilter355);
}
};//Rules end (mRules357)
protected Rule mRules358 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol431 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1180 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1180)
//CSS: stroke-width
protected stroke_width mCSS1181 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1181)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1182 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1182)
//CSS: stroke-linecap
protected stroke_linecap mCSS1183 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1183)
//CSS: stroke-opacity
protected stroke_opacity mCSS1184 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1184)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol432 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1185 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1185)
//CSS: stroke-width
protected stroke_width mCSS1186 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1186)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1187 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1187)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1188 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1188)
//CSS: stroke-linecap
protected stroke_linecap mCSS1189 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1189)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol431);
Load(mSymbol432);
}
public void LoadCSS(){
Load(mCSS1180);
Load(mCSS1181);
Load(mCSS1182);
Load(mCSS1183);
Load(mCSS1184);
Load(mCSS1185);
Load(mCSS1186);
Load(mCSS1187);
Load(mCSS1188);
Load(mCSS1189);
}
public void LoadFilters(){
}
};//Rules end (mRules358)
public void LoadRules(){
Load(mRules353);
Load(mRules354);
Load(mRules355);
Load(mRules356);
Load(mRules357);
Load(mRules358);
}
};//tracks_notunnel_nobridge end
protected Style mtracks_bridges = new Style ("Style"){
// DEBUG :adding tracks_bridges
protected Rule mRules359 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter356 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade1))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol433 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1190 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1190)
//CSS: stroke-width
protected stroke_width mCSS1191 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1191)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol434 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1192 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1192)
//CSS: stroke-width
protected stroke_width mCSS1193 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1193)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol435 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1194 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#b37700");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1194)
//CSS: stroke-width
protected stroke_width mCSS1195 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1195)
//CSS: stroke-opacity
protected stroke_opacity mCSS1196 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1196)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol433);
Load(mSymbol434);
Load(mSymbol435);
}
public void LoadCSS(){
Load(mCSS1190);
Load(mCSS1191);
Load(mCSS1192);
Load(mCSS1193);
Load(mCSS1194);
Load(mCSS1195);
Load(mCSS1196);
}
public void LoadFilters(){
Load(mFilter356);
}
};//Rules end (mRules359)
protected Rule mRules360 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter357 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade2))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol436 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1197 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1197)
//CSS: stroke-width
protected stroke_width mCSS1198 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1198)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol437 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1199 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1199)
//CSS: stroke-width
protected stroke_width mCSS1200 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1200)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1201 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1201)
//CSS: stroke-linecap
protected stroke_linecap mCSS1202 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1202)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol438 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1203 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a87000");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1203)
//CSS: stroke-width
protected stroke_width mCSS1204 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1204)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1205 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1205)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1206 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1206)
//CSS: stroke-linecap
protected stroke_linecap mCSS1207 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1207)
//CSS: stroke-opacity
protected stroke_opacity mCSS1208 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1208)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol436);
Load(mSymbol437);
Load(mSymbol438);
}
public void LoadCSS(){
Load(mCSS1197);
Load(mCSS1198);
Load(mCSS1199);
Load(mCSS1200);
Load(mCSS1201);
Load(mCSS1202);
Load(mCSS1203);
Load(mCSS1204);
Load(mCSS1205);
Load(mCSS1206);
Load(mCSS1207);
Load(mCSS1208);
}
public void LoadFilters(){
Load(mFilter357);
}
};//Rules end (mRules360)
protected Rule mRules361 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter358 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade3))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol439 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1209 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1209)
//CSS: stroke-width
protected stroke_width mCSS1210 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1210)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol440 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1211 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1211)
//CSS: stroke-width
protected stroke_width mCSS1212 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1212)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1213 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1213)
//CSS: stroke-linecap
protected stroke_linecap mCSS1214 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1214)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol441 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1215 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1215)
//CSS: stroke-width
protected stroke_width mCSS1216 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1216)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1217 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1217)
//CSS: stroke-linecap
protected stroke_linecap mCSS1218 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1218)
//CSS: stroke-opacity
protected stroke_opacity mCSS1219 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1219)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol439);
Load(mSymbol440);
Load(mSymbol441);
}
public void LoadCSS(){
Load(mCSS1209);
Load(mCSS1210);
Load(mCSS1211);
Load(mCSS1212);
Load(mCSS1213);
Load(mCSS1214);
Load(mCSS1215);
Load(mCSS1216);
Load(mCSS1217);
Load(mCSS1218);
Load(mCSS1219);
}
public void LoadFilters(){
Load(mFilter358);
}
};//Rules end (mRules361)
protected Rule mRules362 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter359 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade4))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol442 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1220 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1220)
//CSS: stroke-width
protected stroke_width mCSS1221 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1221)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol443 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1222 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1222)
//CSS: stroke-width
protected stroke_width mCSS1223 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1223)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1224 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1224)
//CSS: stroke-linecap
protected stroke_linecap mCSS1225 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1225)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol444 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1226 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1226)
//CSS: stroke-width
protected stroke_width mCSS1227 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1227)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1228 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,7,1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1228)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1229 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1229)
//CSS: stroke-linecap
protected stroke_linecap mCSS1230 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1230)
//CSS: stroke-opacity
protected stroke_opacity mCSS1231 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1231)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol442);
Load(mSymbol443);
Load(mSymbol444);
}
public void LoadCSS(){
Load(mCSS1220);
Load(mCSS1221);
Load(mCSS1222);
Load(mCSS1223);
Load(mCSS1224);
Load(mCSS1225);
Load(mCSS1226);
Load(mCSS1227);
Load(mCSS1228);
Load(mCSS1229);
Load(mCSS1230);
Load(mCSS1231);
}
public void LoadFilters(){
Load(mFilter359);
}
};//Rules end (mRules362)
protected Rule mRules363 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter360 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade5))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol445 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1232 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1232)
//CSS: stroke-width
protected stroke_width mCSS1233 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1233)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol446 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1234 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1234)
//CSS: stroke-width
protected stroke_width mCSS1235 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1235)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1236 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1236)
//CSS: stroke-linecap
protected stroke_linecap mCSS1237 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1237)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol447 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1238 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1238)
//CSS: stroke-width
protected stroke_width mCSS1239 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1239)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1240 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1240)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1241 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1241)
//CSS: stroke-linecap
protected stroke_linecap mCSS1242 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1242)
//CSS: stroke-opacity
protected stroke_opacity mCSS1243 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1243)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol445);
Load(mSymbol446);
Load(mSymbol447);
}
public void LoadCSS(){
Load(mCSS1232);
Load(mCSS1233);
Load(mCSS1234);
Load(mCSS1235);
Load(mCSS1236);
Load(mCSS1237);
Load(mCSS1238);
Load(mCSS1239);
Load(mCSS1240);
Load(mCSS1241);
Load(mCSS1242);
Load(mCSS1243);
}
public void LoadFilters(){
Load(mFilter360);
}
};//Rules end (mRules363)
protected Rule mRules364 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol448 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1244 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1244)
//CSS: stroke-width
protected stroke_width mCSS1245 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1245)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol449 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1246 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1246)
//CSS: stroke-width
protected stroke_width mCSS1247 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1247)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1248 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1248)
//CSS: stroke-linecap
protected stroke_linecap mCSS1249 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1249)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol450 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1250 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1250)
//CSS: stroke-width
protected stroke_width mCSS1251 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1251)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1252 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1252)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1253 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1253)
//CSS: stroke-linecap
protected stroke_linecap mCSS1254 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1254)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol448);
Load(mSymbol449);
Load(mSymbol450);
}
public void LoadCSS(){
Load(mCSS1244);
Load(mCSS1245);
Load(mCSS1246);
Load(mCSS1247);
Load(mCSS1248);
Load(mCSS1249);
Load(mCSS1250);
Load(mCSS1251);
Load(mCSS1252);
Load(mCSS1253);
Load(mCSS1254);
}
public void LoadFilters(){
}
};//Rules end (mRules364)
public void LoadRules(){
Load(mRules359);
Load(mRules360);
Load(mRules361);
Load(mRules362);
Load(mRules363);
Load(mRules364);
}
};//tracks_bridges end
protected Style mtracks_tunnels = new Style ("Style"){
// DEBUG :adding tracks_tunnels
protected Rule mRules365 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter361 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade1))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol451 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1255 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1255)
//CSS: stroke-width
protected stroke_width mCSS1256 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1256)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1257 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1257)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol452 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1258 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1258)
//CSS: stroke-width
protected stroke_width mCSS1259 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1259)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol453 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1260 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#b37700");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1260)
//CSS: stroke-width
protected stroke_width mCSS1261 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1261)
//CSS: stroke-opacity
protected stroke_opacity mCSS1262 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1262)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol451);
Load(mSymbol452);
Load(mSymbol453);
}
public void LoadCSS(){
Load(mCSS1255);
Load(mCSS1256);
Load(mCSS1257);
Load(mCSS1258);
Load(mCSS1259);
Load(mCSS1260);
Load(mCSS1261);
Load(mCSS1262);
}
public void LoadFilters(){
Load(mFilter361);
}
};//Rules end (mRules365)
protected Rule mRules366 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter362 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade2))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol454 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1263 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1263)
//CSS: stroke-width
protected stroke_width mCSS1264 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1264)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1265 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1265)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol455 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1266 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1266)
//CSS: stroke-width
protected stroke_width mCSS1267 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1267)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1268 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1268)
//CSS: stroke-linecap
protected stroke_linecap mCSS1269 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1269)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol456 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1270 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a87000");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1270)
//CSS: stroke-width
protected stroke_width mCSS1271 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1271)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1272 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1272)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1273 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1273)
//CSS: stroke-linecap
protected stroke_linecap mCSS1274 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1274)
//CSS: stroke-opacity
protected stroke_opacity mCSS1275 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1275)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol454);
Load(mSymbol455);
Load(mSymbol456);
}
public void LoadCSS(){
Load(mCSS1263);
Load(mCSS1264);
Load(mCSS1265);
Load(mCSS1266);
Load(mCSS1267);
Load(mCSS1268);
Load(mCSS1269);
Load(mCSS1270);
Load(mCSS1271);
Load(mCSS1272);
Load(mCSS1273);
Load(mCSS1274);
Load(mCSS1275);
}
public void LoadFilters(){
Load(mFilter362);
}
};//Rules end (mRules366)
protected Rule mRules367 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter363 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade3))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol457 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1276 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1276)
//CSS: stroke-width
protected stroke_width mCSS1277 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1277)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1278 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1278)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol458 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1279 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1279)
//CSS: stroke-width
protected stroke_width mCSS1280 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1280)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1281 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1281)
//CSS: stroke-linecap
protected stroke_linecap mCSS1282 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1282)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol459 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1283 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1283)
//CSS: stroke-width
protected stroke_width mCSS1284 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1284)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1285 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1285)
//CSS: stroke-linecap
protected stroke_linecap mCSS1286 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1286)
//CSS: stroke-opacity
protected stroke_opacity mCSS1287 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1287)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol457);
Load(mSymbol458);
Load(mSymbol459);
}
public void LoadCSS(){
Load(mCSS1276);
Load(mCSS1277);
Load(mCSS1278);
Load(mCSS1279);
Load(mCSS1280);
Load(mCSS1281);
Load(mCSS1282);
Load(mCSS1283);
Load(mCSS1284);
Load(mCSS1285);
Load(mCSS1286);
Load(mCSS1287);
}
public void LoadFilters(){
Load(mFilter363);
}
};//Rules end (mRules367)
protected Rule mRules368 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter364 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade4))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol460 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1288 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1288)
//CSS: stroke-width
protected stroke_width mCSS1289 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1289)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1290 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1290)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol461 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1291 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1291)
//CSS: stroke-width
protected stroke_width mCSS1292 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1292)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1293 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1293)
//CSS: stroke-linecap
protected stroke_linecap mCSS1294 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1294)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol462 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1295 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1295)
//CSS: stroke-width
protected stroke_width mCSS1296 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1296)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1297 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,7,1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1297)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1298 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1298)
//CSS: stroke-linecap
protected stroke_linecap mCSS1299 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1299)
//CSS: stroke-opacity
protected stroke_opacity mCSS1300 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1300)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol460);
Load(mSymbol461);
Load(mSymbol462);
}
public void LoadCSS(){
Load(mCSS1288);
Load(mCSS1289);
Load(mCSS1290);
Load(mCSS1291);
Load(mCSS1292);
Load(mCSS1293);
Load(mCSS1294);
Load(mCSS1295);
Load(mCSS1296);
Load(mCSS1297);
Load(mCSS1298);
Load(mCSS1299);
Load(mCSS1300);
}
public void LoadFilters(){
Load(mFilter364);
}
};//Rules end (mRules368)
protected Rule mRules369 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter365 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade5))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol463 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1301 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1301)
//CSS: stroke-width
protected stroke_width mCSS1302 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1302)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1303 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1303)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol464 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1304 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1304)
//CSS: stroke-width
protected stroke_width mCSS1305 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1305)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1306 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1306)
//CSS: stroke-linecap
protected stroke_linecap mCSS1307 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1307)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol465 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1308 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1308)
//CSS: stroke-width
protected stroke_width mCSS1309 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1309)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1310 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1310)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1311 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1311)
//CSS: stroke-linecap
protected stroke_linecap mCSS1312 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1312)
//CSS: stroke-opacity
protected stroke_opacity mCSS1313 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1313)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol463);
Load(mSymbol464);
Load(mSymbol465);
}
public void LoadCSS(){
Load(mCSS1301);
Load(mCSS1302);
Load(mCSS1303);
Load(mCSS1304);
Load(mCSS1305);
Load(mCSS1306);
Load(mCSS1307);
Load(mCSS1308);
Load(mCSS1309);
Load(mCSS1310);
Load(mCSS1311);
Load(mCSS1312);
Load(mCSS1313);
}
public void LoadFilters(){
Load(mFilter365);
}
};//Rules end (mRules369)
protected Rule mRules370 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol466 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1314 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","grey");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1314)
//CSS: stroke-width
protected stroke_width mCSS1315 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1315)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1316 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1316)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol467 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1317 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1317)
//CSS: stroke-width
protected stroke_width mCSS1318 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1318)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1319 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1319)
//CSS: stroke-linecap
protected stroke_linecap mCSS1320 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1320)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol468 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1321 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#996600");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1321)
//CSS: stroke-width
protected stroke_width mCSS1322 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1322)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1323 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1323)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1324 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1324)
//CSS: stroke-linecap
protected stroke_linecap mCSS1325 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1325)
//CSS: stroke-opacity
protected stroke_opacity mCSS1326 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1326)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol466);
Load(mSymbol467);
Load(mSymbol468);
}
public void LoadCSS(){
Load(mCSS1314);
Load(mCSS1315);
Load(mCSS1316);
Load(mCSS1317);
Load(mCSS1318);
Load(mCSS1319);
Load(mCSS1320);
Load(mCSS1321);
Load(mCSS1322);
Load(mCSS1323);
Load(mCSS1324);
Load(mCSS1325);
Load(mCSS1326);
}
public void LoadFilters(){
}
};//Rules end (mRules370)
public void LoadRules(){
Load(mRules365);
Load(mRules366);
Load(mRules367);
Load(mRules368);
Load(mRules369);
Load(mRules370);
}
};//tracks_tunnels end
protected Style mroad_bridges_casing = new Style ("Style"){
// DEBUG :adding road_bridges_casing
protected Rule mRules371 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter366 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol469 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1327 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#506077");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1327)
//CSS: stroke-width
protected stroke_width mCSS1328 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1328)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol469);
}
public void LoadCSS(){
Load(mCSS1327);
Load(mCSS1328);
}
public void LoadFilters(){
Load(mFilter366);
}
};//Rules end (mRules371)
protected Rule mRules372 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter367 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol470 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1329 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#477147");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1329)
//CSS: stroke-width
protected stroke_width mCSS1330 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1330)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol470);
}
public void LoadCSS(){
Load(mCSS1329);
Load(mCSS1330);
}
public void LoadFilters(){
Load(mFilter367);
}
};//Rules end (mRules372)
protected Rule mRules373 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter368 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol471 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1331 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1331)
//CSS: stroke-width
protected stroke_width mCSS1332 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1332)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol471);
}
public void LoadCSS(){
Load(mCSS1331);
Load(mCSS1332);
}
public void LoadFilters(){
Load(mFilter368);
}
};//Rules end (mRules373)
protected Rule mRules374 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter369 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol472 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1333 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1333)
//CSS: stroke-width
protected stroke_width mCSS1334 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1334)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol472);
}
public void LoadCSS(){
Load(mCSS1333);
Load(mCSS1334);
}
public void LoadFilters(){
Load(mFilter369);
}
};//Rules end (mRules374)
protected Rule mRules375 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter370 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol473 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1335 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1335)
//CSS: stroke-width
protected stroke_width mCSS1336 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1336)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol473);
}
public void LoadCSS(){
Load(mCSS1335);
Load(mCSS1336);
}
public void LoadFilters(){
Load(mFilter370);
}
};//Rules end (mRules375)
protected Rule mRules376 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter371 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol474 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1337 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#8d4346");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1337)
//CSS: stroke-width
protected stroke_width mCSS1338 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1338)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol474);
}
public void LoadCSS(){
Load(mCSS1337);
Load(mCSS1338);
}
public void LoadFilters(){
Load(mFilter371);
}
};//Rules end (mRules376)
protected Rule mRules377 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter372 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol475 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1339 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1339)
//CSS: stroke-width
protected stroke_width mCSS1340 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1340)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol475);
}
public void LoadCSS(){
Load(mCSS1339);
Load(mCSS1340);
}
public void LoadFilters(){
Load(mFilter372);
}
};//Rules end (mRules377)
protected Rule mRules378 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter373 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol476 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1341 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1341)
//CSS: stroke-width
protected stroke_width mCSS1342 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1342)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol476);
}
public void LoadCSS(){
Load(mCSS1341);
Load(mCSS1342);
}
public void LoadFilters(){
Load(mFilter373);
}
};//Rules end (mRules378)
protected Rule mRules379 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter374 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol477 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1343 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1343)
//CSS: stroke-width
protected stroke_width mCSS1344 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1344)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol477);
}
public void LoadCSS(){
Load(mCSS1343);
Load(mCSS1344);
}
public void LoadFilters(){
Load(mFilter374);
}
};//Rules end (mRules379)
protected Rule mRules380 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter375 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol478 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1345 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1345)
//CSS: stroke-width
protected stroke_width mCSS1346 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1346)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol478);
}
public void LoadCSS(){
Load(mCSS1345);
Load(mCSS1346);
}
public void LoadFilters(){
Load(mFilter375);
}
};//Rules end (mRules380)
protected Rule mRules381 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter376 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol479 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1347 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1347)
//CSS: stroke-width
protected stroke_width mCSS1348 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1348)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol479);
}
public void LoadCSS(){
Load(mCSS1347);
Load(mCSS1348);
}
public void LoadFilters(){
Load(mFilter376);
}
};//Rules end (mRules381)
protected Rule mRules382 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter377 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol480 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1349 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1349)
//CSS: stroke-width
protected stroke_width mCSS1350 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1350)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol480);
}
public void LoadCSS(){
Load(mCSS1349);
Load(mCSS1350);
}
public void LoadFilters(){
Load(mFilter377);
}
};//Rules end (mRules382)
protected Rule mRules383 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter378 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol481 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1351 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1351)
//CSS: stroke-width
protected stroke_width mCSS1352 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1352)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol481);
}
public void LoadCSS(){
Load(mCSS1351);
Load(mCSS1352);
}
public void LoadFilters(){
Load(mFilter378);
}
};//Rules end (mRules383)
protected Rule mRules384 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter379 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol482 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1353 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1353)
//CSS: stroke-width
protected stroke_width mCSS1354 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1354)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol482);
}
public void LoadCSS(){
Load(mCSS1353);
Load(mCSS1354);
}
public void LoadFilters(){
Load(mFilter379);
}
};//Rules end (mRules384)
protected Rule mRules385 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter380 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol483 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1355 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1355)
//CSS: stroke-width
protected stroke_width mCSS1356 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1356)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol483);
}
public void LoadCSS(){
Load(mCSS1355);
Load(mCSS1356);
}
public void LoadFilters(){
Load(mFilter380);
}
};//Rules end (mRules385)
protected Rule mRules386 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter381 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol484 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1357 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1357)
//CSS: stroke-width
protected stroke_width mCSS1358 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1358)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol484);
}
public void LoadCSS(){
Load(mCSS1357);
Load(mCSS1358);
}
public void LoadFilters(){
Load(mFilter381);
}
};//Rules end (mRules386)
protected Rule mRules387 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter382 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol485 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1359 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1359)
//CSS: stroke-width
protected stroke_width mCSS1360 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1360)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol485);
}
public void LoadCSS(){
Load(mCSS1359);
Load(mCSS1360);
}
public void LoadFilters(){
Load(mFilter382);
}
};//Rules end (mRules387)
protected Rule mRules388 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter383 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol486 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1361 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1361)
//CSS: stroke-width
protected stroke_width mCSS1362 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1362)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol486);
}
public void LoadCSS(){
Load(mCSS1361);
Load(mCSS1362);
}
public void LoadFilters(){
Load(mFilter383);
}
};//Rules end (mRules388)
protected Rule mRules389 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter384 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol487 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1363 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1363)
//CSS: stroke-width
protected stroke_width mCSS1364 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1364)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol487);
}
public void LoadCSS(){
Load(mCSS1363);
Load(mCSS1364);
}
public void LoadFilters(){
Load(mFilter384);
}
};//Rules end (mRules389)
protected Rule mRules390 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter385 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol488 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1365 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1365)
//CSS: stroke-width
protected stroke_width mCSS1366 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1366)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol488);
}
public void LoadCSS(){
Load(mCSS1365);
Load(mCSS1366);
}
public void LoadFilters(){
Load(mFilter385);
}
};//Rules end (mRules390)
protected Rule mRules391 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter386 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol489 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1367 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1367)
//CSS: stroke-width
protected stroke_width mCSS1368 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1368)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol489);
}
public void LoadCSS(){
Load(mCSS1367);
Load(mCSS1368);
}
public void LoadFilters(){
Load(mFilter386);
}
};//Rules end (mRules391)
protected Rule mRules392 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter387 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol490 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1369 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1369)
//CSS: stroke-width
protected stroke_width mCSS1370 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1370)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol490);
}
public void LoadCSS(){
Load(mCSS1369);
Load(mCSS1370);
}
public void LoadFilters(){
Load(mFilter387);
}
};//Rules end (mRules392)
public void LoadRules(){
Load(mRules371);
Load(mRules372);
Load(mRules373);
Load(mRules374);
Load(mRules375);
Load(mRules376);
Load(mRules377);
Load(mRules378);
Load(mRules379);
Load(mRules380);
Load(mRules381);
Load(mRules382);
Load(mRules383);
Load(mRules384);
Load(mRules385);
Load(mRules386);
Load(mRules387);
Load(mRules388);
Load(mRules389);
Load(mRules390);
Load(mRules391);
Load(mRules392);
}
};//road_bridges_casing end
protected Style mroad_bridges_fill = new Style ("Style"){
// DEBUG :adding road_bridges_fill
protected Rule mRules393 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter388 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol491 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1371 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1371)
//CSS: stroke-width
protected stroke_width mCSS1372 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1372)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1373 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1373)
//CSS: stroke-linecap
protected stroke_linecap mCSS1374 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1374)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol491);
}
public void LoadCSS(){
Load(mCSS1371);
Load(mCSS1372);
Load(mCSS1373);
Load(mCSS1374);
}
public void LoadFilters(){
Load(mFilter388);
}
};//Rules end (mRules393)
protected Rule mRules394 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter389 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol492 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1375 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1375)
//CSS: stroke-width
protected stroke_width mCSS1376 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1376)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1377 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1377)
//CSS: stroke-linecap
protected stroke_linecap mCSS1378 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1378)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol492);
}
public void LoadCSS(){
Load(mCSS1375);
Load(mCSS1376);
Load(mCSS1377);
Load(mCSS1378);
}
public void LoadFilters(){
Load(mFilter389);
}
};//Rules end (mRules394)
protected Rule mRules395 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter390 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol493 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1379 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1379)
//CSS: stroke-width
protected stroke_width mCSS1380 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1380)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1381 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1381)
//CSS: stroke-linecap
protected stroke_linecap mCSS1382 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1382)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol493);
}
public void LoadCSS(){
Load(mCSS1379);
Load(mCSS1380);
Load(mCSS1381);
Load(mCSS1382);
}
public void LoadFilters(){
Load(mFilter390);
}
};//Rules end (mRules395)
protected Rule mRules396 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter391 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol494 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1383 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1383)
//CSS: stroke-width
protected stroke_width mCSS1384 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1384)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1385 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1385)
//CSS: stroke-linecap
protected stroke_linecap mCSS1386 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1386)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol494);
}
public void LoadCSS(){
Load(mCSS1383);
Load(mCSS1384);
Load(mCSS1385);
Load(mCSS1386);
}
public void LoadFilters(){
Load(mFilter391);
}
};//Rules end (mRules396)
protected Rule mRules397 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter392 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol495 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1387 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1387)
//CSS: stroke-width
protected stroke_width mCSS1388 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1388)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1389 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1389)
//CSS: stroke-linecap
protected stroke_linecap mCSS1390 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1390)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol495);
}
public void LoadCSS(){
Load(mCSS1387);
Load(mCSS1388);
Load(mCSS1389);
Load(mCSS1390);
}
public void LoadFilters(){
Load(mFilter392);
}
};//Rules end (mRules397)
protected Rule mRules398 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter393 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol496 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1391 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1391)
//CSS: stroke-width
protected stroke_width mCSS1392 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1392)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1393 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1393)
//CSS: stroke-linecap
protected stroke_linecap mCSS1394 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1394)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol496);
}
public void LoadCSS(){
Load(mCSS1391);
Load(mCSS1392);
Load(mCSS1393);
Load(mCSS1394);
}
public void LoadFilters(){
Load(mFilter393);
}
};//Rules end (mRules398)
protected Rule mRules399 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter394 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol497 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1395 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1395)
//CSS: stroke-width
protected stroke_width mCSS1396 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1396)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1397 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1397)
//CSS: stroke-linecap
protected stroke_linecap mCSS1398 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1398)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol497);
}
public void LoadCSS(){
Load(mCSS1395);
Load(mCSS1396);
Load(mCSS1397);
Load(mCSS1398);
}
public void LoadFilters(){
Load(mFilter394);
}
};//Rules end (mRules399)
protected Rule mRules400 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter395 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol498 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1399 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1399)
//CSS: stroke-width
protected stroke_width mCSS1400 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1400)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1401 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1401)
//CSS: stroke-linecap
protected stroke_linecap mCSS1402 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1402)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol498);
}
public void LoadCSS(){
Load(mCSS1399);
Load(mCSS1400);
Load(mCSS1401);
Load(mCSS1402);
}
public void LoadFilters(){
Load(mFilter395);
}
};//Rules end (mRules400)
protected Rule mRules401 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter396 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol499 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1403 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fed7a5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1403)
//CSS: stroke-width
protected stroke_width mCSS1404 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1404)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1405 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1405)
//CSS: stroke-linecap
protected stroke_linecap mCSS1406 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1406)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol499);
}
public void LoadCSS(){
Load(mCSS1403);
Load(mCSS1404);
Load(mCSS1405);
Load(mCSS1406);
}
public void LoadFilters(){
Load(mFilter396);
}
};//Rules end (mRules401)
protected Rule mRules402 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter397 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol500 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1407 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1407)
//CSS: stroke-width
protected stroke_width mCSS1408 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1408)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1409 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1409)
//CSS: stroke-linecap
protected stroke_linecap mCSS1410 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1410)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol500);
}
public void LoadCSS(){
Load(mCSS1407);
Load(mCSS1408);
Load(mCSS1409);
Load(mCSS1410);
}
public void LoadFilters(){
Load(mFilter397);
}
};//Rules end (mRules402)
protected Rule mRules403 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter398 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol501 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1411 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1411)
//CSS: stroke-width
protected stroke_width mCSS1412 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1412)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1413 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1413)
//CSS: stroke-linecap
protected stroke_linecap mCSS1414 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1414)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol501);
}
public void LoadCSS(){
Load(mCSS1411);
Load(mCSS1412);
Load(mCSS1413);
Load(mCSS1414);
}
public void LoadFilters(){
Load(mFilter398);
}
};//Rules end (mRules403)
protected Rule mRules404 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter399 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol502 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1415 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffffb3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1415)
//CSS: stroke-width
protected stroke_width mCSS1416 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1416)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1417 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1417)
//CSS: stroke-linecap
protected stroke_linecap mCSS1418 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1418)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol502);
}
public void LoadCSS(){
Load(mCSS1415);
Load(mCSS1416);
Load(mCSS1417);
Load(mCSS1418);
}
public void LoadFilters(){
Load(mFilter399);
}
};//Rules end (mRules404)
protected Rule mRules405 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter400 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol503 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1419 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1419)
//CSS: stroke-width
protected stroke_width mCSS1420 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1420)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1421 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1421)
//CSS: stroke-linecap
protected stroke_linecap mCSS1422 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1422)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol503);
}
public void LoadCSS(){
Load(mCSS1419);
Load(mCSS1420);
Load(mCSS1421);
Load(mCSS1422);
}
public void LoadFilters(){
Load(mFilter400);
}
};//Rules end (mRules405)
protected Rule mRules406 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter401 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol504 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1423 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1423)
//CSS: stroke-width
protected stroke_width mCSS1424 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1424)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1425 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1425)
//CSS: stroke-linecap
protected stroke_linecap mCSS1426 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1426)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol504);
}
public void LoadCSS(){
Load(mCSS1423);
Load(mCSS1424);
Load(mCSS1425);
Load(mCSS1426);
}
public void LoadFilters(){
Load(mFilter401);
}
};//Rules end (mRules406)
protected Rule mRules407 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter402 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol505 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1427 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ddd");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1427)
//CSS: stroke-width
protected stroke_width mCSS1428 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1428)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1429 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1429)
//CSS: stroke-linecap
protected stroke_linecap mCSS1430 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1430)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol505);
}
public void LoadCSS(){
Load(mCSS1427);
Load(mCSS1428);
Load(mCSS1429);
Load(mCSS1430);
}
public void LoadFilters(){
Load(mFilter402);
}
};//Rules end (mRules407)
protected Rule mRules408 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter403 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol506 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1431 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1431)
//CSS: stroke-width
protected stroke_width mCSS1432 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1432)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1433 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1433)
//CSS: stroke-linecap
protected stroke_linecap mCSS1434 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1434)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol506);
}
public void LoadCSS(){
Load(mCSS1431);
Load(mCSS1432);
Load(mCSS1433);
Load(mCSS1434);
}
public void LoadFilters(){
Load(mFilter403);
}
};//Rules end (mRules408)
protected Rule mRules409 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter404 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol507 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1435 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1435)
//CSS: stroke-width
protected stroke_width mCSS1436 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1436)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1437 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1437)
//CSS: stroke-linecap
protected stroke_linecap mCSS1438 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1438)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol507);
}
public void LoadCSS(){
Load(mCSS1435);
Load(mCSS1436);
Load(mCSS1437);
Load(mCSS1438);
}
public void LoadFilters(){
Load(mFilter404);
}
};//Rules end (mRules409)
protected Rule mRules410 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter405 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol508 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1439 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1439)
//CSS: stroke-width
protected stroke_width mCSS1440 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1440)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1441 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1441)
//CSS: stroke-linecap
protected stroke_linecap mCSS1442 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1442)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol508);
}
public void LoadCSS(){
Load(mCSS1439);
Load(mCSS1440);
Load(mCSS1441);
Load(mCSS1442);
}
public void LoadFilters(){
Load(mFilter405);
}
};//Rules end (mRules410)
protected Rule mRules411 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter406 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol509 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1443 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1443)
//CSS: stroke-width
protected stroke_width mCSS1444 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1444)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1445 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1445)
//CSS: stroke-linecap
protected stroke_linecap mCSS1446 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1446)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol509);
}
public void LoadCSS(){
Load(mCSS1443);
Load(mCSS1444);
Load(mCSS1445);
Load(mCSS1446);
}
public void LoadFilters(){
Load(mFilter406);
}
};//Rules end (mRules411)
protected Rule mRules412 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter407 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol510 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1447 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1447)
//CSS: stroke-width
protected stroke_width mCSS1448 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1448)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1449 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1449)
//CSS: stroke-linecap
protected stroke_linecap mCSS1450 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1450)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol510);
}
public void LoadCSS(){
Load(mCSS1447);
Load(mCSS1448);
Load(mCSS1449);
Load(mCSS1450);
}
public void LoadFilters(){
Load(mFilter407);
}
};//Rules end (mRules412)
protected Rule mRules413 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter408 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol511 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1451 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1451)
//CSS: stroke-width
protected stroke_width mCSS1452 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1452)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1453 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1453)
//CSS: stroke-linecap
protected stroke_linecap mCSS1454 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1454)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol511);
}
public void LoadCSS(){
Load(mCSS1451);
Load(mCSS1452);
Load(mCSS1453);
Load(mCSS1454);
}
public void LoadFilters(){
Load(mFilter408);
}
};//Rules end (mRules413)
protected Rule mRules414 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter409 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol512 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1455 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1455)
//CSS: stroke-width
protected stroke_width mCSS1456 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1456)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1457 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1457)
//CSS: stroke-linecap
protected stroke_linecap mCSS1458 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1458)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol512);
}
public void LoadCSS(){
Load(mCSS1455);
Load(mCSS1456);
Load(mCSS1457);
Load(mCSS1458);
}
public void LoadFilters(){
Load(mFilter409);
}
};//Rules end (mRules414)
protected Rule mRules415 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter410 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol513 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1459 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1459)
//CSS: stroke-width
protected stroke_width mCSS1460 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1460)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1461 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1461)
//CSS: stroke-linecap
protected stroke_linecap mCSS1462 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1462)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol513);
}
public void LoadCSS(){
Load(mCSS1459);
Load(mCSS1460);
Load(mCSS1461);
Load(mCSS1462);
}
public void LoadFilters(){
Load(mFilter410);
}
};//Rules end (mRules415)
protected Rule mRules416 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter411 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol514 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1463 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1463)
//CSS: stroke-width
protected stroke_width mCSS1464 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1464)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1465 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1465)
//CSS: stroke-linecap
protected stroke_linecap mCSS1466 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1466)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol514);
}
public void LoadCSS(){
Load(mCSS1463);
Load(mCSS1464);
Load(mCSS1465);
Load(mCSS1466);
}
public void LoadFilters(){
Load(mFilter411);
}
};//Rules end (mRules416)
protected Rule mRules417 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter412 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol515 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1467 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ededed");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1467)
//CSS: stroke-width
protected stroke_width mCSS1468 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1468)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1469 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1469)
//CSS: stroke-linecap
protected stroke_linecap mCSS1470 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1470)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol515);
}
public void LoadCSS(){
Load(mCSS1467);
Load(mCSS1468);
Load(mCSS1469);
Load(mCSS1470);
}
public void LoadFilters(){
Load(mFilter412);
}
};//Rules end (mRules417)
public void LoadRules(){
Load(mRules393);
Load(mRules394);
Load(mRules395);
Load(mRules396);
Load(mRules397);
Load(mRules398);
Load(mRules399);
Load(mRules400);
Load(mRules401);
Load(mRules402);
Load(mRules403);
Load(mRules404);
Load(mRules405);
Load(mRules406);
Load(mRules407);
Load(mRules408);
Load(mRules409);
Load(mRules410);
Load(mRules411);
Load(mRules412);
Load(mRules413);
Load(mRules414);
Load(mRules415);
Load(mRules416);
Load(mRules417);
}
};//road_bridges_fill end
protected Style mwaterway_bridges = new Style ("Style"){
// DEBUG :adding waterway_bridges
protected Rule mRules418 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol516 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1471 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#000");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1471)
//CSS: stroke-width
protected stroke_width mCSS1472 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1472)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1473 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1473)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol517 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1474 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#b5d0d0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1474)
//CSS: stroke-width
protected stroke_width mCSS1475 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1475)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1476 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1476)
//CSS: stroke-linecap
protected stroke_linecap mCSS1477 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1477)
//LEAVING LineSymbolizer
//TextSymbolizer name,book-fonts, 9,#6699cc,1,0);
protected TextSymbolizer mSymbol518 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol516);
Load(mSymbol517);
Load(mSymbol518);
}
public void LoadCSS(){
Load(mCSS1471);
Load(mCSS1472);
Load(mCSS1473);
Load(mCSS1474);
Load(mCSS1475);
Load(mCSS1476);
Load(mCSS1477);
}
public void LoadFilters(){
}
};//Rules end (mRules418)
protected Rule mRules419 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol519 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1478 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#000");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1478)
//CSS: stroke-width
protected stroke_width mCSS1479 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1479)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1480 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1480)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol520 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1481 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#b5d0d0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1481)
//CSS: stroke-width
protected stroke_width mCSS1482 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1482)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1483 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1483)
//CSS: stroke-linecap
protected stroke_linecap mCSS1484 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1484)
//LEAVING LineSymbolizer
//TextSymbolizer name,book-fonts, 9,#6699cc,1,0);
protected TextSymbolizer mSymbol521 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol519);
Load(mSymbol520);
Load(mSymbol521);
}
public void LoadCSS(){
Load(mCSS1478);
Load(mCSS1479);
Load(mCSS1480);
Load(mCSS1481);
Load(mCSS1482);
Load(mCSS1483);
Load(mCSS1484);
}
public void LoadFilters(){
}
};//Rules end (mRules419)
public void LoadRules(){
Load(mRules418);
Load(mRules419);
}
};//waterway_bridges end
protected Style mnoncased_ways_bridges = new Style ("Style"){
// DEBUG :adding noncased_ways_bridges
protected Rule mRules420 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter413 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol522 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1485 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1485)
//CSS: stroke-width
protected stroke_width mCSS1486 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","19");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1486)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol523 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1487 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1487)
//CSS: stroke-width
protected stroke_width mCSS1488 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","18");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1488)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol522);
Load(mSymbol523);
}
public void LoadCSS(){
Load(mCSS1485);
Load(mCSS1486);
Load(mCSS1487);
Load(mCSS1488);
}
public void LoadFilters(){
Load(mFilter413);
}
};//Rules end (mRules420)
protected Rule mRules421 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter414 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol524 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1489 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1489)
//CSS: stroke-width
protected stroke_width mCSS1490 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1490)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol525 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1491 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1491)
//CSS: stroke-width
protected stroke_width mCSS1492 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1492)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol524);
Load(mSymbol525);
}
public void LoadCSS(){
Load(mCSS1489);
Load(mCSS1490);
Load(mCSS1491);
Load(mCSS1492);
}
public void LoadFilters(){
Load(mFilter414);
}
};//Rules end (mRules421)
protected Rule mRules422 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter415 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol526 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1493 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1493)
//CSS: stroke-width
protected stroke_width mCSS1494 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1494)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol527 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1495 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#bbc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1495)
//CSS: stroke-width
protected stroke_width mCSS1496 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1496)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol526);
Load(mSymbol527);
}
public void LoadCSS(){
Load(mCSS1493);
Load(mCSS1494);
Load(mCSS1495);
Load(mCSS1496);
}
public void LoadFilters(){
Load(mFilter415);
}
};//Rules end (mRules422)
protected Rule mRules423 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter416 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_subway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol528 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1497 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1497)
//CSS: stroke-width
protected stroke_width mCSS1498 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1498)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol529 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1499 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1499)
//CSS: stroke-width
protected stroke_width mCSS1500 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1500)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol530 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1501 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1501)
//CSS: stroke-width
protected stroke_width mCSS1502 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1502)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol528);
Load(mSymbol529);
Load(mSymbol530);
}
public void LoadCSS(){
Load(mCSS1497);
Load(mCSS1498);
Load(mCSS1499);
Load(mCSS1500);
Load(mCSS1501);
Load(mCSS1502);
}
public void LoadFilters(){
Load(mFilter416);
}
};//Rules end (mRules423)
protected Rule mRules424 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter417 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol531 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1503 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#555");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1503)
//CSS: stroke-width
protected stroke_width mCSS1504 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1504)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol532 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1505 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1505)
//CSS: stroke-width
protected stroke_width mCSS1506 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1506)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol533 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1507 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#666");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1507)
//CSS: stroke-width
protected stroke_width mCSS1508 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1508)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol531);
Load(mSymbol532);
Load(mSymbol533);
}
public void LoadCSS(){
Load(mCSS1503);
Load(mCSS1504);
Load(mCSS1505);
Load(mCSS1506);
Load(mCSS1507);
Load(mCSS1508);
}
public void LoadFilters(){
Load(mFilter417);
}
};//Rules end (mRules424)
protected Rule mRules425 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter418 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol534 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1509 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1509)
//CSS: stroke-width
protected stroke_width mCSS1510 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1510)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol535 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1511 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1511)
//CSS: stroke-width
protected stroke_width mCSS1512 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1512)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1513 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1513)
//CSS: stroke-linecap
protected stroke_linecap mCSS1514 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1514)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol536 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1515 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#debd9c");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1515)
//CSS: stroke-width
protected stroke_width mCSS1516 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1516)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1517 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","2,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1517)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1518 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1518)
//CSS: stroke-linecap
protected stroke_linecap mCSS1519 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1519)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol534);
Load(mSymbol535);
Load(mSymbol536);
}
public void LoadCSS(){
Load(mCSS1509);
Load(mCSS1510);
Load(mCSS1511);
Load(mCSS1512);
Load(mCSS1513);
Load(mCSS1514);
Load(mCSS1515);
Load(mCSS1516);
Load(mCSS1517);
Load(mCSS1518);
Load(mCSS1519);
}
public void LoadFilters(){
Load(mFilter418);
}
};//Rules end (mRules425)
protected Rule mRules426 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter419 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol537 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1520 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1520)
//CSS: stroke-width
protected stroke_width mCSS1521 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1521)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol538 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1522 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1522)
//CSS: stroke-width
protected stroke_width mCSS1523 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1523)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1524 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1524)
//CSS: stroke-linecap
protected stroke_linecap mCSS1525 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1525)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol539 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1526 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#debd9c");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1526)
//CSS: stroke-width
protected stroke_width mCSS1527 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1527)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1528 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1528)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1529 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1529)
//CSS: stroke-linecap
protected stroke_linecap mCSS1530 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1530)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol537);
Load(mSymbol538);
Load(mSymbol539);
}
public void LoadCSS(){
Load(mCSS1520);
Load(mCSS1521);
Load(mCSS1522);
Load(mCSS1523);
Load(mCSS1524);
Load(mCSS1525);
Load(mCSS1526);
Load(mCSS1527);
Load(mCSS1528);
Load(mCSS1529);
Load(mCSS1530);
}
public void LoadFilters(){
Load(mFilter419);
}
};//Rules end (mRules426)
protected Rule mRules427 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter420 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_bridleway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol540 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1531 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1531)
//CSS: stroke-width
protected stroke_width mCSS1532 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1532)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol541 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1533 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1533)
//CSS: stroke-width
protected stroke_width mCSS1534 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1534)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1535 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1535)
//CSS: stroke-linecap
protected stroke_linecap mCSS1536 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1536)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol542 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1537 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1537)
//CSS: stroke-width
protected stroke_width mCSS1538 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1538)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1539 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1539)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol540);
Load(mSymbol541);
Load(mSymbol542);
}
public void LoadCSS(){
Load(mCSS1531);
Load(mCSS1532);
Load(mCSS1533);
Load(mCSS1534);
Load(mCSS1535);
Load(mCSS1536);
Load(mCSS1537);
Load(mCSS1538);
Load(mCSS1539);
}
public void LoadFilters(){
Load(mFilter420);
}
};//Rules end (mRules427)
protected Rule mRules428 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter421 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol543 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1540 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1540)
//CSS: stroke-width
protected stroke_width mCSS1541 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1541)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol544 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1542 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1542)
//CSS: stroke-width
protected stroke_width mCSS1543 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1543)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1544 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1544)
//CSS: stroke-linecap
protected stroke_linecap mCSS1545 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1545)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol545 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1546 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","salmon");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1546)
//CSS: stroke-width
protected stroke_width mCSS1547 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1547)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1548 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1548)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1549 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1549)
//CSS: stroke-linecap
protected stroke_linecap mCSS1550 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1550)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol543);
Load(mSymbol544);
Load(mSymbol545);
}
public void LoadCSS(){
Load(mCSS1540);
Load(mCSS1541);
Load(mCSS1542);
Load(mCSS1543);
Load(mCSS1544);
Load(mCSS1545);
Load(mCSS1546);
Load(mCSS1547);
Load(mCSS1548);
Load(mCSS1549);
Load(mCSS1550);
}
public void LoadFilters(){
Load(mFilter421);
}
};//Rules end (mRules428)
protected Rule mRules429 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter422 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol546 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1551 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1551)
//CSS: stroke-width
protected stroke_width mCSS1552 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1552)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol547 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1553 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1553)
//CSS: stroke-width
protected stroke_width mCSS1554 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1554)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1555 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1555)
//CSS: stroke-linecap
protected stroke_linecap mCSS1556 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1556)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol548 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1557 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1557)
//CSS: stroke-width
protected stroke_width mCSS1558 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1558)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1559 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1559)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1560 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1560)
//CSS: stroke-linecap
protected stroke_linecap mCSS1561 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1561)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol546);
Load(mSymbol547);
Load(mSymbol548);
}
public void LoadCSS(){
Load(mCSS1551);
Load(mCSS1552);
Load(mCSS1553);
Load(mCSS1554);
Load(mCSS1555);
Load(mCSS1556);
Load(mCSS1557);
Load(mCSS1558);
Load(mCSS1559);
Load(mCSS1560);
Load(mCSS1561);
}
public void LoadFilters(){
Load(mFilter422);
}
};//Rules end (mRules429)
protected Rule mRules430 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter423 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_cycleway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol549 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1562 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1562)
//CSS: stroke-width
protected stroke_width mCSS1563 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1563)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol550 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1564 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1564)
//CSS: stroke-width
protected stroke_width mCSS1565 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1565)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1566 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1566)
//CSS: stroke-linecap
protected stroke_linecap mCSS1567 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1567)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol551 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1568 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","blue");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1568)
//CSS: stroke-width
protected stroke_width mCSS1569 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1569)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1570 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","1,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1570)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1571 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1571)
//CSS: stroke-linecap
protected stroke_linecap mCSS1572 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1572)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol549);
Load(mSymbol550);
Load(mSymbol551);
}
public void LoadCSS(){
Load(mCSS1562);
Load(mCSS1563);
Load(mCSS1564);
Load(mCSS1565);
Load(mCSS1566);
Load(mCSS1567);
Load(mCSS1568);
Load(mCSS1569);
Load(mCSS1570);
Load(mCSS1571);
Load(mCSS1572);
}
public void LoadFilters(){
Load(mFilter423);
}
};//Rules end (mRules430)
protected Rule mRules431 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter424 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_byway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol552 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1573 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1573)
//CSS: stroke-width
protected stroke_width mCSS1574 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1574)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol553 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1575 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1575)
//CSS: stroke-width
protected stroke_width mCSS1576 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1576)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1577 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1577)
//CSS: stroke-linecap
protected stroke_linecap mCSS1578 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1578)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol554 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1579 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ffcc00");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1579)
//CSS: stroke-width
protected stroke_width mCSS1580 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1580)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1581 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","3,4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1581)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1582 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1582)
//CSS: stroke-linecap
protected stroke_linecap mCSS1583 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1583)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol552);
Load(mSymbol553);
Load(mSymbol554);
}
public void LoadCSS(){
Load(mCSS1573);
Load(mCSS1574);
Load(mCSS1575);
Load(mCSS1576);
Load(mCSS1577);
Load(mCSS1578);
Load(mCSS1579);
Load(mCSS1580);
Load(mCSS1581);
Load(mCSS1582);
Load(mCSS1583);
}
public void LoadFilters(){
Load(mFilter424);
}
};//Rules end (mRules431)
public void LoadRules(){
Load(mRules420);
Load(mRules421);
Load(mRules422);
Load(mRules423);
Load(mRules424);
Load(mRules425);
Load(mRules426);
Load(mRules427);
Load(mRules428);
Load(mRules429);
Load(mRules430);
Load(mRules431);
}
};//noncased_ways_bridges end
protected Style mmwaybridge_layer0_casing = new Style ("Style"){
// DEBUG :adding mwaybridge_layer0_casing
protected Rule mRules432 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter425 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol555 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1584 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1584)
//CSS: stroke-width
protected stroke_width mCSS1585 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1585)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol555);
}
public void LoadCSS(){
Load(mCSS1584);
Load(mCSS1585);
}
public void LoadFilters(){
Load(mFilter425);
}
};//Rules end (mRules432)
protected Rule mRules433 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter426 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol556 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1586 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1586)
//CSS: stroke-width
protected stroke_width mCSS1587 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1587)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol556);
}
public void LoadCSS(){
Load(mCSS1586);
Load(mCSS1587);
}
public void LoadFilters(){
Load(mFilter426);
}
};//Rules end (mRules433)
protected Rule mRules434 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter427 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol557 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1588 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1588)
//CSS: stroke-width
protected stroke_width mCSS1589 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1589)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol557);
}
public void LoadCSS(){
Load(mCSS1588);
Load(mCSS1589);
}
public void LoadFilters(){
Load(mFilter427);
}
};//Rules end (mRules434)
public void LoadRules(){
Load(mRules432);
Load(mRules433);
Load(mRules434);
}
};//mwaybridge_layer0_casing end
protected Style mmwaybridge_layer0_fill = new Style ("Style"){
// DEBUG :adding mwaybridge_layer0_fill
protected Rule mRules435 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter428 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol558 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1590 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1590)
//CSS: stroke-width
protected stroke_width mCSS1591 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1591)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1592 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1592)
//CSS: stroke-linecap
protected stroke_linecap mCSS1593 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1593)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol558);
}
public void LoadCSS(){
Load(mCSS1590);
Load(mCSS1591);
Load(mCSS1592);
Load(mCSS1593);
}
public void LoadFilters(){
Load(mFilter428);
}
};//Rules end (mRules435)
protected Rule mRules436 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter429 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol559 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1594 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1594)
//CSS: stroke-width
protected stroke_width mCSS1595 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1595)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1596 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1596)
//CSS: stroke-linecap
protected stroke_linecap mCSS1597 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1597)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol559);
}
public void LoadCSS(){
Load(mCSS1594);
Load(mCSS1595);
Load(mCSS1596);
Load(mCSS1597);
}
public void LoadFilters(){
Load(mFilter429);
}
};//Rules end (mRules436)
protected Rule mRules437 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter430 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol560 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1598 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1598)
//CSS: stroke-width
protected stroke_width mCSS1599 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1599)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1600 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1600)
//CSS: stroke-linecap
protected stroke_linecap mCSS1601 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1601)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol560);
}
public void LoadCSS(){
Load(mCSS1598);
Load(mCSS1599);
Load(mCSS1600);
Load(mCSS1601);
}
public void LoadFilters(){
Load(mFilter430);
}
};//Rules end (mRules437)
public void LoadRules(){
Load(mRules435);
Load(mRules436);
Load(mRules437);
}
};//mwaybridge_layer0_fill end
protected Style mmwaybridge_layer1_casing = new Style ("Style"){
// DEBUG :adding mwaybridge_layer1_casing
protected Rule mRules438 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter431 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol561 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1602 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1602)
//CSS: stroke-width
protected stroke_width mCSS1603 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1603)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol561);
}
public void LoadCSS(){
Load(mCSS1602);
Load(mCSS1603);
}
public void LoadFilters(){
Load(mFilter431);
}
};//Rules end (mRules438)
protected Rule mRules439 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter432 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol562 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1604 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1604)
//CSS: stroke-width
protected stroke_width mCSS1605 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1605)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol562);
}
public void LoadCSS(){
Load(mCSS1604);
Load(mCSS1605);
}
public void LoadFilters(){
Load(mFilter432);
}
};//Rules end (mRules439)
protected Rule mRules440 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter433 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol563 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1606 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1606)
//CSS: stroke-width
protected stroke_width mCSS1607 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1607)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol563);
}
public void LoadCSS(){
Load(mCSS1606);
Load(mCSS1607);
}
public void LoadFilters(){
Load(mFilter433);
}
};//Rules end (mRules440)
public void LoadRules(){
Load(mRules438);
Load(mRules439);
Load(mRules440);
}
};//mwaybridge_layer1_casing end
protected Style mmwaybridge_layer1_fill = new Style ("Style"){
// DEBUG :adding mwaybridge_layer1_fill
protected Rule mRules441 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter434 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol564 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1608 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1608)
//CSS: stroke-width
protected stroke_width mCSS1609 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1609)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1610 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1610)
//CSS: stroke-linecap
protected stroke_linecap mCSS1611 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1611)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol564);
}
public void LoadCSS(){
Load(mCSS1608);
Load(mCSS1609);
Load(mCSS1610);
Load(mCSS1611);
}
public void LoadFilters(){
Load(mFilter434);
}
};//Rules end (mRules441)
protected Rule mRules442 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter435 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol565 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1612 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1612)
//CSS: stroke-width
protected stroke_width mCSS1613 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1613)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1614 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1614)
//CSS: stroke-linecap
protected stroke_linecap mCSS1615 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1615)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol565);
}
public void LoadCSS(){
Load(mCSS1612);
Load(mCSS1613);
Load(mCSS1614);
Load(mCSS1615);
}
public void LoadFilters(){
Load(mFilter435);
}
};//Rules end (mRules442)
protected Rule mRules443 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter436 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol566 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1616 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1616)
//CSS: stroke-width
protected stroke_width mCSS1617 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1617)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1618 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1618)
//CSS: stroke-linecap
protected stroke_linecap mCSS1619 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1619)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol566);
}
public void LoadCSS(){
Load(mCSS1616);
Load(mCSS1617);
Load(mCSS1618);
Load(mCSS1619);
}
public void LoadFilters(){
Load(mFilter436);
}
};//Rules end (mRules443)
public void LoadRules(){
Load(mRules441);
Load(mRules442);
Load(mRules443);
}
};//mwaybridge_layer1_fill end
protected Style mmwaybridge_layer2_casing = new Style ("Style"){
// DEBUG :adding mwaybridge_layer2_casing
protected Rule mRules444 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter437 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol567 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1620 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1620)
//CSS: stroke-width
protected stroke_width mCSS1621 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1621)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol567);
}
public void LoadCSS(){
Load(mCSS1620);
Load(mCSS1621);
}
public void LoadFilters(){
Load(mFilter437);
}
};//Rules end (mRules444)
protected Rule mRules445 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter438 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol568 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1622 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1622)
//CSS: stroke-width
protected stroke_width mCSS1623 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1623)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol568);
}
public void LoadCSS(){
Load(mCSS1622);
Load(mCSS1623);
}
public void LoadFilters(){
Load(mFilter438);
}
};//Rules end (mRules445)
protected Rule mRules446 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter439 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol569 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1624 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1624)
//CSS: stroke-width
protected stroke_width mCSS1625 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1625)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol569);
}
public void LoadCSS(){
Load(mCSS1624);
Load(mCSS1625);
}
public void LoadFilters(){
Load(mFilter439);
}
};//Rules end (mRules446)
public void LoadRules(){
Load(mRules444);
Load(mRules445);
Load(mRules446);
}
};//mwaybridge_layer2_casing end
protected Style mmwaybridge_layer2_fill = new Style ("Style"){
// DEBUG :adding mwaybridge_layer2_fill
protected Rule mRules447 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter440 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol570 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1626 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1626)
//CSS: stroke-width
protected stroke_width mCSS1627 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1627)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1628 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1628)
//CSS: stroke-linecap
protected stroke_linecap mCSS1629 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1629)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol570);
}
public void LoadCSS(){
Load(mCSS1626);
Load(mCSS1627);
Load(mCSS1628);
Load(mCSS1629);
}
public void LoadFilters(){
Load(mFilter440);
}
};//Rules end (mRules447)
protected Rule mRules448 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter441 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol571 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1630 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1630)
//CSS: stroke-width
protected stroke_width mCSS1631 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1631)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1632 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1632)
//CSS: stroke-linecap
protected stroke_linecap mCSS1633 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1633)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol571);
}
public void LoadCSS(){
Load(mCSS1630);
Load(mCSS1631);
Load(mCSS1632);
Load(mCSS1633);
}
public void LoadFilters(){
Load(mFilter441);
}
};//Rules end (mRules448)
protected Rule mRules449 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter442 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol572 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1634 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1634)
//CSS: stroke-width
protected stroke_width mCSS1635 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1635)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1636 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1636)
//CSS: stroke-linecap
protected stroke_linecap mCSS1637 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1637)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol572);
}
public void LoadCSS(){
Load(mCSS1634);
Load(mCSS1635);
Load(mCSS1636);
Load(mCSS1637);
}
public void LoadFilters(){
Load(mFilter442);
}
};//Rules end (mRules449)
public void LoadRules(){
Load(mRules447);
Load(mRules448);
Load(mRules449);
}
};//mwaybridge_layer2_fill end
protected Style mmwaybridge_layer3_casing = new Style ("Style"){
// DEBUG :adding mwaybridge_layer3_casing
protected Rule mRules450 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter443 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol573 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1638 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1638)
//CSS: stroke-width
protected stroke_width mCSS1639 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1639)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol573);
}
public void LoadCSS(){
Load(mCSS1638);
Load(mCSS1639);
}
public void LoadFilters(){
Load(mFilter443);
}
};//Rules end (mRules450)
protected Rule mRules451 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter444 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol574 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1640 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1640)
//CSS: stroke-width
protected stroke_width mCSS1641 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1641)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol574);
}
public void LoadCSS(){
Load(mCSS1640);
Load(mCSS1641);
}
public void LoadFilters(){
Load(mFilter444);
}
};//Rules end (mRules451)
protected Rule mRules452 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter445 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol575 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1642 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1642)
//CSS: stroke-width
protected stroke_width mCSS1643 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1643)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol575);
}
public void LoadCSS(){
Load(mCSS1642);
Load(mCSS1643);
}
public void LoadFilters(){
Load(mFilter445);
}
};//Rules end (mRules452)
public void LoadRules(){
Load(mRules450);
Load(mRules451);
Load(mRules452);
}
};//mwaybridge_layer3_casing end
protected Style mmwaybridge_layer3_fill = new Style ("Style"){
// DEBUG :adding mwaybridge_layer3_fill
protected Rule mRules453 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter446 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol576 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1644 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1644)
//CSS: stroke-width
protected stroke_width mCSS1645 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1645)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1646 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1646)
//CSS: stroke-linecap
protected stroke_linecap mCSS1647 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1647)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol576);
}
public void LoadCSS(){
Load(mCSS1644);
Load(mCSS1645);
Load(mCSS1646);
Load(mCSS1647);
}
public void LoadFilters(){
Load(mFilter446);
}
};//Rules end (mRules453)
protected Rule mRules454 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter447 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol577 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1648 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1648)
//CSS: stroke-width
protected stroke_width mCSS1649 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1649)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1650 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1650)
//CSS: stroke-linecap
protected stroke_linecap mCSS1651 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1651)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol577);
}
public void LoadCSS(){
Load(mCSS1648);
Load(mCSS1649);
Load(mCSS1650);
Load(mCSS1651);
}
public void LoadFilters(){
Load(mFilter447);
}
};//Rules end (mRules454)
protected Rule mRules455 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter448 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol578 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1652 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1652)
//CSS: stroke-width
protected stroke_width mCSS1653 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1653)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1654 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1654)
//CSS: stroke-linecap
protected stroke_linecap mCSS1655 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1655)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol578);
}
public void LoadCSS(){
Load(mCSS1652);
Load(mCSS1653);
Load(mCSS1654);
Load(mCSS1655);
}
public void LoadFilters(){
Load(mFilter448);
}
};//Rules end (mRules455)
public void LoadRules(){
Load(mRules453);
Load(mRules454);
Load(mRules455);
}
};//mwaybridge_layer3_fill end
protected Style mmwaybridge_layer4_casing = new Style ("Style"){
// DEBUG :adding mwaybridge_layer4_casing
protected Rule mRules456 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter449 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol579 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1656 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1656)
//CSS: stroke-width
protected stroke_width mCSS1657 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1657)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol579);
}
public void LoadCSS(){
Load(mCSS1656);
Load(mCSS1657);
}
public void LoadFilters(){
Load(mFilter449);
}
};//Rules end (mRules456)
protected Rule mRules457 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter450 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol580 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1658 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1658)
//CSS: stroke-width
protected stroke_width mCSS1659 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1659)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol580);
}
public void LoadCSS(){
Load(mCSS1658);
Load(mCSS1659);
}
public void LoadFilters(){
Load(mFilter450);
}
};//Rules end (mRules457)
protected Rule mRules458 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter451 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol581 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1660 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1660)
//CSS: stroke-width
protected stroke_width mCSS1661 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1661)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol581);
}
public void LoadCSS(){
Load(mCSS1660);
Load(mCSS1661);
}
public void LoadFilters(){
Load(mFilter451);
}
};//Rules end (mRules458)
public void LoadRules(){
Load(mRules456);
Load(mRules457);
Load(mRules458);
}
};//mwaybridge_layer4_casing end
protected Style mmwaybridge_layer4_fill = new Style ("Style"){
// DEBUG :adding mwaybridge_layer4_fill
protected Rule mRules459 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter452 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol582 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1662 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1662)
//CSS: stroke-width
protected stroke_width mCSS1663 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1663)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1664 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1664)
//CSS: stroke-linecap
protected stroke_linecap mCSS1665 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1665)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol582);
}
public void LoadCSS(){
Load(mCSS1662);
Load(mCSS1663);
Load(mCSS1664);
Load(mCSS1665);
}
public void LoadFilters(){
Load(mFilter452);
}
};//Rules end (mRules459)
protected Rule mRules460 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter453 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol583 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1666 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1666)
//CSS: stroke-width
protected stroke_width mCSS1667 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1667)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1668 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1668)
//CSS: stroke-linecap
protected stroke_linecap mCSS1669 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1669)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol583);
}
public void LoadCSS(){
Load(mCSS1666);
Load(mCSS1667);
Load(mCSS1668);
Load(mCSS1669);
}
public void LoadFilters(){
Load(mFilter453);
}
};//Rules end (mRules460)
protected Rule mRules461 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter454 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol584 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1670 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1670)
//CSS: stroke-width
protected stroke_width mCSS1671 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1671)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1672 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1672)
//CSS: stroke-linecap
protected stroke_linecap mCSS1673 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1673)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol584);
}
public void LoadCSS(){
Load(mCSS1670);
Load(mCSS1671);
Load(mCSS1672);
Load(mCSS1673);
}
public void LoadFilters(){
Load(mFilter454);
}
};//Rules end (mRules461)
public void LoadRules(){
Load(mRules459);
Load(mRules460);
Load(mRules461);
}
};//mwaybridge_layer4_fill end
protected Style mmwaybridge_layer5_casing = new Style ("Style"){
// DEBUG :adding mwaybridge_layer5_casing
protected Rule mRules462 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter455 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol585 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1674 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1674)
//CSS: stroke-width
protected stroke_width mCSS1675 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","6.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1675)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol585);
}
public void LoadCSS(){
Load(mCSS1674);
Load(mCSS1675);
}
public void LoadFilters(){
Load(mFilter455);
}
};//Rules end (mRules462)
protected Rule mRules463 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter456 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol586 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1676 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1676)
//CSS: stroke-width
protected stroke_width mCSS1677 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1677)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol586);
}
public void LoadCSS(){
Load(mCSS1676);
Load(mCSS1677);
}
public void LoadFilters(){
Load(mFilter456);
}
};//Rules end (mRules463)
protected Rule mRules464 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter457 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol587 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1678 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1678)
//CSS: stroke-width
protected stroke_width mCSS1679 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1679)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol587);
}
public void LoadCSS(){
Load(mCSS1678);
Load(mCSS1679);
}
public void LoadFilters(){
Load(mFilter457);
}
};//Rules end (mRules464)
public void LoadRules(){
Load(mRules462);
Load(mRules463);
Load(mRules464);
}
};//mwaybridge_layer5_casing end
protected Style mmwaybridge_layer5_fill = new Style ("Style"){
// DEBUG :adding mwaybridge_layer5_fill
protected Rule mRules465 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter458 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol588 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1680 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1680)
//CSS: stroke-width
protected stroke_width mCSS1681 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","5.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1681)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1682 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1682)
//CSS: stroke-linecap
protected stroke_linecap mCSS1683 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1683)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol588);
}
public void LoadCSS(){
Load(mCSS1680);
Load(mCSS1681);
Load(mCSS1682);
Load(mCSS1683);
}
public void LoadFilters(){
Load(mFilter458);
}
};//Rules end (mRules465)
protected Rule mRules466 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter459 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol589 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1684 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1684)
//CSS: stroke-width
protected stroke_width mCSS1685 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1685)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1686 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1686)
//CSS: stroke-linecap
protected stroke_linecap mCSS1687 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1687)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol589);
}
public void LoadCSS(){
Load(mCSS1684);
Load(mCSS1685);
Load(mCSS1686);
Load(mCSS1687);
}
public void LoadFilters(){
Load(mFilter459);
}
};//Rules end (mRules466)
protected Rule mRules467 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter460 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol590 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1688 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1688)
//CSS: stroke-width
protected stroke_width mCSS1689 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","10");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1689)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1690 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1690)
//CSS: stroke-linecap
protected stroke_linecap mCSS1691 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1691)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol590);
}
public void LoadCSS(){
Load(mCSS1688);
Load(mCSS1689);
Load(mCSS1690);
Load(mCSS1691);
}
public void LoadFilters(){
Load(mFilter460);
}
};//Rules end (mRules467)
public void LoadRules(){
Load(mRules465);
Load(mRules466);
Load(mRules467);
}
};//mwaybridge_layer5_fill end
protected Style mprimarybridge_layer0_casing = new Style ("Style"){
// DEBUG :adding primarybridge_layer0_casing
protected Rule mRules468 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter461 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol591 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1692 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1692)
//CSS: stroke-width
protected stroke_width mCSS1693 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1693)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol591);
}
public void LoadCSS(){
Load(mCSS1692);
Load(mCSS1693);
}
public void LoadFilters(){
Load(mFilter461);
}
};//Rules end (mRules468)
protected Rule mRules469 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter462 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol592 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1694 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1694)
//CSS: stroke-width
protected stroke_width mCSS1695 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1695)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol592);
}
public void LoadCSS(){
Load(mCSS1694);
Load(mCSS1695);
}
public void LoadFilters(){
Load(mFilter462);
}
};//Rules end (mRules469)
protected Rule mRules470 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter463 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol593 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1696 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1696)
//CSS: stroke-width
protected stroke_width mCSS1697 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1697)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol593);
}
public void LoadCSS(){
Load(mCSS1696);
Load(mCSS1697);
}
public void LoadFilters(){
Load(mFilter463);
}
};//Rules end (mRules470)
public void LoadRules(){
Load(mRules468);
Load(mRules469);
Load(mRules470);
}
};//primarybridge_layer0_casing end
protected Style mprimarybridge_layer0_fill = new Style ("Style"){
// DEBUG :adding primarybridge_layer0_fill
protected Rule mRules471 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter464 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol594 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1698 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1698)
//CSS: stroke-width
protected stroke_width mCSS1699 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1699)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1700 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1700)
//CSS: stroke-linecap
protected stroke_linecap mCSS1701 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1701)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol594);
}
public void LoadCSS(){
Load(mCSS1698);
Load(mCSS1699);
Load(mCSS1700);
Load(mCSS1701);
}
public void LoadFilters(){
Load(mFilter464);
}
};//Rules end (mRules471)
protected Rule mRules472 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter465 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol595 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1702 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1702)
//CSS: stroke-width
protected stroke_width mCSS1703 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1703)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1704 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1704)
//CSS: stroke-linecap
protected stroke_linecap mCSS1705 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1705)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol595);
}
public void LoadCSS(){
Load(mCSS1702);
Load(mCSS1703);
Load(mCSS1704);
Load(mCSS1705);
}
public void LoadFilters(){
Load(mFilter465);
}
};//Rules end (mRules472)
protected Rule mRules473 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter466 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol596 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1706 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1706)
//CSS: stroke-width
protected stroke_width mCSS1707 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1707)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1708 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1708)
//CSS: stroke-linecap
protected stroke_linecap mCSS1709 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1709)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol596);
}
public void LoadCSS(){
Load(mCSS1706);
Load(mCSS1707);
Load(mCSS1708);
Load(mCSS1709);
}
public void LoadFilters(){
Load(mFilter466);
}
};//Rules end (mRules473)
public void LoadRules(){
Load(mRules471);
Load(mRules472);
Load(mRules473);
}
};//primarybridge_layer0_fill end
protected Style mprimarybridge_layer1_casing = new Style ("Style"){
// DEBUG :adding primarybridge_layer1_casing
protected Rule mRules474 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter467 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol597 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1710 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1710)
//CSS: stroke-width
protected stroke_width mCSS1711 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1711)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol597);
}
public void LoadCSS(){
Load(mCSS1710);
Load(mCSS1711);
}
public void LoadFilters(){
Load(mFilter467);
}
};//Rules end (mRules474)
protected Rule mRules475 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter468 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol598 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1712 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1712)
//CSS: stroke-width
protected stroke_width mCSS1713 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1713)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol598);
}
public void LoadCSS(){
Load(mCSS1712);
Load(mCSS1713);
}
public void LoadFilters(){
Load(mFilter468);
}
};//Rules end (mRules475)
protected Rule mRules476 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter469 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol599 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1714 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1714)
//CSS: stroke-width
protected stroke_width mCSS1715 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1715)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol599);
}
public void LoadCSS(){
Load(mCSS1714);
Load(mCSS1715);
}
public void LoadFilters(){
Load(mFilter469);
}
};//Rules end (mRules476)
public void LoadRules(){
Load(mRules474);
Load(mRules475);
Load(mRules476);
}
};//primarybridge_layer1_casing end
protected Style mprimarybridge_layer1_fill = new Style ("Style"){
// DEBUG :adding primarybridge_layer1_fill
protected Rule mRules477 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter470 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol600 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1716 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1716)
//CSS: stroke-width
protected stroke_width mCSS1717 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1717)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1718 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1718)
//CSS: stroke-linecap
protected stroke_linecap mCSS1719 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1719)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol600);
}
public void LoadCSS(){
Load(mCSS1716);
Load(mCSS1717);
Load(mCSS1718);
Load(mCSS1719);
}
public void LoadFilters(){
Load(mFilter470);
}
};//Rules end (mRules477)
protected Rule mRules478 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter471 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol601 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1720 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1720)
//CSS: stroke-width
protected stroke_width mCSS1721 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1721)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1722 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1722)
//CSS: stroke-linecap
protected stroke_linecap mCSS1723 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1723)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol601);
}
public void LoadCSS(){
Load(mCSS1720);
Load(mCSS1721);
Load(mCSS1722);
Load(mCSS1723);
}
public void LoadFilters(){
Load(mFilter471);
}
};//Rules end (mRules478)
protected Rule mRules479 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter472 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol602 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1724 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1724)
//CSS: stroke-width
protected stroke_width mCSS1725 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1725)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1726 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1726)
//CSS: stroke-linecap
protected stroke_linecap mCSS1727 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1727)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol602);
}
public void LoadCSS(){
Load(mCSS1724);
Load(mCSS1725);
Load(mCSS1726);
Load(mCSS1727);
}
public void LoadFilters(){
Load(mFilter472);
}
};//Rules end (mRules479)
public void LoadRules(){
Load(mRules477);
Load(mRules478);
Load(mRules479);
}
};//primarybridge_layer1_fill end
protected Style mprimarybridge_layer2_casing = new Style ("Style"){
// DEBUG :adding primarybridge_layer2_casing
protected Rule mRules480 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter473 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol603 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1728 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1728)
//CSS: stroke-width
protected stroke_width mCSS1729 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","8");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1729)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol603);
}
public void LoadCSS(){
Load(mCSS1728);
Load(mCSS1729);
}
public void LoadFilters(){
Load(mFilter473);
}
};//Rules end (mRules480)
protected Rule mRules481 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter474 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol604 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1730 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1730)
//CSS: stroke-width
protected stroke_width mCSS1731 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","11");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1731)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol604);
}
public void LoadCSS(){
Load(mCSS1730);
Load(mCSS1731);
}
public void LoadFilters(){
Load(mFilter474);
}
};//Rules end (mRules481)
protected Rule mRules482 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter475 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol605 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1732 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1732)
//CSS: stroke-width
protected stroke_width mCSS1733 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","16");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1733)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol605);
}
public void LoadCSS(){
Load(mCSS1732);
Load(mCSS1733);
}
public void LoadFilters(){
Load(mFilter475);
}
};//Rules end (mRules482)
public void LoadRules(){
Load(mRules480);
Load(mRules481);
Load(mRules482);
}
};//primarybridge_layer2_casing end
protected Style mprimarybridge_layer2_fill = new Style ("Style"){
// DEBUG :adding primarybridge_layer2_fill
protected Rule mRules483 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter476 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol606 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1734 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1734)
//CSS: stroke-width
protected stroke_width mCSS1735 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","7");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1735)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1736 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1736)
//CSS: stroke-linecap
protected stroke_linecap mCSS1737 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1737)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol606);
}
public void LoadCSS(){
Load(mCSS1734);
Load(mCSS1735);
Load(mCSS1736);
Load(mCSS1737);
}
public void LoadFilters(){
Load(mFilter476);
}
};//Rules end (mRules483)
protected Rule mRules484 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter477 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol607 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1738 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1738)
//CSS: stroke-width
protected stroke_width mCSS1739 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","9.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1739)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1740 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1740)
//CSS: stroke-linecap
protected stroke_linecap mCSS1741 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1741)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol607);
}
public void LoadCSS(){
Load(mCSS1738);
Load(mCSS1739);
Load(mCSS1740);
Load(mCSS1741);
}
public void LoadFilters(){
Load(mFilter477);
}
};//Rules end (mRules484)
protected Rule mRules485 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter478 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol608 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1742 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1742)
//CSS: stroke-width
protected stroke_width mCSS1743 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","14.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1743)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1744 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1744)
//CSS: stroke-linecap
protected stroke_linecap mCSS1745 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1745)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol608);
}
public void LoadCSS(){
Load(mCSS1742);
Load(mCSS1743);
Load(mCSS1744);
Load(mCSS1745);
}
public void LoadFilters(){
Load(mFilter478);
}
};//Rules end (mRules485)
public void LoadRules(){
Load(mRules483);
Load(mRules484);
Load(mRules485);
}
};//primarybridge_layer2_fill end
protected Style mroads = new Style ("Style"){
// DEBUG :adding roads
protected Rule mRules486 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter479 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol609 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1746 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1746)
//CSS: stroke-width
protected stroke_width mCSS1747 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1747)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol609);
}
public void LoadCSS(){
Load(mCSS1746);
Load(mCSS1747);
}
public void LoadFilters(){
Load(mFilter479);
}
};//Rules end (mRules486)
protected Rule mRules487 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter480 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol610 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1748 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1748)
//CSS: stroke-width
protected stroke_width mCSS1749 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1749)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol610);
}
public void LoadCSS(){
Load(mCSS1748);
Load(mCSS1749);
}
public void LoadFilters(){
Load(mFilter480);
}
};//Rules end (mRules487)
protected Rule mRules488 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter481 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol611 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1750 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1750)
//CSS: stroke-width
protected stroke_width mCSS1751 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1751)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol611);
}
public void LoadCSS(){
Load(mCSS1750);
Load(mCSS1751);
}
public void LoadFilters(){
Load(mFilter481);
}
};//Rules end (mRules488)
protected Rule mRules489 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter482 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol612 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1752 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1752)
//CSS: stroke-width
protected stroke_width mCSS1753 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1753)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol612);
}
public void LoadCSS(){
Load(mCSS1752);
Load(mCSS1753);
}
public void LoadFilters(){
Load(mFilter482);
}
};//Rules end (mRules489)
protected Rule mRules490 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter483 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol613 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1754 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#809bc0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1754)
//CSS: stroke-width
protected stroke_width mCSS1755 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1755)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol613);
}
public void LoadCSS(){
Load(mCSS1754);
Load(mCSS1755);
}
public void LoadFilters(){
Load(mFilter483);
}
};//Rules end (mRules490)
protected Rule mRules491 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter484 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol614 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1756 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#a9dba9");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1756)
//CSS: stroke-width
protected stroke_width mCSS1757 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1757)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol614);
}
public void LoadCSS(){
Load(mCSS1756);
Load(mCSS1757);
}
public void LoadFilters(){
Load(mFilter484);
}
};//Rules end (mRules491)
protected Rule mRules492 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter485 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol615 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1758 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#97d397");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1758)
//CSS: stroke-width
protected stroke_width mCSS1759 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1759)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol615);
}
public void LoadCSS(){
Load(mCSS1758);
Load(mCSS1759);
}
public void LoadFilters(){
Load(mFilter485);
}
};//Rules end (mRules492)
protected Rule mRules493 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter486 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol616 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1760 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#97d397");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1760)
//CSS: stroke-width
protected stroke_width mCSS1761 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1761)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol616);
}
public void LoadCSS(){
Load(mCSS1760);
Load(mCSS1761);
}
public void LoadFilters(){
Load(mFilter486);
}
};//Rules end (mRules493)
protected Rule mRules494 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter487 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol617 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1762 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#97d397");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1762)
//CSS: stroke-width
protected stroke_width mCSS1763 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1763)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol617);
}
public void LoadCSS(){
Load(mCSS1762);
Load(mCSS1763);
}
public void LoadFilters(){
Load(mFilter487);
}
};//Rules end (mRules494)
protected Rule mRules495 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter488 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol618 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1764 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1764)
//CSS: stroke-width
protected stroke_width mCSS1765 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1765)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol618);
}
public void LoadCSS(){
Load(mCSS1764);
Load(mCSS1765);
}
public void LoadFilters(){
Load(mFilter488);
}
};//Rules end (mRules495)
protected Rule mRules496 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter489 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol619 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1766 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1766)
//CSS: stroke-width
protected stroke_width mCSS1767 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1767)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol619);
}
public void LoadCSS(){
Load(mCSS1766);
Load(mCSS1767);
}
public void LoadFilters(){
Load(mFilter489);
}
};//Rules end (mRules496)
protected Rule mRules497 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter490 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol620 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1768 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1768)
//CSS: stroke-width
protected stroke_width mCSS1769 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1769)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol620);
}
public void LoadCSS(){
Load(mCSS1768);
Load(mCSS1769);
}
public void LoadFilters(){
Load(mFilter490);
}
};//Rules end (mRules497)
protected Rule mRules498 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter491 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol621 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1770 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ec989a");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1770)
//CSS: stroke-width
protected stroke_width mCSS1771 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1771)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol621);
}
public void LoadCSS(){
Load(mCSS1770);
Load(mCSS1771);
}
public void LoadFilters(){
Load(mFilter491);
}
};//Rules end (mRules498)
protected Rule mRules499 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter492 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol622 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1772 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fecc8b");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1772)
//CSS: stroke-width
protected stroke_width mCSS1773 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1773)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol622);
}
public void LoadCSS(){
Load(mCSS1772);
Load(mCSS1773);
}
public void LoadFilters(){
Load(mFilter492);
}
};//Rules end (mRules499)
protected Rule mRules500 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter493 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol623 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1774 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fecc8b");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1774)
//CSS: stroke-width
protected stroke_width mCSS1775 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1775)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol623);
}
public void LoadCSS(){
Load(mCSS1774);
Load(mCSS1775);
}
public void LoadFilters(){
Load(mFilter493);
}
};//Rules end (mRules500)
protected Rule mRules501 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter494 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol624 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1776 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1776)
//CSS: stroke-width
protected stroke_width mCSS1777 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1777)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol624);
}
public void LoadCSS(){
Load(mCSS1776);
Load(mCSS1777);
}
public void LoadFilters(){
Load(mFilter494);
}
};//Rules end (mRules501)
protected Rule mRules502 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter495 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol625 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1778 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1778)
//CSS: stroke-width
protected stroke_width mCSS1779 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1779)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol625);
}
public void LoadCSS(){
Load(mCSS1778);
Load(mCSS1779);
}
public void LoadFilters(){
Load(mFilter495);
}
};//Rules end (mRules502)
protected Rule mRules503 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter496 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol626 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1780 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1780)
//CSS: stroke-width
protected stroke_width mCSS1781 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1781)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1782 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1782)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol626);
}
public void LoadCSS(){
Load(mCSS1780);
Load(mCSS1781);
Load(mCSS1782);
}
public void LoadFilters(){
Load(mFilter496);
}
};//Rules end (mRules503)
protected Rule mRules504 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter497 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol627 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1783 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#ccc");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1783)
//CSS: stroke-width
protected stroke_width mCSS1784 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1784)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol627);
}
public void LoadCSS(){
Load(mCSS1783);
Load(mCSS1784);
}
public void LoadFilters(){
Load(mFilter497);
}
};//Rules end (mRules504)
protected Rule mRules505 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter498 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol628 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1785 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1785)
//CSS: stroke-width
protected stroke_width mCSS1786 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1786)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol628);
}
public void LoadCSS(){
Load(mCSS1785);
Load(mCSS1786);
}
public void LoadFilters(){
Load(mFilter498);
}
};//Rules end (mRules505)
protected Rule mRules506 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter499 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol629 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1787 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1787)
//CSS: stroke-width
protected stroke_width mCSS1788 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1788)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1789 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","5,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1789)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol629);
}
public void LoadCSS(){
Load(mCSS1787);
Load(mCSS1788);
Load(mCSS1789);
}
public void LoadFilters(){
Load(mFilter499);
}
};//Rules end (mRules506)
protected Rule mRules507 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter500 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol630 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1790 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1790)
//CSS: stroke-width
protected stroke_width mCSS1791 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1791)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol630);
}
public void LoadCSS(){
Load(mCSS1790);
Load(mCSS1791);
}
public void LoadFilters(){
Load(mFilter500);
}
};//Rules end (mRules507)
protected Rule mRules508 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter501 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_preserved))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol631 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1792 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aaa");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1792)
//CSS: stroke-width
protected stroke_width mCSS1793 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1793)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1794 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1794)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol631);
}
public void LoadCSS(){
Load(mCSS1792);
Load(mCSS1793);
Load(mCSS1794);
}
public void LoadFilters(){
Load(mFilter501);
}
};//Rules end (mRules508)
protected Rule mRules509 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter502 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_preserved))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol632 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1795 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#999999");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1795)
//CSS: stroke-width
protected stroke_width mCSS1796 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1796)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1797 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1797)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol633 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1798 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1798)
//CSS: stroke-width
protected stroke_width mCSS1799 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1799)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1800 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1800)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1801 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,1,8,1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1801)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol632);
Load(mSymbol633);
}
public void LoadCSS(){
Load(mCSS1795);
Load(mCSS1796);
Load(mCSS1797);
Load(mCSS1798);
Load(mCSS1799);
Load(mCSS1800);
Load(mCSS1801);
}
public void LoadFilters(){
Load(mFilter502);
}
};//Rules end (mRules509)
protected Rule mRules510 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter503 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_monorail))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol634 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1802 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#fff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1802)
//CSS: stroke-width
protected stroke_width mCSS1803 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1803)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1804 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1804)
//CSS: stroke-linecap
protected stroke_linecap mCSS1805 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1805)
//CSS: stroke-opacity
protected stroke_opacity mCSS1806 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1806)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol635 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1807 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#777");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1807)
//CSS: stroke-width
protected stroke_width mCSS1808 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3.0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1808)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1809 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","2,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1809)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1810 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1810)
//CSS: stroke-linecap
protected stroke_linecap mCSS1811 = new stroke_linecap ("stroke-linecap"){
// DEBUG adding CSS
protected stroke_linecap mCSSConst = new stroke_linecap ("stroke-linecap","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1811)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol634);
Load(mSymbol635);
}
public void LoadCSS(){
Load(mCSS1802);
Load(mCSS1803);
Load(mCSS1804);
Load(mCSS1805);
Load(mCSS1806);
Load(mCSS1807);
Load(mCSS1808);
Load(mCSS1809);
Load(mCSS1810);
Load(mCSS1811);
}
public void LoadFilters(){
Load(mFilter503);
}
};//Rules end (mRules510)
public void LoadRules(){
Load(mRules486);
Load(mRules487);
Load(mRules488);
Load(mRules489);
Load(mRules490);
Load(mRules491);
Load(mRules492);
Load(mRules493);
Load(mRules494);
Load(mRules495);
Load(mRules496);
Load(mRules497);
Load(mRules498);
Load(mRules499);
Load(mRules500);
Load(mRules501);
Load(mRules502);
Load(mRules503);
Load(mRules504);
Load(mRules505);
Load(mRules506);
Load(mRules507);
Load(mRules508);
Load(mRules509);
Load(mRules510);
}
};//roads end
protected Style mtrams = new Style ("Style"){
// DEBUG :adding trams
protected Rule mRules511 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol636 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1812 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#444");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1812)
//CSS: stroke-width
protected stroke_width mCSS1813 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1813)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol636);
}
public void LoadCSS(){
Load(mCSS1812);
Load(mCSS1813);
}
public void LoadFilters(){
}
};//Rules end (mRules511)
protected Rule mRules512 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol637 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1814 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#444");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1814)
//CSS: stroke-width
protected stroke_width mCSS1815 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1815)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol637);
}
public void LoadCSS(){
Load(mCSS1814);
Load(mCSS1815);
}
public void LoadFilters(){
}
};//Rules end (mRules512)
public void LoadRules(){
Load(mRules511);
Load(mRules512);
}
};//trams end
protected Style mguideways = new Style ("Style"){
// DEBUG :adding guideways
protected Rule mRules513 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol638 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1816 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6666ff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1816)
//CSS: stroke-width
protected stroke_width mCSS1817 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1817)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1818 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1818)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol639 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1819 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1819)
//CSS: stroke-width
protected stroke_width mCSS1820 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1820)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1821 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1821)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1822 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","8,12");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1822)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol638);
Load(mSymbol639);
}
public void LoadCSS(){
Load(mCSS1816);
Load(mCSS1817);
Load(mCSS1818);
Load(mCSS1819);
Load(mCSS1820);
Load(mCSS1821);
Load(mCSS1822);
}
public void LoadFilters(){
}
};//Rules end (mRules513)
protected Rule mRules514 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol640 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1823 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6666ff");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1823)
//CSS: stroke-width
protected stroke_width mCSS1824 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1824)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1825 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1825)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol641 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1826 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","white");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1826)
//CSS: stroke-width
protected stroke_width mCSS1827 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1827)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1828 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","round");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1828)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1829 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,11,8,1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1829)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol640);
Load(mSymbol641);
}
public void LoadCSS(){
Load(mCSS1823);
Load(mCSS1824);
Load(mCSS1825);
Load(mCSS1826);
Load(mCSS1827);
Load(mCSS1828);
Load(mCSS1829);
}
public void LoadFilters(){
}
};//Rules end (mRules514)
public void LoadRules(){
Load(mRules513);
Load(mRules514);
}
};//guideways end
protected Style mroads_text_low_zoom = new Style ("Style"){
// DEBUG :adding roads_text_low_zoom
protected Rule mRules515 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter504 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter504);
}
};//Rules end (mRules515)
protected Rule mRules516 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter505 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter505);
}
};//Rules end (mRules516)
protected Rule mRules517 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter506 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter506);
}
};//Rules end (mRules517)
protected Rule mRules518 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter507 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter507);
}
};//Rules end (mRules518)
protected Rule mRules519 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter508 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter508);
}
};//Rules end (mRules519)
protected Rule mRules520 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter509 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter509);
}
};//Rules end (mRules520)
protected Rule mRules521 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter510 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter510);
}
};//Rules end (mRules521)
protected Rule mRules522 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter511 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter511);
}
};//Rules end (mRules522)
protected Rule mRules523 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter512 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter512);
}
};//Rules end (mRules523)
protected Rule mRules524 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter513 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter513);
}
};//Rules end (mRules524)
protected Rule mRules525 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter514 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter514);
}
};//Rules end (mRules525)
protected Rule mRules526 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter515 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter515);
}
};//Rules end (mRules526)
protected Rule mRules527 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter516 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter516);
}
};//Rules end (mRules527)
protected Rule mRules528 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter517 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter517);
}
};//Rules end (mRules528)
protected Rule mRules529 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter518 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter518);
}
};//Rules end (mRules529)
protected Rule mRules530 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter519 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter519);
}
};//Rules end (mRules530)
protected Rule mRules531 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter520 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter520);
}
};//Rules end (mRules531)
protected Rule mRules532 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter521 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter521);
}
};//Rules end (mRules532)
protected Rule mRules533 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter522 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter522);
}
};//Rules end (mRules533)
protected Rule mRules534 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter523 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter523);
}
};//Rules end (mRules534)
protected Rule mRules535 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter524 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter524);
}
};//Rules end (mRules535)
protected Rule mRules536 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter525 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter525);
}
};//Rules end (mRules536)
protected Rule mRules537 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter526 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter526);
}
};//Rules end (mRules537)
protected Rule mRules538 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter527 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter527);
}
};//Rules end (mRules538)
public void LoadRules(){
Load(mRules515);
Load(mRules516);
Load(mRules517);
Load(mRules518);
Load(mRules519);
Load(mRules520);
Load(mRules521);
Load(mRules522);
Load(mRules523);
Load(mRules524);
Load(mRules525);
Load(mRules526);
Load(mRules527);
Load(mRules528);
Load(mRules529);
Load(mRules530);
Load(mRules531);
Load(mRules532);
Load(mRules533);
Load(mRules534);
Load(mRules535);
Load(mRules536);
Load(mRules537);
Load(mRules538);
}
};//roads_text_low_zoom end
protected Style mroads_text = new Style ("Style"){
// DEBUG :adding roads_text
protected Rule mRules539 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter528 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter528);
}
};//Rules end (mRules539)
protected Rule mRules540 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter529 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter529);
}
};//Rules end (mRules540)
protected Rule mRules541 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter530 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter530);
}
};//Rules end (mRules541)
protected Rule mRules542 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter531 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter531);
}
};//Rules end (mRules542)
protected Rule mRules543 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter532 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter532);
}
};//Rules end (mRules543)
protected Rule mRules544 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter533 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter533);
}
};//Rules end (mRules544)
protected Rule mRules545 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter534 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter534);
}
};//Rules end (mRules545)
protected Rule mRules546 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter535 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter535);
}
};//Rules end (mRules546)
protected Rule mRules547 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter536 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter536);
}
};//Rules end (mRules547)
protected Rule mRules548 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter537 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter537);
}
};//Rules end (mRules548)
protected Rule mRules549 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter538 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter538);
}
};//Rules end (mRules549)
protected Rule mRules550 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter539 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter539);
}
};//Rules end (mRules550)
protected Rule mRules551 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter540 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter540);
}
};//Rules end (mRules551)
protected Rule mRules552 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter541 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter541);
}
};//Rules end (mRules552)
protected Rule mRules553 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter542 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter542);
}
};//Rules end (mRules553)
protected Rule mRules554 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter543 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter543);
}
};//Rules end (mRules554)
protected Rule mRules555 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter544 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter544);
}
};//Rules end (mRules555)
protected Rule mRules556 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter545 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter545);
}
};//Rules end (mRules556)
protected Rule mRules557 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter546 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter546);
}
};//Rules end (mRules557)
protected Rule mRules558 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter547 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter547);
}
};//Rules end (mRules558)
protected Rule mRules559 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter548 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter548);
}
};//Rules end (mRules559)
protected Rule mRules560 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter549 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter549);
}
};//Rules end (mRules560)
protected Rule mRules561 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter550 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter550);
}
};//Rules end (mRules561)
protected Rule mRules562 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter551 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter551);
}
};//Rules end (mRules562)
protected Rule mRules563 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter552 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter552);
}
};//Rules end (mRules563)
protected Rule mRules564 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter553 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter553);
}
};//Rules end (mRules564)
protected Rule mRules565 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter554 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter554);
}
};//Rules end (mRules565)
protected Rule mRules566 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter555 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter555);
}
};//Rules end (mRules566)
protected Rule mRules567 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter556 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter556);
}
};//Rules end (mRules567)
protected Rule mRules568 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter557 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter557);
}
};//Rules end (mRules568)
protected Rule mRules569 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter558 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter558);
}
};//Rules end (mRules569)
protected Rule mRules570 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter559 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter559);
}
};//Rules end (mRules570)
protected Rule mRules571 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter560 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter560);
}
};//Rules end (mRules571)
protected Rule mRules572 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter561 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter561);
}
};//Rules end (mRules572)
protected Rule mRules573 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter562 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter562);
}
};//Rules end (mRules573)
protected Rule mRules574 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter563 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter563);
}
};//Rules end (mRules574)
protected Rule mRules575 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter564 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter564);
}
};//Rules end (mRules575)
protected Rule mRules576 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter565 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter565);
}
};//Rules end (mRules576)
protected Rule mRules577 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter566 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter566);
}
};//Rules end (mRules577)
protected Rule mRules578 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter567 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
};// end of exec
}; // end of Filter
public void LoadSymbols(){
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter567);
}
};//Rules end (mRules578)
protected Rule mRules579 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter568 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ref,bold-fonts, 10,#000,1,0);
protected TextSymbolizer mSymbol642 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol642);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter568);
}
};//Rules end (mRules579)
protected Rule mRules580 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter569 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway)))))))),And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer ref,book-fonts, 10,#333,1,0);
protected TextSymbolizer mSymbol643 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol643);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter569);
}
};//Rules end (mRules580)
protected Rule mRules581 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter570 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,black,0,0);
protected TextSymbolizer mSymbol644 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol644);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter570);
}
};//Rules end (mRules581)
protected Rule mRules582 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter571 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,black,1,0);
protected TextSymbolizer mSymbol645 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol645);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter571);
}
};//Rules end (mRules582)
protected Rule mRules583 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter572 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,black,0,0);
protected TextSymbolizer mSymbol646 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol646);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter572);
}
};//Rules end (mRules583)
protected Rule mRules584 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter573 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,black,0,0);
protected TextSymbolizer mSymbol647 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol647);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter573);
}
};//Rules end (mRules584)
protected Rule mRules585 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter574 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,black,1,0);
protected TextSymbolizer mSymbol648 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol648);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter574);
}
};//Rules end (mRules585)
protected Rule mRules586 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter575 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 10,black,1,0);
protected TextSymbolizer mSymbol649 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol649);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter575);
}
};//Rules end (mRules586)
protected Rule mRules587 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter576 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#000,1,0);
protected TextSymbolizer mSymbol650 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol650);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter576);
}
};//Rules end (mRules587)
protected Rule mRules588 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter577 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 11,#000,1,0);
protected TextSymbolizer mSymbol651 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol651);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter577);
}
};//Rules end (mRules588)
protected Rule mRules589 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter578 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#000,1,0);
protected TextSymbolizer mSymbol652 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol652);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter578);
}
};//Rules end (mRules589)
protected Rule mRules590 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter579 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 11,#000,1,0);
protected TextSymbolizer mSymbol653 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol653);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter579);
}
};//Rules end (mRules590)
protected Rule mRules591 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter580 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 8,#000,1,0);
protected TextSymbolizer mSymbol654 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol654);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter580);
}
};//Rules end (mRules591)
protected Rule mRules592 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter581 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 9,#000,1,0);
protected TextSymbolizer mSymbol655 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol655);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter581);
}
};//Rules end (mRules592)
protected Rule mRules593 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter582 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))));
};// end of exec
}; // end of Filter
//TextSymbolizer name,book-fonts, 11,#000,1,0);
protected TextSymbolizer mSymbol656 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol656);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter582);
}
};//Rules end (mRules593)
protected Rule mRules594 = new Rule ("Rule"){
// DEBUG adding Rules
//TextSymbolizer name,book-fonts, 9,#000,1,0);
protected TextSymbolizer mSymbol657 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol657);
}
public void LoadCSS(){
}
public void LoadFilters(){
}
};//Rules end (mRules594)
protected Rule mRules595 = new Rule ("Rule"){
// DEBUG adding Rules
//TextSymbolizer name,book-fonts, 11,#000,1,0);
protected TextSymbolizer mSymbol658 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol658);
}
public void LoadCSS(){
}
public void LoadFilters(){
}
};//Rules end (mRules595)
public void LoadRules(){
Load(mRules539);
Load(mRules540);
Load(mRules541);
Load(mRules542);
Load(mRules543);
Load(mRules544);
Load(mRules545);
Load(mRules546);
Load(mRules547);
Load(mRules548);
Load(mRules549);
Load(mRules550);
Load(mRules551);
Load(mRules552);
Load(mRules553);
Load(mRules554);
Load(mRules555);
Load(mRules556);
Load(mRules557);
Load(mRules558);
Load(mRules559);
Load(mRules560);
Load(mRules561);
Load(mRules562);
Load(mRules563);
Load(mRules564);
Load(mRules565);
Load(mRules566);
Load(mRules567);
Load(mRules568);
Load(mRules569);
Load(mRules570);
Load(mRules571);
Load(mRules572);
Load(mRules573);
Load(mRules574);
Load(mRules575);
Load(mRules576);
Load(mRules577);
Load(mRules578);
Load(mRules579);
Load(mRules580);
Load(mRules581);
Load(mRules582);
Load(mRules583);
Load(mRules584);
Load(mRules585);
Load(mRules586);
Load(mRules587);
Load(mRules588);
Load(mRules589);
Load(mRules590);
Load(mRules591);
Load(mRules592);
Load(mRules593);
Load(mRules594);
Load(mRules595);
}
};//roads_text end
protected Style mcliffs = new Style ("Style"){
// DEBUG :adding cliffs
protected Rule mRules596 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter583 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_cliff))))))))));
};// end of exec
}; // end of Filter
protected LinePatternSymbolizer mSymbol659 = new LinePatternSymbolizer( );
//LEAVING LinePatternSymbolizer
public void LoadSymbols(){
Load(mSymbol659);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter583);
}
};//Rules end (mRules596)
protected Rule mRules597 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter584 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_cliff))))))))));
};// end of exec
}; // end of Filter
protected LinePatternSymbolizer mSymbol660 = new LinePatternSymbolizer( );
//LEAVING LinePatternSymbolizer
public void LoadSymbols(){
Load(mSymbol660);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter584);
}
};//Rules end (mRules597)
protected Rule mRules598 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter585 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getman_made().equals_(CONST_embankment))))))))));
};// end of exec
}; // end of Filter
protected LinePatternSymbolizer mSymbol661 = new LinePatternSymbolizer( );
//LEAVING LinePatternSymbolizer
public void LoadSymbols(){
Load(mSymbol661);
}
public void LoadCSS(){
}
public void LoadFilters(){
Load(mFilter585);
}
};//Rules end (mRules598)
public void LoadRules(){
Load(mRules596);
Load(mRules597);
Load(mRules598);
}
};//cliffs end
protected Style mbarriers = new Style ("Style"){
// DEBUG :adding barriers
protected Rule mRules599 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter586 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getbarrier().equals_(CONST_hedge)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_hedge))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol662 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1830 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#aed1a0");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1830)
//CSS: stroke-width
protected stroke_width mCSS1831 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1831)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol662);
}
public void LoadCSS(){
Load(mCSS1830);
Load(mCSS1831);
}
public void LoadFilters(){
Load(mFilter586);
}
};//Rules end (mRules599)
protected Rule mRules600 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter587 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbarrier().equals_(CONST_hedge)))))),Not(Parens(Condition(getObj().getbarrier().notequals_(""))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol663 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1832 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","black");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1832)
//CSS: stroke-width
protected stroke_width mCSS1833 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","0.4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1833)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol663);
}
public void LoadCSS(){
Load(mCSS1832);
Load(mCSS1833);
}
public void LoadFilters(){
Load(mFilter587);
}
};//Rules end (mRules600)
public void LoadRules(){
Load(mRules599);
Load(mRules600);
}
};//barriers end
protected Style mdirections = new Style ("Style"){
// DEBUG :adding directions
protected Rule mRules601 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter588 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getoneway().equals_(CONST_yes))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol664 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1834 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1834)
//CSS: stroke-width
protected stroke_width mCSS1835 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1835)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1836 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1836)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1837 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,12,10,152");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1837)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol665 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1838 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1838)
//CSS: stroke-width
protected stroke_width mCSS1839 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1839)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1840 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1840)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1841 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,12,9,153");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1841)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol666 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1842 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1842)
//CSS: stroke-width
protected stroke_width mCSS1843 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1843)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1844 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1844)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1845 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,18,2,154");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1845)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol667 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1846 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1846)
//CSS: stroke-width
protected stroke_width mCSS1847 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1847)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1848 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1848)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1849 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,18,1,155");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1849)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol664);
Load(mSymbol665);
Load(mSymbol666);
Load(mSymbol667);
}
public void LoadCSS(){
Load(mCSS1834);
Load(mCSS1835);
Load(mCSS1836);
Load(mCSS1837);
Load(mCSS1838);
Load(mCSS1839);
Load(mCSS1840);
Load(mCSS1841);
Load(mCSS1842);
Load(mCSS1843);
Load(mCSS1844);
Load(mCSS1845);
Load(mCSS1846);
Load(mCSS1847);
Load(mCSS1848);
Load(mCSS1849);
}
public void LoadFilters(){
Load(mFilter588);
}
};//Rules end (mRules601)
protected Rule mRules602 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter589 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getoneway()))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol668 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1850 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1850)
//CSS: stroke-width
protected stroke_width mCSS1851 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1851)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1852 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1852)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1853 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,12,10,152");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1853)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol669 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1854 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1854)
//CSS: stroke-width
protected stroke_width mCSS1855 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1855)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1856 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1856)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1857 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,13,9,152");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1857)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol670 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1858 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1858)
//CSS: stroke-width
protected stroke_width mCSS1859 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1859)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1860 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1860)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1861 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,14,2,158");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1861)
//LEAVING LineSymbolizer
protected LineSymbolizer mSymbol671 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1862 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#6c70d5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1862)
//CSS: stroke-width
protected stroke_width mCSS1863 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","4");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1863)
//CSS: stroke-linejoin
protected stroke_linejoin mCSS1864 = new stroke_linejoin ("stroke-linejoin"){
// DEBUG adding CSS
protected stroke_linejoin mCSSConst = new stroke_linejoin ("stroke-linejoin","bevel");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1864)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1865 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","0,15,1,158");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1865)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol668);
Load(mSymbol669);
Load(mSymbol670);
Load(mSymbol671);
}
public void LoadCSS(){
Load(mCSS1850);
Load(mCSS1851);
Load(mCSS1852);
Load(mCSS1853);
Load(mCSS1854);
Load(mCSS1855);
Load(mCSS1856);
Load(mCSS1857);
Load(mCSS1858);
Load(mCSS1859);
Load(mCSS1860);
Load(mCSS1861);
Load(mCSS1862);
Load(mCSS1863);
Load(mCSS1864);
Load(mCSS1865);
}
public void LoadFilters(){
Load(mFilter589);
}
};//Rules end (mRules602)
public void LoadRules(){
Load(mRules601);
Load(mRules602);
}
};//directions end
protected Style mboundary = new Style ("Style"){
// DEBUG :adding boundary
protected Rule mRules603 = new Rule ("Rule"){
// DEBUG adding Rules
protected PolygonSymbolizer mSymbol672 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS1866 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1866)
//CSS: fill-opacity
protected fill_opacity mCSS1867 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.05");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1867)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol673 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1868 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1868)
//CSS: stroke-width
protected stroke_width mCSS1869 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1869)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1870 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","4,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1870)
//CSS: stroke-opacity
protected stroke_opacity mCSS1871 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.15");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1871)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol672);
Load(mSymbol673);
}
public void LoadCSS(){
Load(mCSS1866);
Load(mCSS1867);
Load(mCSS1868);
Load(mCSS1869);
Load(mCSS1870);
Load(mCSS1871);
}
public void LoadFilters(){
}
};//Rules end (mRules603)
protected Rule mRules604 = new Rule ("Rule"){
// DEBUG adding Rules
protected PolygonSymbolizer mSymbol674 = new PolygonSymbolizer( );
//CSS: fill
protected fill mCSS1872 = new fill ("fill"){
// DEBUG adding CSS
protected fill mCSSConst = new fill ("fill","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1872)
//CSS: fill-opacity
protected fill_opacity mCSS1873 = new fill_opacity ("fill-opacity"){
// DEBUG adding CSS
protected fill_opacity mCSSConst = new fill_opacity ("fill-opacity","0.05");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1873)
//LEAVING PolygonSymbolizer
protected LineSymbolizer mSymbol675 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1874 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1874)
//CSS: stroke-width
protected stroke_width mCSS1875 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1875)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1876 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1876)
//CSS: stroke-opacity
protected stroke_opacity mCSS1877 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.15");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1877)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol674);
Load(mSymbol675);
}
public void LoadCSS(){
Load(mCSS1872);
Load(mCSS1873);
Load(mCSS1874);
Load(mCSS1875);
Load(mCSS1876);
Load(mCSS1877);
}
public void LoadFilters(){
}
};//Rules end (mRules604)
protected Rule mRules605 = new Rule ("Rule"){
// DEBUG adding Rules
protected LineSymbolizer mSymbol676 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1878 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","green");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1878)
//CSS: stroke-width
protected stroke_width mCSS1879 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1879)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1880 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","6,2");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1880)
//CSS: stroke-opacity
protected stroke_opacity mCSS1881 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.15");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1881)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol676);
}
public void LoadCSS(){
Load(mCSS1878);
Load(mCSS1879);
Load(mCSS1880);
Load(mCSS1881);
}
public void LoadFilters(){
}
};//Rules end (mRules605)
protected Rule mRules606 = new Rule ("Rule"){
// DEBUG adding Rules
//TextSymbolizer name,bold-fonts, 8,#9c9,1,14);
protected TextSymbolizer mSymbol677 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol677);
}
public void LoadCSS(){
}
public void LoadFilters(){
}
};//Rules end (mRules606)
protected Rule mRules607 = new Rule ("Rule"){
// DEBUG adding Rules
//TextSymbolizer name,bold-fonts, 11,#9c9,1,14);
protected TextSymbolizer mSymbol678 = new TextSymbolizer( );
//LEAVING TextSymbolizer
public void LoadSymbols(){
Load(mSymbol678);
}
public void LoadCSS(){
}
public void LoadFilters(){
}
};//Rules end (mRules607)
public void LoadRules(){
Load(mRules603);
Load(mRules604);
Load(mRules605);
Load(mRules606);
Load(mRules607);
}
};//boundary end
protected Style mtheme_park = new Style ("Style"){
// DEBUG :adding theme_park
protected Rule mRules608 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter590 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol679 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1882 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#734a08");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1882)
//CSS: stroke-width
protected stroke_width mCSS1883 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","1.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1883)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1884 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","9,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1884)
//CSS: stroke-opacity
protected stroke_opacity mCSS1885 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1885)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol679);
}
public void LoadCSS(){
Load(mCSS1882);
Load(mCSS1883);
Load(mCSS1884);
Load(mCSS1885);
}
public void LoadFilters(){
Load(mFilter590);
}
};//Rules end (mRules608)
protected Rule mRules609 = new Rule ("Rule"){
// DEBUG adding Rules
//FilterStart
//FilterEnd
protected Filter mFilter591 = new Filter(){
public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
};// end of exec
}; // end of Filter
protected LineSymbolizer mSymbol680 = new LineSymbolizer( );
//CSS: stroke
protected stroke mCSS1886 = new stroke ("stroke"){
// DEBUG adding CSS
protected stroke mCSSConst = new stroke ("stroke","#734a08");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1886)
//CSS: stroke-width
protected stroke_width mCSS1887 = new stroke_width ("stroke-width"){
// DEBUG adding CSS
protected stroke_width mCSSConst = new stroke_width ("stroke-width","2.5");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1887)
//CSS: stroke-dasharray
protected stroke_dasharray mCSS1888 = new stroke_dasharray ("stroke-dasharray"){
// DEBUG adding CSS
protected stroke_dasharray mCSSConst = new stroke_dasharray ("stroke-dasharray","9,3");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1888)
//CSS: stroke-opacity
protected stroke_opacity mCSS1889 = new stroke_opacity ("stroke-opacity"){
// DEBUG adding CSS
protected stroke_opacity mCSSConst = new stroke_opacity ("stroke-opacity","0.6");
public void LoadCSSConst() { mCSSConst.load(); };
};//CSS end (mCSS1889)
//LEAVING LineSymbolizer
public void LoadSymbols(){
Load(mSymbol680);
}
public void LoadCSS(){
Load(mCSS1886);
Load(mCSS1887);
Load(mCSS1888);
Load(mCSS1889);
}
public void LoadFilters(){
Load(mFilter591);
}
};//Rules end (mRules609)
public void LoadRules(){
Load(mRules608);
Load(mRules609);
}
};//theme_park end
//Layer: leisure
protected Layer mLayer0 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable0 = new Parameter("\n      (select way,aeroway,amenity,landuse,leisure,man_made,military,\"natural\",power,shop,tourism,name,religion\n       from ");
protected Parameter mtable1 = new Parameter("prefix");
protected Parameter mtable2 = new Parameter("_polygon\n       where landuse is not null\n          or leisure is not null\n          or shop is not null\n          or aeroway in (\'apron\',\'aerodrome\')\n          or amenity in (\'parking\',\'university\',\'college\',\'school\',\'hospital\',\'kindergarten\',\'grave_yard\')\n          or military in (\'barracks\',\'danger_area\')\n          or \"natural\" in (\'field\',\'beach\',\'heath\',\'mud\',\'wood\')\n          or power in (\'station\',\'sub_station\')\n          or tourism in (\'attraction\',\'camp_site\',\'caravan_site\',\'picnic_site\',\'zoo\')\n       order by z_order,way_area desc\n      ) as leisure\n      ");
public void LoadParameters(){
Load(mtable0);
Load(mtable1);
Load(mtable2);
}
public void LoadStyle() { 
Load(mleisure);
};
};//Layer end
//Layer: sports_grounds
protected Layer mLayer1 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable3 = new Parameter("(select way,leisure from ");
protected Parameter mtable4 = new Parameter("prefix");
protected Parameter mtable5 = new Parameter("_polygon where leisure in (\'sports_centre\',\'stadium\') order by z_order,way_area desc) as sports_grounds");
public void LoadParameters(){
Load(mtable3);
Load(mtable4);
Load(mtable5);
}
public void LoadStyle() { 
Load(msports_grounds);
};
};//Layer end
//Layer: tunnels
protected Layer mLayer2 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable6 = new Parameter("\n      (select way,highway from ");
protected Parameter mtable7 = new Parameter("prefix");
protected Parameter mtable8 = new Parameter("_line where highway in (\'motorway\',\'motorway_link\',\'trunk\',\'trunk_link\',\'primary\',\'primary_link\',\'secondary\',\'secondary_link\',\'tertiary\',\'tertiary_link\',\'residential\',\'unclassified\',\'minor\') and tunnel in (\'yes\',\'true\',\'1\') order by z_order) as roads\n      ");
public void LoadParameters(){
Load(mtable6);
Load(mtable7);
Load(mtable8);
}
public void LoadStyle() { 
Load(mtunnels_casing);
Load(mtunnels_fill);
};
};//Layer end
//Layer: turning_circle
protected Layer mLayer3 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable9 = new Parameter("(select way from ");
protected Parameter mtable10 = new Parameter("prefix");
protected Parameter mtable11 = new Parameter("_point where highway=\'turning_circle\') as turning_circle");
public void LoadParameters(){
Load(mtable9);
Load(mtable10);
Load(mtable11);
}
public void LoadStyle() { 
Load(mturning_circle);
};
};//Layer end
//Layer: footbikecycle-tunnels
protected Layer mLayer4 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable12 = new Parameter("\n      (select way,highway,horse,foot,bicycle from ");
protected Parameter mtable13 = new Parameter("prefix");
protected Parameter mtable14 = new Parameter("_line where highway in (\'bridleway\',\'footway\',\'cycleway\',\'path\') and tunnel in (\'yes\',\'true\',\'1\') order by z_order) as roads\n      ");
public void LoadParameters(){
Load(mtable12);
Load(mtable13);
Load(mtable14);
}
public void LoadStyle() { 
Load(mfootbikecycle_tunnels);
};
};//Layer end
//Layer: tracks-tunnels
protected Layer mLayer5 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable15 = new Parameter("\n      (select way,tracktype from ");
protected Parameter mtable16 = new Parameter("prefix");
protected Parameter mtable17 = new Parameter("_line where highway=\'track\' and tunnel in (\'yes\',\'true\',\'1\')) as tracks\n      ");
public void LoadParameters(){
Load(mtable15);
Load(mtable16);
Load(mtable17);
}
public void LoadStyle() { 
Load(mtracks_tunnels);
};
};//Layer end
//Layer: line features
protected Layer mLayer6 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable18 = new Parameter("\n      (select way,barrier,\"natural\",man_made from ");
protected Parameter mtable19 = new Parameter("prefix");
protected Parameter mtable20 = new Parameter("_line where barrier is not null or \"natural\" in (\'hedge\',\'cliff\') or man_made=\'embankment\') as roads\n      ");
public void LoadParameters(){
Load(mtable18);
Load(mtable19);
Load(mtable20);
}
public void LoadStyle() { 
Load(mcliffs);
Load(mbarriers);
};
};//Layer end
//Layer: polygon barriers
protected Layer mLayer7 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable21 = new Parameter("\n       (select way,barrier,\"natural\" from ");
protected Parameter mtable22 = new Parameter("prefix");
protected Parameter mtable23 = new Parameter("_polygon where barrier is not null or \"natural\"=\'hedge\') as barriers\n       ");
public void LoadParameters(){
Load(mtable21);
Load(mtable22);
Load(mtable23);
}
public void LoadStyle() { 
Load(mbarriers);
};
};//Layer end
//Layer: highway-area-casing
protected Layer mLayer8 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable24 = new Parameter("\n      (select way,highway from ");
protected Parameter mtable25 = new Parameter("prefix");
protected Parameter mtable26 = new Parameter("_polygon\n       where highway in (\'residential\',\'unclassified\',\'pedestrian\',\'service\',\'footway\',\'track\',\'path\')\n       order by z_order,way_area desc) as roads\n      ");
public void LoadParameters(){
Load(mtable24);
Load(mtable25);
Load(mtable26);
}
public void LoadStyle() { 
Load(mhighway_area_casing);
};
};//Layer end
//Layer: minor-roads-casing
protected Layer mLayer9 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable27 = new Parameter("\n      (select way,highway,service,\n       case when tunnel in (\'yes\',\'true\',\'1\') then \'yes\'::text else tunnel end as tunnel\n       from ");
protected Parameter mtable28 = new Parameter("prefix");
protected Parameter mtable29 = new Parameter("_line\n       where highway in (\'motorway\',\'motorway_link\',\'trunk\',\'trunk_link\',\'primary\',\'primary_link\',\'secondary\',\'secondary_link\',\'tertiary\',\'tertiary_link\',\'residential\',\'unclassified\',\'minor\',\'road\',\'service\',\'pedestrian\',\'raceway\',\'living_street\')\n       order by z_order) as roads\n      ");
public void LoadParameters(){
Load(mtable27);
Load(mtable28);
Load(mtable29);
}
public void LoadStyle() { 
Load(mminor_roads_casing_links);
Load(mminor_roads_casing);
};
};//Layer end
//Layer: highway-area-fill
protected Layer mLayer10 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable30 = new Parameter("\n      (select way,highway from ");
protected Parameter mtable31 = new Parameter("prefix");
protected Parameter mtable32 = new Parameter("_polygon\n       where highway in (\'residential\',\'unclassified\',\'pedestrian\',\'service\',\'footway\',\'living_street\',\'track\',\'path\')\n       order by z_order,way_area desc) as roads\n      ");
public void LoadParameters(){
Load(mtable30);
Load(mtable31);
Load(mtable32);
}
public void LoadStyle() { 
Load(mhighway_area_fill);
};
};//Layer end
//Layer: tracks-notunnel-nobridge
protected Layer mLayer11 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable33 = new Parameter("\n      (select way,tracktype from ");
protected Parameter mtable34 = new Parameter("prefix");
protected Parameter mtable35 = new Parameter("_line where highway=\'track\' and (bridge is null or bridge in (\'no\',\'false\',\'0\')) and (tunnel is null or tunnel in (\'no\',\'false\',\'0\'))) as tracks\n      ");
public void LoadParameters(){
Load(mtable33);
Load(mtable34);
Load(mtable35);
}
public void LoadStyle() { 
Load(mtracks_notunnel_nobridge);
};
};//Layer end
//Layer: minor-roads-fill
protected Layer mLayer12 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable36 = new Parameter("\n      (select way,highway,horse,bicycle,foot,construction,aeroway,service,\n       case when tunnel in (\'yes\',\'true\',\'1\') then \'yes\'::text else tunnel end as tunnel,\n       case when bridge in (\'yes\',\'true\',\'1\') then \'yes\'::text else bridge end as bridge,\n       case when railway in (\'spur\',\'siding\')\n              or (railway=\'rail\' and service in (\'spur\',\'siding\',\'yard\'))\n            then \'spur-siding-yard\'::text else railway end as railway\n       from ");
protected Parameter mtable37 = new Parameter("prefix");
protected Parameter mtable38 = new Parameter("_line\n       where highway is not null\n          or aeroway in (\'runway\',\'taxiway\')\n          or railway in (\'light_rail\',\'narrow_gauge\',\'funicular\',\'rail\',\'");
protected Parameter mtable39 = new Parameter("subway\',\'tram\',\'spur\',\'siding\',\'platform\',\'disused\',\'abandoned\',\'construction\')\n       order by z_order) as roads\n      ");
public void LoadParameters(){
Load(mtable36);
Load(mtable37);
Load(mtable38);
Load(mtable39);
}
public void LoadStyle() { 
Load(mminor_roads_fill_links);
Load(mminor_roads_fill);
};
};//Layer end
//Layer: roads
protected Layer mLayer13 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable40 = new Parameter("\n      (select way,highway,railway,\n       case when tunnel in (\'yes\',\'true\',\'1\') then \'yes\'::text else tunnel end as tunnel\n       from ");
protected Parameter mtable41 = new Parameter("prefix");
protected Parameter mtable42 = new Parameter("_roads\n       where highway is not null\n          or railway is not null\n       order by z_order\n      ) as roads\n      ");
public void LoadParameters(){
Load(mtable40);
Load(mtable41);
Load(mtable42);
}
public void LoadStyle() { 
Load(mroads);
};
};//Layer end
//Layer: waterway-bridges
protected Layer mLayer14 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable43 = new Parameter("(select way,name from ");
protected Parameter mtable44 = new Parameter("prefix");
protected Parameter mtable45 = new Parameter("_line where waterway=\'canal\' and bridge in (\'yes\',\'true\',\'1\',\'aqueduct\') order by z_order) as water");
public void LoadParameters(){
Load(mtable43);
Load(mtable44);
Load(mtable45);
}
public void LoadStyle() { 
Load(mwaterway_bridges);
};
};//Layer end
//Layer: bridges
protected Layer mLayer15 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable46 = new Parameter("\n      (select way,highway,aeroway,railway,layer,horse,bicycle,foot,bridge\n       from ");
protected Parameter mtable47 = new Parameter("prefix");
protected Parameter mtable48 = new Parameter("_line\n       where (highway is not null\n              or aeroway in (\'runway\',\'taxiway\')\n              or railway in (\'light_rail\',\'subway\'))\n         and bridge not in (\'no\',\'false\',\'0\')\n       order by z_order\n      ) as roads\n      ");
public void LoadParameters(){
Load(mtable46);
Load(mtable47);
Load(mtable48);
}
public void LoadStyle() { 
Load(mroad_bridges_casing);
Load(mroad_bridges_fill);
Load(mnoncased_ways_bridges);
Load(mprimarybridge_layer0_casing);
Load(mmwaybridge_layer0_casing);
Load(mprimarybridge_layer0_fill);
Load(mmwaybridge_layer0_fill);
Load(mprimarybridge_layer1_casing);
Load(mmwaybridge_layer1_casing);
Load(mprimarybridge_layer1_fill);
Load(mmwaybridge_layer1_fill);
Load(mprimarybridge_layer2_casing);
Load(mmwaybridge_layer2_casing);
Load(mprimarybridge_layer2_fill);
Load(mmwaybridge_layer2_fill);
Load(mmwaybridge_layer3_casing);
Load(mmwaybridge_layer3_fill);
Load(mmwaybridge_layer4_casing);
Load(mmwaybridge_layer4_fill);
Load(mmwaybridge_layer5_casing);
Load(mmwaybridge_layer5_fill);
};
};//Layer end
//Layer: tracks-bridges
protected Layer mLayer16 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable49 = new Parameter("\n      (select way,tracktype from ");
protected Parameter mtable50 = new Parameter("prefix");
protected Parameter mtable51 = new Parameter("_line where highway=\'track\' and bridge in (\'yes\',\'true\',\'1\')) as tracks\n      ");
public void LoadParameters(){
Load(mtable49);
Load(mtable50);
Load(mtable51);
}
public void LoadStyle() { 
Load(mtracks_bridges);
};
};//Layer end
//Layer: access
protected Layer mLayer17 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable52 = new Parameter("\n      (select way,access,highway from ");
protected Parameter mtable53 = new Parameter("prefix");
protected Parameter mtable54 = new Parameter("_line where access is not null) as access\n      ");
public void LoadParameters(){
Load(mtable52);
Load(mtable53);
Load(mtable54);
}
public void LoadStyle() { 
Load(maccess);
};
};//Layer end
//Layer: trams
protected Layer mLayer18 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable55 = new Parameter("\n      (select way from ");
protected Parameter mtable56 = new Parameter("prefix");
protected Parameter mtable57 = new Parameter("_line where railway=\'tram\' and (tunnel is null or tunnel not in (\'yes\',\'true\',\'1\'))) as trams\n      ");
public void LoadParameters(){
Load(mtable55);
Load(mtable56);
Load(mtable57);
}
public void LoadStyle() { 
Load(mtrams);
};
};//Layer end
//Layer: guideways
protected Layer mLayer19 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable58 = new Parameter("\n      (select way from ");
protected Parameter mtable59 = new Parameter("prefix");
protected Parameter mtable60 = new Parameter("_line where highway=\'bus_guideway\' and (tunnel is null or tunnel not in (\'yes\',\'true\',\'1\'))) as guideways\n      ");
public void LoadParameters(){
Load(mtable58);
Load(mtable59);
Load(mtable60);
}
public void LoadStyle() { 
Load(mguideways);
};
};//Layer end
//Layer: directions
protected Layer mLayer20 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable61 = new Parameter("\n      (select way,\n       case when oneway in (\'yes\',\'true\',\'1\') then \'yes\'::text else oneway end as oneway\n       from ");
protected Parameter mtable62 = new Parameter("prefix");
protected Parameter mtable63 = new Parameter("_line\n       where oneway is not null\n         and (highway is not null or railway is not null or waterway is not null)\n      ) as directions\n      ");
public void LoadParameters(){
Load(mtable61);
Load(mtable62);
Load(mtable63);
}
public void LoadStyle() { 
Load(mdirections);
};
};//Layer end
//Layer: planet roads text osm low zoom
protected Layer mLayer21 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable64 = new Parameter("\n      (select way,highway,ref,char_length(ref) as length\n       from ");
protected Parameter mtable65 = new Parameter("prefix");
protected Parameter mtable66 = new Parameter("_roads\n       where highway in (\'motorway\',\'trunk\',\'primary\')\n         and ref is not null\n      ) as roads\n      ");
public void LoadParameters(){
Load(mtable64);
Load(mtable65);
Load(mtable66);
}
public void LoadStyle() { 
Load(mroads_text_low_zoom);
};
};//Layer end
//Layer: planet roads text osm
protected Layer mLayer22 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable67 = new Parameter("\n      (select way,highway,aeroway,name,ref,char_length(ref) as length,\n       case when bridge in (\'yes\',\'true\',\'1\') then \'yes\'::text else bridge end as bridge\n       from ");
protected Parameter mtable68 = new Parameter("prefix");
protected Parameter mtable69 = new Parameter("_line\n       where waterway IS NULL\n         and leisure IS NULL\n         and landuse IS NULL\n         and (name is not null or ref is not null)\n      ) as roads\n      ");
public void LoadParameters(){
Load(mtable67);
Load(mtable68);
Load(mtable69);
}
public void LoadStyle() { 
Load(mroads_text);
};
};//Layer end
//Layer: text
protected Layer mLayer23 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable70 = new Parameter("\n      (select way,amenity,shop,access,highway,leisure,landuse,man_made,\"natural\",place,tourism,ele,name,ref,military,aeroway,waterway,\'yes\'::text as point\n       from ");
protected Parameter mtable71 = new Parameter("prefix");
protected Parameter mtable72 = new Parameter("_point\n       where amenity is not null\n          or shop in (\'supermarket\',\'bakery\',\'clothes\',\'fashion\',\'convenience\',\'doityourself\',\'hairdresser\',\'department_store\')\n          or leisure is not null\n          or landuse is not null\n          or tourism is not null\n          or \"natural\" is not null\n          or man_made in (\'lighthouse\',\'windmill\')\n          or place=\'island\'\n          or highway=\'motorway_junction\'\n          or military=\'danger_area\'\n          or aeroway=\'gate\'\n          or waterway=\'lock\'\n      ) as text\n      ");
public void LoadParameters(){
Load(mtable70);
Load(mtable71);
Load(mtable72);
}
public void LoadStyle() { 
Load(mtext);
};
};//Layer end
//Layer: text-poly
protected Layer mLayer24 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable73 = new Parameter("\n      (select way,aeroway,shop,access,amenity,highway,leisure,landuse,man_made,\"natural\",place,tourism,NULL as ele,name,ref,military,waterway,\'no\'::text as point\n       from ");
protected Parameter mtable74 = new Parameter("prefix");
protected Parameter mtable75 = new Parameter("_polygon\n       where amenity is not null\n          or shop in (\'supermarket\',\'bakery\',\'clothes\',\'fashion\',\'convenience\',\'doityourself\',\'hairdresser\',\'department_store\')\n          or leisure is not null\n          or landuse is not null\n          or tourism is not null\n          or \"natural\" is not null\n          or man_made in (\'lighthouse\',\'windmill\')\n          or place=\'island\'\n          or military=\'danger_area\'\n      ) as text\n      ");
public void LoadParameters(){
Load(mtable73);
Load(mtable74);
Load(mtable75);
}
public void LoadStyle() { 
Load(mtext);
};
};//Layer end
//Layer: area-text
protected Layer mLayer25 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable76 = new Parameter("\n      (select way,way_area,name\n       from ");
protected Parameter mtable77 = new Parameter("prefix");
protected Parameter mtable78 = new Parameter("_polygon\n       where name is not null\n         and (waterway is null or waterway ");
protected Parameter mtable79 = new Parameter("<");
protected Parameter mtable80 = new Parameter(">");
protected Parameter mtable81 = new Parameter(" \'riverbank\')\n       order by z_order,way_area desc\n      ) as text\n      ");
public void LoadParameters(){
Load(mtable76);
Load(mtable77);
Load(mtable78);
Load(mtable79);
Load(mtable80);
Load(mtable81);
}
public void LoadStyle() { 
Load(marea_text);
};
};//Layer end
//Layer: misc_boundaries
protected Layer mLayer26 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable82 = new Parameter("\n      (select way,name,boundary from ");
protected Parameter mtable83 = new Parameter("prefix");
protected Parameter mtable84 = new Parameter("_polygon where boundary=\'national_park\') as boundary\n      ");
public void LoadParameters(){
Load(mtable82);
Load(mtable83);
Load(mtable84);
}
public void LoadStyle() { 
Load(mboundary);
};
};//Layer end
//Layer: theme_park
protected Layer mLayer27 = new Layer ("Layer"){
// DEBUG :adding Layer
//Parameter: table
protected Parameter mtable85 = new Parameter("\n      (select way,name,tourism from ");
protected Parameter mtable86 = new Parameter("prefix");
protected Parameter mtable87 = new Parameter("_polygon where tourism=\'theme_park\') as theme_park\n      ");
public void LoadParameters(){
Load(mtable85);
Load(mtable86);
Load(mtable87);
}
public void LoadStyle() { 
Load(mtheme_park);
};
};//Layer end
class access extends typebase{
public access obj;
protected Filter mcode0 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_no)))))))),And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_private))))))))));
}
};
}; // end of class access 
class access_amenity extends typebase{
public access_amenity obj;
protected Filter mcode1 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaccess().notequals_("")))))))),And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_public)))))))))))),Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
}
};
protected Filter mcode2 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getaccess().equals_(CONST_public)))))),Not(Parens(Condition(getObj().getaccess().notequals_("")))))))))))),Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
}
};
}; // end of class access_amenity 
class access_highway extends typebase{
public access_highway obj;
protected Filter mcode3 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))))))),Not(Parens(Condition(getObj().getaccess().equals_(CONST_permissive))))))))));
}
};
protected Filter mcode4 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway)))))),Not(Parens(Condition(getObj().getaccess().equals_(CONST_permissive))))))))));
}
};
protected Filter mcode5 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))))))),Not(Parens(Condition(getObj().getaccess().equals_(CONST_destination))))))))));
}
};
}; // end of class access_highway 
class aeroway extends typebase{
public aeroway obj;
protected Filter mcode6 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_apron))))))))));
}
};
protected Filter mcode7 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_aerodrome))))))))));
}
};
protected Filter mcode8 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_gate))))))))));
}
};
protected Filter mcode9 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
}
};
protected Filter mcode10 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
}
};
protected Filter mcode11 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
}
};
protected Filter mcode12 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
}
};
protected Filter mcode13 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
}
};
protected Filter mcode14 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
}
};
}; // end of class aeroway 
class aeroway_bridge extends typebase{
public aeroway_bridge obj;
protected Filter mcode15 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))));
}
};
protected Filter mcode16 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
}
};
protected Filter mcode17 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway))))))))));
}
};
protected Filter mcode18 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_taxiway)))))))),And(Concat(Not(Parens(Condition(getObj().getaeroway().equals_(CONST_runway))))))))))))))));
}
};
}; // end of class aeroway_bridge 
class amenity extends typebase{
public amenity obj;
protected Filter mcode19 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_kindergarten)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_hospital)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_school)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_college)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_university))))))))));
}
};
protected Filter mcode20 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_kindergarten)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_hospital)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_school)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_college)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_university))))))))));
}
};
protected Filter mcode21 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
}
};
protected Filter mcode22 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_parking))))))))));
}
};
protected Filter mcode23 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_fast_food)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_cafe)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_restaurant)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_pub))))))))));
}
};
protected Filter mcode24 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_bar))))))))));
}
};
protected Filter mcode25 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_theatre)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_library)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_cinema))))))))));
}
};
protected Filter mcode26 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_police))))))))));
}
};
protected Filter mcode27 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_fire_station))))))))));
}
};
protected Filter mcode28 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_place_of_worship))))))))));
}
};
protected Filter mcode29 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_bank))))))))));
}
};
protected Filter mcode30 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_embassy))))))))));
}
};
protected Filter mcode31 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_bus_station)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_fuel))))))))));
}
};
protected Filter mcode32 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_prison))))))))));
}
};
protected Filter mcode33 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_university))))))))));
}
};
protected Filter mcode34 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_college)))))))),And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_school))))))))));
}
};
protected Filter mcode35 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_kindergarten))))))))));
}
};
protected Filter mcode36 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_hospital))))))))));
}
};
protected Filter mcode37 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_pharmacy))))))))));
}
};
}; // end of class amenity 
class amenity_landuse extends typebase{
public amenity_landuse obj;
protected Filter mcode38 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_cemetery))))))))));
}
};
}; // end of class amenity_landuse 
class amenity_landuse_religion extends typebase{
public amenity_landuse_religion obj;
protected Filter mcode39 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getreligion().equals_(CONST_jewish)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_cemetery))))))))))))))));
}
};
protected Filter mcode40 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getreligion().notequals_(CONST_jewish)))))))),And(Concat(Not(Parens(Condition(getObj().getreligion().notequals_("")))))))))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grave_yard)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_cemetery))))))))))))))));
}
};
}; // end of class amenity_landuse_religion 
class amenity_tourism extends typebase{
public amenity_tourism obj;
protected Filter mcode41 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_shelter)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_alpine_hut))))))))));
}
};
protected Filter mcode42 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getamenity().equals_(CONST_shelter)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_alpine_hut))))))))));
}
};
}; // end of class amenity_tourism 
class barrier extends typebase{
public barrier obj;
protected Filter mcode43 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbarrier().equals_(CONST_hedge)))))),Not(Parens(Condition(getObj().getbarrier().notequals_(""))))))))));
}
};
}; // end of class barrier 
class barrier_natural extends typebase{
public barrier_natural obj;
protected Filter mcode44 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getbarrier().equals_(CONST_hedge)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_hedge))))))))));
}
};
}; // end of class barrier_natural 
class bicycle_foot_highway_horse extends typebase{
public bicycle_foot_highway_horse obj;
protected Filter mcode45 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path))))))))));
}
};
protected Filter mcode46 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path))))))))));
}
};
}; // end of class bicycle_foot_highway_horse 
class bicycle_foot_highway_horse_tunnel extends typebase{
public bicycle_foot_highway_horse_tunnel obj;
protected Filter mcode47 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))))),And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path))))))))));
}
};
}; // end of class bicycle_foot_highway_horse_tunnel 
class bicycle_highway extends typebase{
public bicycle_highway obj;
protected Filter mcode48 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_cycleway))))))))));
}
};
protected Filter mcode49 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_cycleway))))))))));
}
};
}; // end of class bicycle_highway 
class bicycle_highway_tunnel extends typebase{
public bicycle_highway_tunnel obj;
protected Filter mcode50 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbicycle().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_cycleway))))))))))))))));
}
};
}; // end of class bicycle_highway_tunnel 
class bridge_highway extends typebase{
public bridge_highway obj;
protected Filter mcode51 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))))))))));
}
};
}; // end of class bridge_highway 
class bridge_highway_length extends typebase{
public bridge_highway_length obj;
protected Filter mcode52 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode53 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode54 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode55 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode56 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode57 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode58 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode59 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))))))))));
}
};
protected Filter mcode60 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode61 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode62 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode63 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode64 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode65 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode66 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode67 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
}; // end of class bridge_highway_length 
class bridge_highway_railway extends typebase{
public bridge_highway_railway obj;
protected Filter mcode68 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_abandoned)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_disused))))))))))))))));
}
};
}; // end of class bridge_highway_railway 
class bridge_railway extends typebase{
public bridge_railway obj;
protected Filter mcode69 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getbridge().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
}; // end of class bridge_railway 
class construction_highway extends typebase{
public construction_highway obj;
protected Filter mcode70 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode71 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode72 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode73 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode74 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode75 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode76 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode77 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode78 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode79 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode80 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode81 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_living_street)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_residential)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode82 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode83 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_motorway)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode84 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_trunk)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode85 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_primary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode86 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_secondary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode87 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_tertiary)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
protected Filter mcode88 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_living_street)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().getconstruction().equals_(CONST_residential)))))))))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))))))))));
}
};
}; // end of class construction_highway 
class foot_highway extends typebase{
public foot_highway obj;
protected Filter mcode89 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway))))))))));
}
};
protected Filter mcode90 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway))))))))));
}
};
}; // end of class foot_highway 
class foot_highway_tunnel extends typebase{
public foot_highway_tunnel obj;
protected Filter mcode91 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getfoot().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway))))))))))))))));
}
};
}; // end of class foot_highway_tunnel 
class highway extends typebase{
public highway obj;
protected Filter mcode92 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode93 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode94 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_track))))))))));
}
};
protected Filter mcode95 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode96 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode97 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_footway)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode98 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_track))))))))));
}
};
protected Filter mcode99 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_junction))))))))));
}
};
protected Filter mcode100 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_junction))))))))));
}
};
protected Filter mcode101 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_junction))))))))));
}
};
protected Filter mcode102 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode103 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode104 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode105 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode106 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode107 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode108 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode109 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode110 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode111 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode112 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode113 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode114 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode115 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode116 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode117 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode118 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode119 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode120 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode121 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode122 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode123 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode124 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode125 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode126 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode127 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode128 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode129 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode130 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode131 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode132 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode133 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode134 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode135 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode136 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode137 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode138 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode139 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode140 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode141 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode142 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode143 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode144 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode145 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode146 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode147 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode148 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode149 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode150 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode151 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_raceway))))))))));
}
};
protected Filter mcode152 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_raceway))))))))));
}
};
protected Filter mcode153 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_raceway))))))))));
}
};
protected Filter mcode154 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode155 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode156 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode157 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode158 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode159 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode160 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode161 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode162 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode163 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode164 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode165 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode166 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode167 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode168 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode169 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_living_street))))))))));
}
};
protected Filter mcode170 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode171 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode172 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode173 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode174 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_steps))))))))));
}
};
protected Filter mcode175 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_steps))))))))));
}
};
protected Filter mcode176 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_byway))))))))));
}
};
protected Filter mcode177 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_track))))))))));
}
};
protected Filter mcode178 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
}
};
protected Filter mcode179 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
}
};
protected Filter mcode180 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode181 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode182 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode183 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode184 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode185 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode186 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode187 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode188 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode189 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode190 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode191 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode192 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode193 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode194 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode195 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode196 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode197 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode198 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode199 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode200 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode201 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode202 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode203 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode204 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode205 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode206 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode207 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode208 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode209 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode210 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode211 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode212 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode213 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode214 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode215 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode216 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road))))))))));
}
};
protected Filter mcode217 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode218 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode219 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode220 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))));
}
};
protected Filter mcode221 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode222 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode223 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode224 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode225 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode226 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode227 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
}
};
protected Filter mcode228 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unsurfaced))))))))));
}
};
protected Filter mcode229 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_byway))))))))));
}
};
protected Filter mcode230 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode231 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode232 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode233 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode234 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode235 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode236 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode237 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode238 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode239 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode240 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode241 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode242 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode243 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode244 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode245 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode246 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode247 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode248 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode249 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode250 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode251 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode252 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode253 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode254 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode255 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode256 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode257 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode258 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode259 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode260 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode261 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode262 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode263 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode264 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode265 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))));
}
};
protected Filter mcode266 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_proposed))))))))));
}
};
protected Filter mcode267 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))));
}
};
protected Filter mcode268 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))));
}
};
protected Filter mcode269 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified))))))))));
}
};
}; // end of class highway 
class highway_horse extends typebase{
public highway_horse obj;
protected Filter mcode270 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_bridleway))))))))));
}
};
protected Filter mcode271 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_bridleway))))))))));
}
};
}; // end of class highway_horse 
class highway_horse_tunnel extends typebase{
public highway_horse_tunnel obj;
protected Filter mcode272 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethorse().equals_(CONST_designated)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_path)))))))))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_bridleway))))))))))))))));
}
};
}; // end of class highway_horse_tunnel 
class highway_layer extends typebase{
public highway_layer obj;
protected Filter mcode273 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode274 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode275 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode276 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode277 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode278 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode279 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode280 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode281 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode282 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode283 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode284 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode285 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode286 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode287 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode288 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode289 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode290 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_3)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode291 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode292 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode293 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode294 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode295 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode296 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_4)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode297 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode298 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode299 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode300 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode301 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode302 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_5)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))))))))));
}
};
protected Filter mcode303 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode304 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode305 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode306 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode307 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode308 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_1)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode309 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode310 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode311 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode312 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode313 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
protected Filter mcode314 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlayer().equals_(CONST_2)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))))))))));
}
};
}; // end of class highway_layer 
class highway_length extends typebase{
public highway_length obj;
protected Filter mcode315 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode316 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode317 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode318 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode319 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode320 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode321 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode322 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode323 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode324 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode325 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode326 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode327 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode328 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode329 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode330 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode331 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode332 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode333 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode334 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode335 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode336 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode337 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode338 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode339 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode340 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode341 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode342 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode343 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode344 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode345 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode346 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode347 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode348 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode349 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode350 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode351 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode352 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode353 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode354 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode355 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("1")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode356 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("2")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode357 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("3")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode358 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("4")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode359 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("5")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode360 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("6")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode361 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("7")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode362 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getlength().equals_("8")))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
}; // end of class highway_length 
class highway_railway extends typebase{
public highway_railway obj;
protected Filter mcode363 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().notequals_("")))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_abandoned)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_disused))))))))))))))));
}
};
protected Filter mcode364 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_platform)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_platform))))))))));
}
};
protected Filter mcode365 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_platform)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_platform))))))))));
}
};
}; // end of class highway_railway 
class highway_service extends typebase{
public highway_service obj;
protected Filter mcode366 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode367 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode368 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode369 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode370 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
}; // end of class highway_service 
class highway_service_tunnel extends typebase{
public highway_service_tunnel obj;
protected Filter mcode371 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))))),And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode372 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))))),And(Concat(Not(Parens(Condition(getObj().getservice().equals_(CONST_parking_aisle)))))))))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
}; // end of class highway_service_tunnel 
class highway_tunnel extends typebase{
public highway_tunnel obj;
protected Filter mcode373 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode374 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode375 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode376 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode377 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode378 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode379 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode380 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode381 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode382 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode383 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode384 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode385 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode386 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode387 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode388 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode389 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode390 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode391 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode392 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode393 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode394 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode395 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode396 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode397 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode398 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode399 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode400 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode401 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode402 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode403 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode404 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode405 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode406 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode407 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode408 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode409 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode410 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode411 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode412 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode413 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode414 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode415 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode416 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_road)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))))))))));
}
};
protected Filter mcode417 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode418 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_service))))))))));
}
};
protected Filter mcode419 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode420 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode421 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode422 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode423 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode424 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode425 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode426 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_pedestrian))))))))));
}
};
protected Filter mcode427 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode428 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode429 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode430 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway_link))))))))));
}
};
protected Filter mcode431 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode432 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode433 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode434 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk_link))))))))));
}
};
protected Filter mcode435 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode436 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode437 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode438 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary_link))))))))));
}
};
protected Filter mcode439 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode440 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode441 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode442 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary_link))))))))));
}
};
protected Filter mcode443 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode444 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode445 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode446 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary_link))))))))));
}
};
protected Filter mcode447 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode448 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode449 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode450 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_motorway))))))))));
}
};
protected Filter mcode451 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode452 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode453 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode454 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_trunk))))))))));
}
};
protected Filter mcode455 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode456 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode457 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode458 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_primary))))))))));
}
};
protected Filter mcode459 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode460 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode461 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode462 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_secondary))))))))));
}
};
protected Filter mcode463 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode464 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode465 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode466 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode467 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_unclassified)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_minor)))))))),And(Concat(Not(Parens(Condition(getObj().gethighway().equals_(CONST_residential))))))))))))))));
}
};
protected Filter mcode468 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode469 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode470 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
protected Filter mcode471 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().gethighway().equals_(CONST_tertiary))))))))));
}
};
}; // end of class highway_tunnel 
class landuse extends typebase{
public landuse obj;
protected Filter mcode472 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_quarry))))))))));
}
};
protected Filter mcode473 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_orchard))))))))));
}
};
protected Filter mcode474 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_vineyard))))))))));
}
};
protected Filter mcode475 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_vineyard))))))))));
}
};
protected Filter mcode476 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_residential))))))))));
}
};
protected Filter mcode477 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_military))))))))));
}
};
protected Filter mcode478 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_grass)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_meadow))))))))));
}
};
protected Filter mcode479 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_allotments))))))))));
}
};
protected Filter mcode480 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_forest))))))))));
}
};
protected Filter mcode481 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_forest))))))))));
}
};
protected Filter mcode482 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_farmyard))))))))));
}
};
protected Filter mcode483 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_farmland)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_farm))))))))));
}
};
protected Filter mcode484 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_conservation)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_recreation_ground))))))))));
}
};
protected Filter mcode485 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_village_green))))))))));
}
};
protected Filter mcode486 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_retail))))))))));
}
};
protected Filter mcode487 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_retail))))))))));
}
};
protected Filter mcode488 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_railway)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_industrial))))))))));
}
};
protected Filter mcode489 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_commercial))))))))));
}
};
protected Filter mcode490 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_construction)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_greenfield)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_landfill)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_brownfield))))))))));
}
};
}; // end of class landuse 
class landuse_leisure extends typebase{
public landuse_leisure obj;
protected Filter mcode491 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_vineyard)))))))),And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_nature_reserve))))))))));
}
};
}; // end of class landuse_leisure 
class landuse_leisure_point extends typebase{
public landuse_leisure_point obj;
protected Filter mcode492 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().getpoint().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().notequals_("")))))))),And(Concat(Not(Parens(Condition(getObj().getleisure().notequals_(""))))))))))))))));
}
};
}; // end of class landuse_leisure_point 
class landuse_natural extends typebase{
public landuse_natural obj;
protected Filter mcode493 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_field)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_field))))))))));
}
};
protected Filter mcode494 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_field)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_field))))))))));
}
};
protected Filter mcode495 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_wood)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_wood))))))))));
}
};
protected Filter mcode496 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_basin)))))))),And(Concat(Not(Parens(Condition(getObj().getlanduse().equals_(CONST_reservoir)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_lake)))))))),And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_water))))))))));
}
};
}; // end of class landuse_natural 
class leisure extends typebase{
public leisure obj;
protected Filter mcode497 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_playground))))))))));
}
};
protected Filter mcode498 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_nature_reserve))))))))));
}
};
protected Filter mcode499 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_nature_reserve))))))))));
}
};
protected Filter mcode500 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_recreation_ground)))))))),And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_park))))))))));
}
};
protected Filter mcode501 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_common))))))))));
}
};
protected Filter mcode502 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_garden))))))))));
}
};
protected Filter mcode503 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_golf_course))))))))));
}
};
protected Filter mcode504 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_pitch))))))))));
}
};
protected Filter mcode505 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_marina))))))))));
}
};
protected Filter mcode506 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getleisure().equals_(CONST_marina))))))))));
}
};
}; // end of class leisure 
class man_made extends typebase{
public man_made obj;
protected Filter mcode507 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getman_made().equals_(CONST_lighthouse))))))))));
}
};
protected Filter mcode508 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getman_made().equals_(CONST_windmill))))))))));
}
};
protected Filter mcode509 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getman_made().equals_(CONST_embankment))))))))));
}
};
}; // end of class man_made 
class military extends typebase{
public military obj;
protected Filter mcode510 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_barracks))))))))));
}
};
protected Filter mcode511 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_danger_area))))))))));
}
};
protected Filter mcode512 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_danger_area))))))))));
}
};
protected Filter mcode513 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getmilitary().equals_(CONST_danger_area))))))))));
}
};
}; // end of class military 
class natural extends typebase{
public natural obj;
protected Filter mcode514 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_heath))))))))));
}
};
protected Filter mcode515 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_beach))))))))));
}
};
protected Filter mcode516 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_mud))))))))));
}
};
protected Filter mcode517 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_wood))))))))));
}
};
protected Filter mcode518 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_peak))))))))));
}
};
protected Filter mcode519 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_peak))))))))));
}
};
protected Filter mcode520 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_bay))))))))));
}
};
protected Filter mcode521 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_spring))))))))));
}
};
protected Filter mcode522 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_cliff))))))))));
}
};
protected Filter mcode523 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getnatural().equals_(CONST_cliff))))))))));
}
};
}; // end of class natural 
class oneway extends typebase{
public oneway obj;
protected Filter mcode524 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getoneway().equals_(CONST_yes))))))))));
}
};
protected Filter mcode525 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getoneway()))))))));
}
};
}; // end of class oneway 
class place extends typebase{
public place obj;
protected Filter mcode526 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getplace().equals_(CONST_island))))))))));
}
};
}; // end of class place 
class power extends typebase{
public power obj;
protected Filter mcode527 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getpower().equals_(CONST_station))))))))));
}
};
protected Filter mcode528 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getpower().equals_(CONST_station))))))))));
}
};
protected Filter mcode529 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getpower().equals_(CONST_sub_station))))))))));
}
};
}; // end of class power 
class railway extends typebase{
public railway obj;
protected Filter mcode530 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getrailway()))))))));
}
};
protected Filter mcode531 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getrailway()))))))));
}
};
protected Filter mcode532 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_subway))))))))));
}
};
protected Filter mcode533 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail))))))))));
}
};
protected Filter mcode534 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode535 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
}
};
protected Filter mcode536 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
}
};
protected Filter mcode537 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_preserved))))))))));
}
};
protected Filter mcode538 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_preserved))))))))));
}
};
protected Filter mcode539 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_monorail))))))))));
}
};
}; // end of class railway 
class railway_tunnel extends typebase{
public railway_tunnel obj;
protected Filter mcode540 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode541 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode542 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode543 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode544 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge))))))))))))))));
}
};
protected Filter mcode545 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_funicular)))))))),And(Concat(Not(Parens(Condition(getObj().getrailway().equals_(CONST_narrow_gauge))))))))))))))));
}
};
protected Filter mcode546 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
}
};
protected Filter mcode547 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_tram))))))))));
}
};
protected Filter mcode548 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail))))))))));
}
};
protected Filter mcode549 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_light_rail))))))))));
}
};
protected Filter mcode550 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_subway))))))))));
}
};
protected Filter mcode551 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_subway))))))))));
}
};
protected Filter mcode552 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode553 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode554 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
protected Filter mcode555 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(And(Concat(Not(Parens(Condition(getObj().gettunnel().equals_(CONST_yes)))))),Not(Parens(Condition(getObj().getrailway().equals_(CONST_rail))))))))));
}
};
}; // end of class railway_tunnel 
class shop extends typebase{
public shop obj;
protected Filter mcode556 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_hairdresser)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_doityourself)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_convenience)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_fashion)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_clothes)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_bakery))))))))));
}
};
protected Filter mcode557 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_department_store)))))))),And(Concat(Not(Parens(Condition(getObj().getshop().equals_(CONST_supermarket))))))))));
}
};
}; // end of class shop 
class tourism extends typebase{
public tourism obj;
protected Filter mcode558 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_picnic_site)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_caravan_site)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_camp_site))))))))));
}
};
protected Filter mcode559 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_attraction))))))))));
}
};
protected Filter mcode560 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_zoo))))))))));
}
};
protected Filter mcode561 = new Filter() { public void exec () {Filter(Concat(Or(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_hostel)))))))),And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_hotel))))))))));
}
};
protected Filter mcode562 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_guest_house))))))))));
}
};
protected Filter mcode563 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_camp_site))))))))));
}
};
protected Filter mcode564 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_caravan_site))))))))));
}
};
protected Filter mcode565 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
}
};
protected Filter mcode566 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
}
};
protected Filter mcode567 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_museum))))))))));
}
};
protected Filter mcode568 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_attraction))))))))));
}
};
protected Filter mcode569 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
}
};
protected Filter mcode570 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettourism().equals_(CONST_theme_park))))))))));
}
};
}; // end of class tourism 
class tracktype extends typebase{
public tracktype obj;
protected Filter mcode571 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade1))))))))));
}
};
protected Filter mcode572 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade2))))))))));
}
};
protected Filter mcode573 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade3))))))))));
}
};
protected Filter mcode574 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade4))))))))));
}
};
protected Filter mcode575 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade5))))))))));
}
};
protected Filter mcode576 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade1))))))))));
}
};
protected Filter mcode577 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade2))))))))));
}
};
protected Filter mcode578 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade3))))))))));
}
};
protected Filter mcode579 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade4))))))))));
}
};
protected Filter mcode580 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade5))))))))));
}
};
protected Filter mcode581 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade1))))))))));
}
};
protected Filter mcode582 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade2))))))))));
}
};
protected Filter mcode583 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade3))))))))));
}
};
protected Filter mcode584 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade4))))))))));
}
};
protected Filter mcode585 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().gettracktype().equals_(CONST_grade5))))))))));
}
};
}; // end of class tracktype 
class waterway extends typebase{
public waterway obj;
protected Filter mcode586 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(Condition(getObj().getwaterway().equals_(CONST_lock))))))))));
}
};
}; // end of class waterway 
class way_area extends typebase{
public way_area obj;
protected Filter mcode587 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
}
};
protected Filter mcode588 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
}
};
protected Filter mcode589 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
}
};
protected Filter mcode590 = new Filter() { public void exec () {Filter(Concat(Or(Concat(And(Concat(Not(Parens(getObj().getway_area()))))))));
}
};
}; // end of class way_area 
public void LoadParameters(){
}
void ProcessStyle (BaseObject obj){}
public void LoadStyles(){
Load(mturning_circle);
Load(mhighway_area_casing);
Load(mhighway_area_fill);
Load(mleisure);
Load(msports_grounds);
Load(marea_text);
Load(mtext);
Load(mtunnels_casing);
Load(mtunnels_fill);
Load(mminor_roads_casing_links);
Load(mminor_roads_casing);
Load(mminor_roads_fill_links);
Load(mminor_roads_fill);
Load(maccess);
Load(mfootbikecycle_tunnels);
Load(mtracks_notunnel_nobridge);
Load(mtracks_bridges);
Load(mtracks_tunnels);
Load(mroad_bridges_casing);
Load(mroad_bridges_fill);
Load(mwaterway_bridges);
Load(mnoncased_ways_bridges);
Load(mmwaybridge_layer0_casing);
Load(mmwaybridge_layer0_fill);
Load(mmwaybridge_layer1_casing);
Load(mmwaybridge_layer1_fill);
Load(mmwaybridge_layer2_casing);
Load(mmwaybridge_layer2_fill);
Load(mmwaybridge_layer3_casing);
Load(mmwaybridge_layer3_fill);
Load(mmwaybridge_layer4_casing);
Load(mmwaybridge_layer4_fill);
Load(mmwaybridge_layer5_casing);
Load(mmwaybridge_layer5_fill);
Load(mprimarybridge_layer0_casing);
Load(mprimarybridge_layer0_fill);
Load(mprimarybridge_layer1_casing);
Load(mprimarybridge_layer1_fill);
Load(mprimarybridge_layer2_casing);
Load(mprimarybridge_layer2_fill);
Load(mroads);
Load(mtrams);
Load(mguideways);
Load(mroads_text_low_zoom);
Load(mroads_text);
Load(mcliffs);
Load(mbarriers);
Load(mdirections);
Load(mboundary);
Load(mtheme_park);
}
public void LoadLayers(){
Load(mLayer0);
Load(mLayer1);
Load(mLayer2);
Load(mLayer3);
Load(mLayer4);
Load(mLayer5);
Load(mLayer6);
Load(mLayer7);
Load(mLayer8);
Load(mLayer9);
Load(mLayer10);
Load(mLayer11);
Load(mLayer12);
Load(mLayer13);
Load(mLayer14);
Load(mLayer15);
Load(mLayer16);
Load(mLayer17);
Load(mLayer18);
Load(mLayer19);
Load(mLayer20);
Load(mLayer21);
Load(mLayer22);
Load(mLayer23);
Load(mLayer24);
Load(mLayer25);
Load(mLayer26);
Load(mLayer27);
}
public static final layer VALUE_1=null;
public static final layer VALUE_2=null;
public static final layer VALUE_3=null;
public static final layer VALUE_4=null;
public static final layer VALUE_5=null;
public static final bridge_highway_railway VALUE_abandoned=null;
public static final aeroway VALUE_aerodrome=null;
public static final landuse VALUE_allotments=null;
public static final amenity_tourism VALUE_alpine_hut=null;
public static final aeroway VALUE_apron=null;
public static final tourism VALUE_attraction=null;
public static final shop VALUE_bakery=null;
public static final amenity VALUE_bank=null;
public static final amenity VALUE_bar=null;
public static final military VALUE_barracks=null;
public static final landuse VALUE_basin=null;
public static final natural VALUE_bay=null;
public static final natural VALUE_beach=null;
public static final highway_horse_tunnel VALUE_bridleway=null;
public static final landuse VALUE_brownfield=null;
public static final amenity VALUE_bus_station=null;
public static final highway VALUE_byway=null;
public static final amenity VALUE_cafe=null;
public static final tourism VALUE_camp_site=null;
public static final tourism VALUE_caravan_site=null;
public static final amenity_landuse_religion VALUE_cemetery=null;
public static final amenity VALUE_cinema=null;
public static final natural VALUE_cliff=null;
public static final shop VALUE_clothes=null;
public static final amenity VALUE_college=null;
public static final landuse VALUE_commercial=null;
public static final leisure VALUE_common=null;
public static final landuse VALUE_conservation=null;
public static final bridge_construction_highway_landuse_railway VALUE_construction=null;
public static final shop VALUE_convenience=null;
public static final bicycle_highway_tunnel VALUE_cycleway=null;
public static final military VALUE_danger_area=null;
public static final shop VALUE_department_store=null;
public static final bicycle_foot_horse_tunnel VALUE_designated=null;
public static final access_highway VALUE_destination=null;
public static final bridge_highway_railway VALUE_disused=null;
public static final shop VALUE_doityourself=null;
public static final man_made VALUE_embankment=null;
public static final amenity VALUE_embassy=null;
public static final landuse VALUE_farm=null;
public static final landuse VALUE_farmland=null;
public static final landuse VALUE_farmyard=null;
public static final shop VALUE_fashion=null;
public static final amenity VALUE_fast_food=null;
public static final landuse_natural VALUE_field=null;
public static final amenity VALUE_fire_station=null;
public static final foot_highway_tunnel VALUE_footway=null;
public static final landuse VALUE_forest=null;
public static final amenity VALUE_fuel=null;
public static final railway_tunnel VALUE_funicular=null;
public static final leisure VALUE_garden=null;
public static final aeroway VALUE_gate=null;
public static final leisure VALUE_golf_course=null;
public static final tracktype VALUE_grade1=null;
public static final tracktype VALUE_grade2=null;
public static final tracktype VALUE_grade3=null;
public static final tracktype VALUE_grade4=null;
public static final tracktype VALUE_grade5=null;
public static final landuse VALUE_grass=null;
public static final amenity_landuse_religion VALUE_grave_yard=null;
public static final landuse VALUE_greenfield=null;
public static final tourism VALUE_guest_house=null;
public static final shop VALUE_hairdresser=null;
public static final natural VALUE_heath=null;
public static final barrier_natural VALUE_hedge=null;
public static final amenity VALUE_hospital=null;
public static final tourism VALUE_hostel=null;
public static final tourism VALUE_hotel=null;
public static final landuse VALUE_industrial=null;
public static final place VALUE_island=null;
public static final religion VALUE_jewish=null;
public static final amenity VALUE_kindergarten=null;
public static final landuse_natural VALUE_lake=null;
public static final landuse VALUE_landfill=null;
public static final amenity VALUE_library=null;
public static final railway_tunnel VALUE_light_rail=null;
public static final man_made VALUE_lighthouse=null;
public static final construction_highway VALUE_living_street=null;
public static final waterway VALUE_lock=null;
public static final leisure VALUE_marina=null;
public static final landuse VALUE_meadow=null;
public static final landuse VALUE_military=null;
public static final highway_tunnel VALUE_minor=null;
public static final railway VALUE_monorail=null;
public static final construction_highway_layer_length_tunnel VALUE_motorway=null;
public static final highway VALUE_motorway_junction=null;
public static final construction_highway_layer_tunnel VALUE_motorway_link=null;
public static final natural VALUE_mud=null;
public static final tourism VALUE_museum=null;
public static final railway_tunnel VALUE_narrow_gauge=null;
public static final landuse_leisure VALUE_nature_reserve=null;
public static final access VALUE_no=null;
public static final landuse VALUE_orchard=null;
public static final leisure VALUE_park=null;
public static final access_amenity VALUE_parking=null;
public static final service_tunnel VALUE_parking_aisle=null;
public static final bicycle_foot_highway_horse_tunnel VALUE_path=null;
public static final natural VALUE_peak=null;
public static final highway_tunnel VALUE_pedestrian=null;
public static final access_highway VALUE_permissive=null;
public static final amenity VALUE_pharmacy=null;
public static final tourism VALUE_picnic_site=null;
public static final leisure VALUE_pitch=null;
public static final amenity VALUE_place_of_worship=null;
public static final highway_railway VALUE_platform=null;
public static final leisure VALUE_playground=null;
public static final amenity VALUE_police=null;
public static final railway VALUE_preserved=null;
public static final construction_highway_layer_length_tunnel VALUE_primary=null;
public static final construction_highway_layer_tunnel VALUE_primary_link=null;
public static final amenity VALUE_prison=null;
public static final access VALUE_private=null;
public static final construction_highway VALUE_proposed=null;
public static final amenity VALUE_pub=null;
public static final access VALUE_public=null;
public static final landuse VALUE_quarry=null;
public static final highway VALUE_raceway=null;
public static final bridge_railway_tunnel VALUE_rail=null;
public static final landuse VALUE_railway=null;
public static final landuse_leisure VALUE_recreation_ground=null;
public static final landuse VALUE_reservoir=null;
public static final bridge_construction_highway_landuse_tunnel VALUE_residential=null;
public static final amenity VALUE_restaurant=null;
public static final landuse VALUE_retail=null;
public static final highway_tunnel VALUE_road=null;
public static final aeroway_bridge VALUE_runway=null;
public static final amenity VALUE_school=null;
public static final bridge_construction_highway_length_tunnel VALUE_secondary=null;
public static final construction_highway_tunnel VALUE_secondary_link=null;
public static final construction_highway_service_tunnel VALUE_service=null;
public static final amenity VALUE_shelter=null;
public static final natural VALUE_spring=null;
public static final power VALUE_station=null;
public static final highway VALUE_steps=null;
public static final power VALUE_sub_station=null;
public static final railway_tunnel VALUE_subway=null;
public static final shop VALUE_supermarket=null;
public static final aeroway_bridge VALUE_taxiway=null;
public static final bridge_construction_highway_length_tunnel VALUE_tertiary=null;
public static final construction_highway_tunnel VALUE_tertiary_link=null;
public static final amenity VALUE_theatre=null;
public static final tourism VALUE_theme_park=null;
public static final highway VALUE_track=null;
public static final railway_tunnel VALUE_tram=null;
public static final construction_highway_length_tunnel VALUE_trunk=null;
public static final construction_highway_tunnel VALUE_trunk_link=null;
public static final bridge_construction_highway_tunnel VALUE_unclassified=null;
public static final amenity VALUE_university=null;
public static final highway VALUE_unsurfaced=null;
public static final landuse VALUE_village_green=null;
public static final landuse VALUE_vineyard=null;
public static final landuse_natural VALUE_water=null;
public static final man_made VALUE_windmill=null;
public static final landuse_natural VALUE_wood=null;
public static final bridge_oneway_point_tunnel VALUE_yes=null;
public static final tourism VALUE_zoo=null;};//end StyleEvaluator 
